<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="DefaultSystemBordersAppearInAdmin">
        <annotations>
            <features value="Pagebuilder Options Menu MAGETWO-83848"/>
            <stories value="Accessing Options Panel MAGETWO-66176"/>
            <title value="System Borders Default Style in Admin"/>
            <description value="A user should be able to see default system borders for all content blocks in admin preview"/>
            <severity value="CRITICAL"/>
            <testCaseId value=""/>
            <group value="skip"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <!-- Add all content blocks to stage-->
        <actionGroup ref="dragContentBlockToStage" stepKey="dragTextIntoStage">
            <argument name="contentBlockType" value="PageBuilderTextContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragButtonsIntoStage">
            <argument name="contentBlockType" value="PageBuilderButtonsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragHeaderIntoStage">
            <argument name="contentBlockType" value="PageBuilderHeaderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragDividerIntoStage">
            <argument name="contentBlockType" value="PageBuilderDividerContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.mediaGroup}}" stepKey="clickMediaGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragImageIntoStage">
            <argument name="contentBlockType" value="PageBuilderImageContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragBannerIntoStage">
            <argument name="contentBlockType" value="PageBuilderBannerContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragVideoIntoStage">
            <argument name="contentBlockType" value="PageBuilderVideoContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderAdvancedSliderContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragTabsIntoStage">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragAccordionIntoStage">
            <argument name="contentBlockType" value="PageBuilderAccordionContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragMapIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragNewsletterIntoStage">
            <argument name="contentBlockType" value="PageBuilderNewsletterContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.magentoGroup}}" stepKey="clickMagentoGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderBlockContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductListIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductListContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.otherGroup}}" stepKey="clickOtherGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragAnchorIntoStage">
            <argument name="contentBlockType" value="PageBuilderAnchorContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragCodeIntoStage">
            <argument name="contentBlockType" value="PageBuilderCodeContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragHtmlIntoStage">
            <argument name="contentBlockType" value="PageBuilderHtmlContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSearchIntoStage">
            <argument name="contentBlockType" value="PageBuilderSearchContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragColumnIntoStage">
            <argument name="contentBlockType" value="PageBuilderColumnContentBlock"/>
        </actionGroup>
        <!-- See row and column system border on default - Depends on MQE-818 -->
        <executeJS function="window.getComputedStyle(document.querySelector('.pagebuilder-row'),null).getPropertyValue('outline')" stepKey="getDefaultRowOutlineStyle"/>
        <assertEquals expected="rgba(153, 153, 153, 0.3) solid 1px" expectedType="string" actual="getDefaultRowOutlineStyle" actualType="variable" message="pass" stepKey="assertDefaultRowOutlineStyle"/>
    </test>
</tests>
