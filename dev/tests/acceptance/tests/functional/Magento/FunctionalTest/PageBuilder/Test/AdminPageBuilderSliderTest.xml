<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="AddSliderContentBlockToCMSPage">
        <annotations>
            <features value="PageBuilder base functionality MAGETWO-83921"/>
            <stories value="Slider MAGETWO-83933"/>
            <title value="Add Slider in PageBuilder for new CMS page and view on Storefront"/>
            <description value="The user should be able to add the slides media content type to slider media content type and it should be visible on the frontend"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-84920"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <fillField selector="{{PageBuilderActionsSection.searchPanel}}" userInput="slider" stepKey="fillSearch"/>
        <see userInput="Slider" selector="{{PageBuilderActionsSection.searchResults}}" stepKey="validateSearchResults"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Verify empty slider has 300 px min height on stage -->
        <seeElement selector="{{SliderInAdmin.sliderMinHeight(PageBuilderSliderMinHeightDefault300Property.value)}}" stepKey="verifyMinHeight300OnAdmin"/>

        <!--Open Slider Settings-->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterAutoplayYes">
            <argument name="property" value="PageBuilderSliderAutoplayOnProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAutoplaySpeed5000">
            <argument name="property" value="PageBuilderSliderAutoplaySpeed5000Property"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterFadeYes">
            <argument name="property" value="PageBuilderSliderFadeYesProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterIsInfiniteYes">
            <argument name="property" value="PageBuilderSliderIsInfiniteProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterShowArrowYes">
            <argument name="property" value="PageBuilderSliderShowArrowsYesProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterShowDotsNo">
            <argument name="property" value="PageBuilderSliderShowDotsNoProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeSliderMinHeightDefault300">
            <argument name="property" value="PageBuilderSliderMinHeightDefault300Property"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSliderMinHeight500">
            <argument name="property" value="PageBuilderSliderMinHeight500Property"/>
        </actionGroup>
        <!--Edit Advanced Settings-->
        <click selector="{{AdvancedForm.sectionName}}" stepKey="clickAdvancedFormSection"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedAlignmentPropertyDefault">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterAdvancedAlignmentPropertyLeft">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyLeft"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedBorderPropertyNone">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterAdvancedBorderProperty">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDotted"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderColorProperty">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderWidthProperty">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderRadiusProperty">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedClassProperty">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMarginsAndPadding" stepKey="enterAdvancedMarginsAndPaddingProperty">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>

        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!--Add first slide-->
        <actionGroup ref="addSlide" stepKey="addSlide"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <executeJS function="tinymce.activeEditor.setContent(tinymce.activeEditor.getContent() + 'Slide 1 Content')" stepKey="addText1ToWYSIWYG"/>
        <click selector="div.modal-content div.mce-edit-area" stepKey="clickToTriggerValidation1"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkText1">
            <argument name="property" value="PageBuilderSlideItemLinkText1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkURL1">
            <argument name="property" value="PageBuilderSlideItemLinkURL1"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile1">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <!--<actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterSlideHasBackgroundOverlay1">-->
            <!--<argument name="property" value="PageBuilderSlideItemHasBackgroundOverlay1"/>-->
        <!--</actionGroup>-->
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel1Settings"/>
        <!--Add second slide-->
        <actionGroup ref="addSlide" stepKey="addSlide2"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle2">
            <argument name="property" value="PageBuilderSlideItemTitle2"/>
        </actionGroup>
        <executeJS function="tinymce.activeEditor.setContent(tinymce.activeEditor.getContent() + 'Slide 2 Content')" stepKey="addText2ToWYSIWYG"/>
        <click selector="div.modal-content div.mce-edit-area" stepKey="clickToTriggerValidation2"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkText2">
            <argument name="property" value="PageBuilderSlideItemLinkText2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkURL2">
            <argument name="property" value="PageBuilderSlideItemLinkURL2"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile2">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty2"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel2Settings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!--View slider and slides on stage-->
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <moveMouseOver selector="{{SliderInAdmin.sliderContainer}}" stepKey="onMouseOverSliderStage"/>
        <moveMouseOver selector="{{SliderInAdmin.slideNavigationDot('1')}}" stepKey="moveMouseOverSlideNavigationDot1"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SliderInAdmin.slideNavigationDotTitleTooltip}}" stepKey="seeSlideTitle1"/>
        <seeElement selector="{{SliderInAdmin.slideNavigationHandle}}" stepKey="seeSlideNavigationHandle1"/>
        <moveMouseOver selector="{{SliderInAdmin.slideNavigationDot('2')}}" stepKey="moveMouseOverSlideNavigationDot2"/>
        <see userInput="{{PageBuilderSlideItemTitle2.value}}" selector="{{SliderInAdmin.slideNavigationDotTitleTooltip}}" stepKey="seeSlideTitle2"/>
        <seeElement selector="{{SliderInAdmin.slideNavigationHandle}}" stepKey="seeSlideNavigationHandle2"/>
        <!--<seeElement selector="{{SliderInAdmin.Fade}}" stepKey="verifyFadeYesOnAdmin"/>-->
        <seeElement selector="{{SliderInAdmin.ShowArrows}}" stepKey="verifyArrowsYesOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderMinHeight(PageBuilderSliderMinHeight500Property.value)}}" stepKey="verifyMinHeight500OnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderAlignment(PageBuilderAdvancedAlignmentPropertyLeft.value)}}" stepKey="verifyAlignmentLeftOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderBorderStyle(PageBuilderAdvancedBorderWidthProperty10.value, PageBuilderAdvancedBorderPropertyDotted.value, PageBuilderAdvancedBorderColorProperty_green.rbg)}}" stepKey="verifyBorderStyleOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderBorderRadiusStyle(PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="verifyBorderRadiusStyleOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderMarginPaddings(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="verifySliderMarginPaddingOnAdmin"/>

        <!--View slider and slides on storefront-->
        <amOnPage url="slider{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <seeElement selector="{{SliderOnFrontend.SliderDisplay}}" stepKey="seeSliderOnPageBuilderPage"/>
        <seeElement selector="{{SliderOnFrontend.Autoplay(PageBuilderSliderAutoplayOnProperty.value)}}" stepKey="seeSliderAutoplayOnSetting"/>
        <seeElement selector="{{SliderOnFrontend.AutoplaySpeed(PageBuilderSliderAutoplaySpeed5000Property.value)}}" stepKey="seeSliderAutoplaySpeedSetting"/>
        <seeElement selector="{{SliderOnFrontend.Fade(PageBuilderSliderFadeYesProperty.value)}}" stepKey="seeSliderFadeSetting"/>
        <seeElement selector="{{SliderOnFrontend.IsInfinite(PageBuilderSliderIsInfiniteProperty.value)}}" stepKey="seeSliderIsInfiniteSetting"/>
        <seeElement selector="{{SliderOnFrontend.ShowArrows(PageBuilderSliderShowArrowsYesProperty.value)}}" stepKey="seeSliderShowArrowsSetting"/>
        <seeElement selector="{{SliderOnFrontend.ShowDots(PageBuilderSliderShowDotsNoProperty.value)}}" stepKey="seeSliderShowDotsOffOnFrontendSetting"/>
        <seeElement selector="{{SliderOnFrontend.sliderMinHeight(PageBuilderSliderMinHeight500Property.value)}}" stepKey="verifyMinHeightOnFrontEnd"/>
        <seeElement selector="{{SliderOnFrontend.sliderMarginPaddings(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="verifySliderMarginPaddingOnFrontEnd"/>

        <seeElement selector="{{SlideOnFrontend.slide('1')}}" stepKey="seeSlide1InSlider"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnFrontend.slideTitle1}}" stepKey="seeSlide1TitleDisplayed"/>
        <see userInput="{{PageBuilderSlideItemContent1.value}}" selector="{{SlideOnFrontend.slideContent1}}" stepKey="seeSlide1ContentDisplayed"/>
        <!--<seeElement selector="{{SlideOnFrontend.slideHasOverlay1}}" stepKey="seeSlide1HasOverlay"/>-->
        <see userInput="{{PageBuilderSlideItemLinkText1.value}}" selector="{{SlideOnFrontend.slideLinkText1}}" stepKey="seeSlide1LinkTextDisplayed"/>
        <seeElement selector="{{SlideOnFrontend.slideLinkURL1(PageBuilderSlideItemLinkURL1.value)}}" stepKey="seeSlide1LinkURL"/>
        <seeElement selector="{{SlideOnFrontend.slideBackgroundImage('0',PageBuilderSlideBackgroundImageProperty1.path, PageBuilderSlideBackgroundImageProperty1.fileType)}}" stepKey="seeSlide1Background"/>
        <actionGroup ref="switchSlide" stepKey="switchSlide"/>
        <see userInput="{{PageBuilderSlideItemTitle2.value}}" selector="{{SlideOnFrontend.slideTitle2}}" stepKey="seeSlide2TitleDisplayed"/>
        <see userInput="{{PageBuilderSlideItemContent2.value}}" selector="{{SlideOnFrontend.slideContent2}}" stepKey="seeSlide2ContentDisplayed"/>
        <see userInput="{{PageBuilderSlideItemLinkText2.value}}" selector="{{SlideOnFrontend.slideLinkText2}}" stepKey="seeSlide2LinkTextDisplayed"/>
        <seeElement selector="{{SlideOnFrontend.slideLinkURL2(PageBuilderSlideItemLinkURL2.value)}}" stepKey="seeSlide2LinkURL"/>
        <seeElement selector="{{SlideOnFrontend.slideBackgroundImage('1',PageBuilderSlideBackgroundImageProperty2.path, PageBuilderSlideBackgroundImageProperty2.fileType)}}" stepKey="seeSlide2Background"/>
    </test>
    <test name="RemoveSliderFromStage">
        <annotations>
            <features value="PageBuilder base functionality MAGETWO-83921"/>
            <stories value="Slider MAGETWO-83933"/>
            <title value="Remove slider content block from stage"/>
            <description value="A user should be able to remove slider block from a row."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-84919"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <fillField selector="{{PageBuilderActionsSection.searchPanel}}" userInput="slider" stepKey="fillSearch"/>
        <see userInput="Slider" selector="{{PageBuilderActionsSection.searchResults}}" stepKey="validateSearchResults"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="removeContentBlockFromStage" stepKey="removeContentBlockFromStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <dontSeeElement selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderSliderContentBlock.role)}}" stepKey="dontSeeContentBlockInStage"/>
    </test>
    <test name="SliderValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="MAGETWO-83415"/>
            <title value="Slider - Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Slider."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89437"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <click selector="{{PageBuilderActionsSection.mediaGroup}}" stepKey="clickMediaGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Validate Style On Stage -->
        <comment userInput="Validate Style On Stage" stepKey="CommentValidateStage"/>
        <waitForElementVisible selector="{{SliderInAdmin.default('1', PageBuilderAdvancedBorderPropertyNone.value, PageBuilderAdvancedBorderRadiusDefaultProperty.value, PageBuilderMarginsPropertyDefault.value, PageBuilderPaddingPropertyDefault.value, PageBuilderSliderMinHeightDefault300Property.value)}}" stepKey="waitForStyle"/>
    </test>
    <test name="SlideValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="MAGETWO-83415"/>
            <title value="Slide - Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Slide."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89439"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <click selector="{{PageBuilderActionsSection.mediaGroup}}" stepKey="clickMediaGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="addSlide" stepKey="addSlide"/>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingProperty40"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Validate Style On Stage. Currently Not Implemented -->
        <comment userInput="Validate Style On Stage. Currently Not Implemented" stepKey="CommentValidateStage"/>
        </test>
    <test name="CanAddImageToSlide">
        <annotations>
            <title value="Add an image content block into slide"/>
            <description value="A user should be able to add an image into a slide."/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <!-- Skipped; see MAGETWO-88218 -->
            <group value="skip"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilder"/>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCategory" stepKey="createPreReqCategory" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCategory" stepKey="navigateToCreatedCatalogPage">
            <argument name="Category" value="$$createPreReqCategory$$"/>
        </actionGroup>
        <click selector="{{AdminProductFormSection.contentTab}}" stepKey="clickContentTab"/>
        <waitForElementVisible selector="{{PageBuilderActionsSection.openPageBuilderCatalog}}" stepKey="waitForPageBuilderBtn" />
        <see userInput="Edit with Page Builder" stepKey="seePageBuilderBtn"/>
        <click selector="{{PageBuilderActionsSection.openPageBuilderCatalog}}" stepKey="clickOnPageBuilderBtn" />
        <!--See PageBuilder fullsize-->
        <waitForElementVisible selector="{{PageBuilderActionsSection.identifyPageBuilder}}" stepKey="waiForPageBuilderVisible" />
        <seeElement selector="{{PageBuilderActionsSection.identifyPageBuilder}}" stepKey="seePageBuilderVisible" />
        <click selector="{{PageBuilderActionsSection.mediaGroup}}" stepKey="clickMediaGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragAdvancedSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="addSlide" stepKey="addSlide"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <fillField selector="{{TextOnSlider.textArea}}" userInput="Text from Slide" stepKey="addTextToEditor"/>
        <seeElement selector="{{UploadImageSection.SelectFromGalleryBtn('Background Image')}}" stepKey="seeSelectFromGalleryBtnOnImage"/>
        <seeElement selector="{{UploadImageSection.PlaceholderContent('Background Image')}}" stepKey="seeImagePlaceHolderOnImage1"/>

        <!--Upload image from local machine using image placeholder button-->
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile1">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <waitForLoadingMaskToDisappear stepKey="waitForLoading1" />
        <waitForElementVisible  selector="{{ImageOnPreview.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="waitForUploadImage1" />
        <seeElement selector="{{ImageOnPreview.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="seeImageNameOnPreview1"/>
        <seeElement selector="{{ImageOnPreview.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource1"/>
        <seeElement selector="{{ImageOnPreview.imagePreview}}" stepKey="seeImageDisplayed1"/>

        <!--Remove uploaded image by TrashBin icon-->
        <click selector="{{ImageOnPreview.trashBinIcon}}" stepKey="removeUploadedImage1"/>
        <seeElement selector="{{UploadImageSection.PlaceholderContent('Background Image')}}" stepKey="seeImagePlaceHolderOnImage2"/>

        <!--Upload image from local machine using image placeholder button-->
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile2">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <waitForLoadingMaskToDisappear stepKey="waitForLoading3" />
        <waitForElementVisible  selector="{{ImageOnPreview.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="waitForUploadImage2" />
        <seeElement selector="{{ImageOnPreview.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="seeImageNameOnPreview2"/>

        <seeElement selector="{{ImageOnPreview.imagePreview}}" stepKey="seeImageDisplayed2"/>
        <seeElement selector="{{ImageOnPreview.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource2"/>
        <!--Overwrite uploaded image by selecting image from Media Gallery Storage-->
        <click selector="{{UploadImageSection.SelectFromGalleryBtn('Background Image')}}" stepKey="clickImageSelectFromGalleryBtn"/>
        <waitForPageLoad stepKey="waitForPageLoad2" />
        <waitForLoadingMaskToDisappear stepKey="waitForLoading2" />
        <actionGroup ref="CreateImageFolder" stepKey="createImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="SelectImageFromMediaStorage">
            <argument name="Image" value="PageBuilderImagePropertyJpgCopy"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="saveImage"/>
        <seeElement selector="{{ImageOnPreview.imageName(PageBuilderImagePropertyJpgCopy.value)}}" stepKey="seeImageNameOnPreview3"/>
        <seeElement selector="{{ImageOnPreview.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource3"/>
        <seeElement selector="{{ImageOnPreview.trashBinIcon}}" stepKey="seeTrashBinBtn"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <click selector=".icon-pagebuilder-fullscreen-exit" stepKey="exitPageBuilderFullScreen" />
        <click selector="{{AdminCategoryMainActionsSection.SaveButton}}" stepKey="saveCategory"/>
        <waitForPageLoad stepKey="waitForPageLoad3" />
        <amOnPage url="$$createPreReqCategory.name$$.html" stepKey="goToCategoryFrontPage"/>
        <waitForPageLoad stepKey="waitForPageLoad4" />

        <!--Verify image on Storefront-->
        <seeElement selector="{{ImageOnPreview.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource4"/>
    </test>
</tests>
