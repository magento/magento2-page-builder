<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="validateProductsWrapInGridAppearance">
        <arguments>
            <argument name="page" defaultValue="ProductsOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="firstProductIndex" defaultValue="1" type="string"/>
            <argument name="lastProductIndex" defaultValue="6" type="string"/>
        </arguments>
        <executeJS function="return document.evaluate(&quot;{{page.productByIndex(productGroupIndex, firstProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().height" stepKey="firstProductHeight"/>
        <executeJS function="return document.evaluate(&quot;{{page.productByIndex(productGroupIndex, firstProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().top" stepKey="firstProductTopPosition"/>
        <executeJS function="return document.evaluate(&quot;{{page.productByIndex(productGroupIndex, lastProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().top" stepKey="lastProductTopPosition"/>
        <executeJS function="return Math.abs({$lastProductTopPosition} - {$firstProductTopPosition})" stepKey="verticalDistanceBetweenProducts"/>
        <assertGreaterThanOrEqual stepKey="assertVerticalDistanceBetweenProductsIsGreaterThanIndividualProductHeight">
            <expectedResult type="variable">firstProductHeight</expectedResult>
            <actualResult type="variable">verticalDistanceBetweenProducts</actualResult>
        </assertGreaterThanOrEqual>
    </actionGroup>
    <actionGroup name="validateProductsDoNotWrapInCarouselAppearance" extends="validateProductsWrapInGridAppearance">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
        </arguments>
        <remove keyForRemoval="firstProductHeight"/>
        <assertEquals stepKey="assertVerticalDistanceBetweenProductsIsGreaterThanIndividualProductHeight">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">verticalDistanceBetweenProducts</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateCanSeeProductInDefaultProductCarousel">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="product" defaultValue="_defaultProduct"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, product.name)}}" stepKey="waitForProduct"/>
        <seeElement selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, product.name)}}" stepKey="seeProduct"/>
    </actionGroup>
    <actionGroup name="validateCannotSeeProductInDefaultProductCarousel" extends="validateCanSeeProductInDefaultProductCarousel">
        <waitForElementNotVisible selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, product.name)}}" stepKey="waitForProduct"/>
        <dontSeeElement selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, product.name)}}" stepKey="seeProduct"/>
    </actionGroup>
    <actionGroup name="validateCanSeeProductInContinuousProductCarousel">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="product" defaultValue="_defaultProduct"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product.name)}}" stepKey="waitForProduct"/>
        <seeElement selector="{{page.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product.name)}}" stepKey="seeProduct"/>
    </actionGroup>
    <actionGroup name="validateCannotSeeProductInContinuousProductCarousel" extends="validateCanSeeProductInContinuousProductCarousel">
        <waitForElementNotVisible selector="{{page.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product.name)}}" stepKey="waitForProduct"/>
        <dontSeeElement selector="{{page.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product.name)}}" stepKey="seeProduct"/>
    </actionGroup>
    <actionGroup name="validateProductInProducts">
        <arguments>
            <argument name="page" defaultValue="ProductsOnStage"/>
            <argument name="productsIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="product" defaultValue="_defaultProduct"/>
            <argument name="isClickable" defaultValue="none" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(productsIndex)}}" stepKey="waitForProducts"/>
        <seeElement selector="{{page.productImage(productIndex)}}" stepKey="seeProductImage"/>
        <seeElement selector="{{page.productName(productIndex, product.name)}}" stepKey="seeProductName"/>
        <seeElement selector="{{page.productPrice(productIndex, product.price)}}" stepKey="seeProductPrice"/>
        <moveMouseOver selector="{{page.productImage(productIndex)}}" stepKey="moveMouseOverProduct"/>
        <seeElement selector="{{page.productAddToCart(productIndex)}}" stepKey="seeProductAddToCart"/>
        <seeElement selector="{{page.productAddToWishList(productIndex)}}" stepKey="seeProductAddToWishList"/>
        <seeElement selector="{{page.productAddToCompare(productIndex)}}" stepKey="seeProductAddToCompare"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productName(productIndex, product.name)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getProductNamePointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCart(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToCartPointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToWishList(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getWishListPointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCompare(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToComparePointerEvents"/>
        <assertEquals stepKey="assertWhetherProductNameIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getProductNamePointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherAddToCartIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getAddToCartPointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherWishListIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getWishListPointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherAddToCompareIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getAddToComparePointerEvents</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateProductCountInProducts">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="count" defaultValue="" type="string"/>
        </arguments>
        <waitForElement selector="{{page.product(index)}}" stepKey="waitForProduct"/>
        <grabMultiple selector="{{page.product(index)}}" stepKey="grabProducts"/>
        <assertCount stepKey="assertCount">
            <expectedResult type="int">{{count}}</expectedResult>
            <actualResult type="variable">grabProducts</actualResult>
        </assertCount>
    </actionGroup>
    <actionGroup name="validateProductCountInProductsCarousel">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="productCount" defaultValue="1" type="string"/>
        </arguments>
        <waitForElement selector="{{page.productsInCarouselNotClonedBySlick(productGroupIndex)}}" stepKey="waitForProductGroup"/>
        <grabMultiple selector="{{page.productsInCarouselNotClonedBySlick(productGroupIndex)}}" stepKey="grabProducts"/>
        <assertCount stepKey="assertProductCount">
            <expectedResult type="int">{{productCount}}</expectedResult>
            <actualResult type="variable">grabProducts</actualResult>
        </assertCount>
    </actionGroup>
    <actionGroup name="validateEmptyProductsContainer">
        <arguments>
            <argument name="page" defaultValue="ProductsOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElement selector="{{page.emptyProductsPlaceholder(productGroupIndex)}}" stepKey="waitForEmptyProducts"/>
        <see userInput="{{PageBuilderProductsMessage.noProductsFound}}" selector="{{page.emptyProductsPlaceholder(productGroupIndex)}}" stepKey="seeEmptyProductsMessage"/>
    </actionGroup>
    <actionGroup name="selectCategoryFromCategoryDropDown">
        <arguments>
            <argument name="property" defaultValue="PageBuilderProductsSelectCategoryDropDown"/>
            <argument name="category" type="string"/>
        </arguments>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElementVisible time="2" selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" stepKey="waitForMultiSelectFieldVisible"/>
        <click selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" stepKey="clickMultiSelectField"/>
        <waitForElementVisible selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" stepKey="waitForSearchField"/>
        <fillField selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" userInput="{{category}}" stepKey="inputSearchField"/>
        <waitForElementVisible selector="{{EditPanelForm.panelMultiSelectFieldControlResult(property.section, property.fieldName, category)}}" stepKey="waitForResult"/>
        <click selector="{{EditPanelForm.panelMultiSelectFieldControlResult(property.section, property.fieldName, category)}}" stepKey="clickResult"/>
        <click selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="clickOnFieldLabel"/>
        <waitForElementNotVisible selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" stepKey="waitForSearchFieldNotVisible"/>
        <see selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" userInput="{{category}}" stepKey="seeResultInField"/>
    </actionGroup>
    <actionGroup name="seeCategoriesInCategorySelector">
        <arguments>
            <argument name="categories" defaultValue="" type="string"/>
        </arguments>
        <waitForElement selector="{{EditPanelForm.panelMultiSelectFieldControl(PageBuilderProductsSelectCategoryDropDown.section, PageBuilderProductsSelectCategoryDropDown.fieldName)}}" stepKey="waitForCategoriesField"/>
        <see selector="{{EditPanelForm.panelMultiSelectFieldControl(PageBuilderProductsSelectCategoryDropDown.section, PageBuilderProductsSelectCategoryDropDown.fieldName)}}" userInput="{{categories}}" stepKey="seeCategoriesInField"/>
    </actionGroup>
    <actionGroup name="addSKUsToSelectProductsBySKU">
        <arguments>
            <argument name="property" defaultValue="PageBuilderProductsEnterSKUsInput"/>
            <argument name="SKUs" type="string"/>
        </arguments>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElement time="2" selector="{{EditPanelForm.panelFieldControl(property.section, property.fieldName)}}" stepKey="waitForElementVisible"/>
        <see userInput="{{property.name}}" selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="seePropertyLabel"/>
        <fillField selector="{{EditPanelForm.panelFieldControl(property.section, property.fieldName)}}" userInput="{{SKUs}}" stepKey="fillPropertyField"/>
        <click selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="clickOnFieldLabel"/>
    </actionGroup>
    <actionGroup name="seeSKUsInSKUInputField">
        <arguments>
            <argument name="SKUs" defaultValue="" type="string"/>
        </arguments>
        <waitForElement selector="{{EditPanelForm.panelFieldControl(PageBuilderProductsEnterSKUsInput.section, PageBuilderProductsEnterSKUsInput.fieldName)}}" stepKey="waitForSKUsField"/>
        <seeInField selector="{{EditPanelForm.panelFieldControl(PageBuilderProductsEnterSKUsInput.section, PageBuilderProductsEnterSKUsInput.fieldName)}}" userInput="{{SKUs}}" stepKey="seeSKUsInField"/>
    </actionGroup>
    <actionGroup name="addConditionToProductConditions">
        <arguments>
            <argument name="conditionType" defaultValue="PageBuilderProductsConditionCategory"/>
            <argument name="conditionInput" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionToProductConditions" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{conditionType.value}}" stepKey="selectConditionType"/>
        <waitForPageLoad stepKey="waitForConditionFieldsToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListConditionPlaceholder}}" stepKey="revealCategoryInput"/>
        <fillField selector="{{ProductsContentTypeForm.conditionsListConditionInput}}" userInput="{{conditionInput}}" stepKey="fillCategoryField"/>
    </actionGroup>
    <actionGroup name="addConditionsCombinationToProductsAndSetAggregateParameters">
        <arguments>
            <argument name="aggregatorType" defaultValue="all" type="string"/>
            <argument name="booleanValueForAggregator" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionsCombinationToProductsAndSetAggregateParameters" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{PageBuilderProductsConditionCombination.value}}" stepKey="selectCombinationOption"/>
        <waitForPageLoad stepKey="waitForConditionsCombinationTemplateToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelector(index)}}" stepKey="clickAggregateType"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelectorSelect(index)}}" userInput="{{aggregatorType}}" stepKey="selectAggregateType"/>
        <waitForPageLoad stepKey="waitForAggregateTypeToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelector(index)}}" stepKey="clickAggregateTypeBoolean"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelectorSelect(index)}}" userInput="{{booleanValueForAggregator}}" stepKey="selectAggregateTypeBoolean"/>
        <waitForPageLoad stepKey="waitForAggregateTypeBooleanToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions2"/>
    </actionGroup>
    <actionGroup name="assertValueInConditionsFilter">
        <arguments>
            <argument name="indexOfCondition" defaultValue="1" type="string"/>
            <argument name="indexOfConditionParameter" defaultValue="2" type="string"/>
            <argument name="conditionValue" defaultValue="" type="string"/>
        </arguments>
        <waitForElement selector="{{ProductsContentTypeForm.conditionsListSavedValue(indexOfCondition, indexOfConditionParameter)}}" stepKey="waitForConditions"/>
        <grabTextFrom selector="{{ProductsContentTypeForm.conditionsListSavedValue(indexOfCondition, indexOfConditionParameter)}}" stepKey="grabConditionValue"/>
        <assertEquals stepKey="assertConditionValue">
            <expectedResult type="string">{{conditionValue}}</expectedResult>
            <actualResult type="variable">grabConditionValue</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="clickProductImageInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="waitForProductImage"/>
        <click selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="clickProductImage"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductImageInContinuousProductsCarouselOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductImage"/>
        <click selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="clickProductImage"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductNameInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productNameByProductName(product)}}" stepKey="waitForProductName"/>
        <click selector="{{ProductsOnStorefront.productNameByProductName(product)}}" stepKey="clickProductName"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductNameInContinuousProductsCarouselOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product)}}" stepKey="waitForProductName"/>
        <click selector="{{ProductsOnStorefront.productNameInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex, product)}}" stepKey="clickProductName"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCartInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCartByProductName(product)}}" stepKey="clickProductAddToCart"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added {{product}} to your shopping cart." stepKey="seeAddToCartSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCartInContinuousProductsCarouselOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCartInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="clickProductAddToCart"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added {{product}} to your shopping cart." stepKey="seeAddToCartSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCompareInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCompareByProductName(product)}}" stepKey="clickProductAddToCompare"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added product {{product}} to the comparison list." stepKey="seeComparisonListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCompareInContinuousProductsCarouselOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCompareInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="clickProductAddToCompare"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added product {{product}} to the comparison list." stepKey="seeComparisonListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToWishListInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToWishListByProductName(product)}}" stepKey="clickProductAddToWishList"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You must login or register to add items to your wishlist." stepKey="seeWishListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToWishListInContinuousProductsCarouselOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductImage"/>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToWishListInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="clickProductAddToWishList"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You must login or register to add items to your wishlist." stepKey="seeWishListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductCarouselNavigationDot">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="navigationDotIndex" defaultValue="2" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.carouselNavigationDot(productGroupIndex, navigationDotIndex)}}" stepKey="waitForNavigationDot"/>
        <click selector="{{page.carouselNavigationDot(productGroupIndex, navigationDotIndex)}}" stepKey="clickNavigationDot"/>
        <waitForPageLoad stepKey="waitForCarouselNavigation"/>
        <seeElement selector="{{page.carouselActiveProductNavigationDotByIndex(productGroupIndex, navigationDotIndex)}}" stepKey="seeClickedNavigationDotIsActive"/>
    </actionGroup>
    <actionGroup name="clickProductCarouselPreviousNavigationArrow">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.carouselPreviousProductNavigationArrow(productGroupIndex)}}" stepKey="waitForPreviousNavigationArrow"/>
        <click selector="{{page.carouselPreviousProductNavigationArrow(productGroupIndex)}}" stepKey="clickPreviousNavigationArrow"/>
        <waitForPageLoad stepKey="waitForCarouselNavigation"/>
    </actionGroup>
    <actionGroup name="clickProductCarouselNextNavigationArrow" extends="clickProductCarouselPreviousNavigationArrow">
        <waitForElementVisible selector="{{page.carouselNextProductNavigationArrow(productGroupIndex)}}" stepKey="waitForPreviousNavigationArrow"/>
        <click selector="{{page.carouselNextProductNavigationArrow(productGroupIndex)}}" stepKey="clickPreviousNavigationArrow"/>
    </actionGroup>
    <actionGroup name="dragProductToSlideProductCarousel">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="targetProduct" defaultValue="_defaultProduct.name" type="string"/>
            <argument name="destinationProduct" defaultValue="_defaultProduct.name" type="string"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, targetProduct)}}" stepKey="waitForTargetProduct"/>
        <waitForElementVisible selector="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, destinationProduct)}}" stepKey="waitForDestinationProduct"/>
        <dragAndDrop selector1="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, targetProduct)}}" selector2="{{page.productNameInCarouselNotClonedBySlick(productGroupIndex, destinationProduct)}}" stepKey="dragTargetProductToDestinationProduct"/>
        <waitForPageLoad stepKey="waitForSlidesToScroll"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselSettingsAttributes">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="carouselMode" defaultValue="PageBuilderProductsCarouselSettingsCarouselMode_Default"/>
            <argument name="autoplay" defaultValue="PageBuilderProductsCarouselSettingsAutoplay_Disabled"/>
            <argument name="autoplaySpeed" defaultValue="PageBuilderProductsCarouselSettingsAutoplaySpeed_4000"/>
            <argument name="infiniteLoop" defaultValue="PageBuilderProductsCarouselSettingsInfiniteLoop_Disabled"/>
            <argument name="showArrows" defaultValue="PageBuilderProductsCarouselSettingsShowArrows_Disabled"/>
            <argument name="showDots" defaultValue="PageBuilderProductsCarouselSettingsShowDots_Enabled"/>
        </arguments>
        <seeElement selector="{{page.carouselMode(productGroupIndex, carouselMode.value)}}" stepKey="seeCarouselMode"/>
        <seeElement selector="{{page.autoplay(productGroupIndex, autoplay.value)}}" stepKey="seeAutoplay"/>
        <seeElement selector="{{page.autoplaySpeed(productGroupIndex, autoplaySpeed.value)}}" stepKey="seeAutoplaySpeed"/>
        <seeElement selector="{{page.infiniteLoop(productGroupIndex, infiniteLoop.value)}}" stepKey="seeInfiniteLoop"/>
        <seeElement selector="{{page.showArrows(productGroupIndex, showArrows.value)}}" stepKey="seeShowArrows"/>
        <seeElement selector="{{page.showDots(productGroupIndex, showDots.value)}}" stepKey="seeShowDots"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNavigationArrowsWorkWithInfiniteLoop">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <seeElement selector="{{page.carouselPreviousProductNavigationArrow(productGroupIndex)}}" stepKey="seePreviousProductNavigationArrow"/>
        <dontSeeElement selector="{{page.carouselPreviousProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeePreviousProductNavigationArrowDisabled"/>
        <seeElement selector="{{page.carouselNextProductNavigationArrow(productGroupIndex)}}" stepKey="seeNextProductNavigationArrow"/>
        <dontSeeElement selector="{{page.carouselNextProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeeNextProductNavigationArrowDisabled"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselPreviousNavigationArrowEnabled">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <seeElement selector="{{page.carouselPreviousProductNavigationArrow(productGroupIndex)}}" stepKey="seePreviousProductNavigationArrow"/>
        <dontSeeElement selector="{{page.carouselPreviousProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeePreviousProductNavigationArrowDisabled"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselPreviousNavigationArrowDisabled" extends="validateProductCarouselPreviousNavigationArrowEnabled">
        <seeElement selector="{{page.carouselPreviousProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeePreviousProductNavigationArrowDisabled"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNextNavigationArrowEnabled">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <seeElement selector="{{page.carouselNextProductNavigationArrow(productGroupIndex)}}" stepKey="seeNextProductNavigationArrow"/>
        <dontSeeElement selector="{{page.carouselNextProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeeNextProductNavigationArrowDisabled"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNextNavigationArrowDisabled" extends="validateProductCarouselPreviousNavigationArrowEnabled">
        <seeElement selector="{{page.carouselNextProductNavigationArrowDisabled(productGroupIndex)}}" stepKey="dontSeeNextProductNavigationArrowDisabled"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNavigationDots">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="navigationDotCount" defaultValue="2" type="string"/>
            <argument name="activeNavigationDot" defaultValue="1" type="string"/>
        </arguments>
        <seeElement selector="{{page.carouselNavigationDotsArea(productGroupIndex)}}" stepKey="seeNavigationDots"/>
        <seeNumberOfElements selector="{{page.carouselNavigationDots(productGroupIndex)}}" userInput="{{navigationDotCount}}" stepKey="seeNumberOfNavigationDots"/>
        <seeNumberOfElements selector="{{page.carouselActiveProductNavigationDot(productGroupIndex)}}" userInput="1" stepKey="seeOneActiveNavigationDot"/>
        <seeElement selector="{{page.carouselActiveProductNavigationDotByIndex(productGroupIndex, activeNavigationDot)}}" stepKey="seeActiveNavigationDot"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNavigationDotsAreNotRendered">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <dontSeeElementInDOM selector="{{page.carouselNavigationDotsArea(productGroupIndex)}}" stepKey="dontSeeNavigationDots"/>
    </actionGroup>
    <actionGroup name="validateProductCarouselNavigationArrowsAreNotRendered">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <dontSeeElementInDOM selector="{{page.carouselPreviousProductNavigationArrow(productGroupIndex)}}" stepKey="dontSeePreviousProductNavigationArrow"/>
        <dontSeeElementInDOM selector="{{page.carouselNextProductNavigationArrow(productGroupIndex)}}" stepKey="dontSeeNextProductNavigationArrow"/>
    </actionGroup>
    <actionGroup name="validateProductOpacityInDefaultProductCarousel">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="productItemIndex" defaultValue="1" type="string"/>
            <argument name="opacityOfProductItem" defaultValue="1" type="string"/>
        </arguments>
        <waitForElement selector="{{page.productInCarouselNotClonedBySlickByIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductItem"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{page.productInCarouselNotClonedBySlickByIndex(productGroupIndex, productItemIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue, null).getPropertyValue('opacity')" stepKey="getOpacityOfProductItem"/>
        <assertEquals stepKey="assertOpacityOfProductIte">
            <expectedResult type="string">{{opacityOfProductItem}}</expectedResult>
            <actualResult type="variable">getOpacityOfProductItem</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateProductOpacityInContinuousProductCarousel" extends="validateProductOpacityInDefaultProductCarousel">
        <waitForElement selector="{{page.productInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}" stepKey="waitForProductItem"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{page.productInCarouselBySlickSlideIndex(productGroupIndex, productItemIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue, null).getPropertyValue('opacity')" stepKey="getOpacityOfProductItem"/>
    </actionGroup>
    <actionGroup name="validateProductsInProductCarouselAreCenteredForOddNumberOfProducts">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="centerProductIndex" defaultValue="3" type="string"/>
            <argument name="acceptableOffset" defaultValue="2" type="string"/>
        </arguments>
        <executeJS function="return document.evaluate(&quot;{{page.productInCarouselNotClonedBySlickByIndex(productGroupIndex, centerProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().right" stepKey="rightPositionOfMiddleProduct"/>
        <executeJS function="return document.evaluate(&quot;{{page.productInCarouselNotClonedBySlickByIndex(productGroupIndex, centerProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().width" stepKey="widthOfMiddleProduct"/>
        <executeJS function="return Math.abs({$rightPositionOfMiddleProduct} - ({$widthOfMiddleProduct} / 2))" stepKey="centerPositionOfMiddleProduct"/>
        <executeJS function="return document.evaluate(&quot;{{page.base(productGroupIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().right" stepKey="rightPositionOfProductGroup"/>
        <executeJS function="return document.evaluate(&quot;{{page.base(productGroupIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().width" stepKey="widthOfProductGroup"/>
        <executeJS function="return Math.abs({$rightPositionOfProductGroup} - ({$widthOfProductGroup} / 2))" stepKey="centerPositionOfProductGroup"/>
        <executeJS function="return Math.abs({$centerPositionOfProductGroup} - {$centerPositionOfMiddleProduct})" stepKey="differenceBetweenCenterPositions"/>
        <assertLessThanOrEqual stepKey="assertCenterPositionAcceptable">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">differenceBetweenCenterPositions</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
    <actionGroup name="validateProductsInProductCarouselAreCenteredForEvenNumberOfProducts">
        <arguments>
            <argument name="page" defaultValue="ProductsCarouselOnStage"/>
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="adjacentLeftOfCenterProductIndex" defaultValue="1" type="string"/>
            <argument name="acceptableOffset" defaultValue="2" type="string"/>
        </arguments>
        <executeJS function="return document.evaluate(&quot;{{page.productInCarouselNotClonedBySlickByIndex(productGroupIndex, adjacentLeftOfCenterProductIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().right" stepKey="rightPositionOfAdjacentLeftOfCenterProduct"/>
        <executeJS function="return document.evaluate(&quot;{{page.base(productGroupIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().right" stepKey="rightPositionOfProductGroup"/>
        <executeJS function="return document.evaluate(&quot;{{page.base(productGroupIndex)}}&quot;, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.getBoundingClientRect().width" stepKey="widthOfProductGroup"/>
        <executeJS function="return Math.abs({$rightPositionOfProductGroup} - ({$widthOfProductGroup} / 2))" stepKey="centerPositionOfProductGroup"/>
        <executeJS function="return Math.abs({$centerPositionOfProductGroup} - {$rightPositionOfAdjacentLeftOfCenterProduct})" stepKey="differenceBetweenCenterPositions"/>
        <assertLessThanOrEqual stepKey="assertCenterPositionAcceptable">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">differenceBetweenCenterPositions</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
    <actionGroup name="validateProductTotals">
        <arguments>
            <argument name="productsTotals" defaultValue="of 0 total" type="string"/>
        </arguments>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElement time="2" selector="{{EditPanelForm.panelFieldControl(PageBuilderProductsTotalProductsProperty.section, PageBuilderProductsTotalProductsProperty.fieldName)}}" stepKey="waitForFieldVisible"/>
        <see selector="{{EditPanelForm.panelFieldControl(PageBuilderProductsTotalProductsProperty.section, PageBuilderProductsTotalProductsProperty.fieldName)}}" userInput="{{productsTotals}}" stepKey="seeProductTotals"/>
    </actionGroup>
    <actionGroup name="validateSwatchInProducts">
        <annotations>
            <description>Verify a product swatch is displayed within the Product preview within Page Builder.</description>
        </annotations>
        <arguments>
            <argument name="page" defaultValue="" />
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="swatch" defaultValue="" />
        </arguments>
        <waitForElementVisible selector="{{page.product(productGroupIndex)}}" stepKey="waitForProduct"/>
        <seeElement selector="{{page.productSwatch(productGroupIndex, productIndex, swatch.default_label)}}" stepKey="assertSwatch"/>
    </actionGroup>
</actionGroups>
