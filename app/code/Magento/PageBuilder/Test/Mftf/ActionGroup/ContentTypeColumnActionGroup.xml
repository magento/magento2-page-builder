<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="dragColumnToAnotherColumnGroup">
        <arguments>
            <argument name="contentType" defaultValue="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" defaultValue="1" type="string"/>
            <argument name="containerTargetType" defaultValue="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" defaultValue="1" type="string"/>
            <argument name="x" defaultValue="10" type="string"/>
            <argument name="y" defaultValue="0" type="string"/>
        </arguments>
        <waitForElementVisible time="20" selector="{{PageBuilderStage.contentTypeInStageByIndex(contentType.role, contentTypeIndex)}}" stepKey="waitForContentTypeInStageVisible"/>
        <moveMouseOver selector="{{PageBuilderStage.contentTypeInStageByIndex(contentType.role, contentTypeIndex)}}" x="{{x}}" y="{{y}}" stepKey="onMouseOverContentTypeStage"/>
        <waitForPageLoad time="30" stepKey="waitForMouseOverAnimation"/>
        <waitForElementVisible time="10" selector="{{PageBuilderContentTypeOptionsMenu.contentTypeOptionsMenuByIndex(contentType.role, contentTypeIndex)}}" stepKey="waitForOptions"/>
        <waitForElementVisible selector="{{ColumnOnBackend.columnMoveByIndex(contentTypeIndex)}}" stepKey="waitForMoveHandle"/>
        <dragAndDrop selector1="{{ColumnOnBackend.columnMoveByIndex(contentTypeIndex)}}" selector2="{{PageBuilderStage.contentTypeContainer(contentType.role, containerTargetIndex)}}" stepKey="moveContentTypeIntoContainer"/>
        <waitForPageLoad stepKey="waitForDragOperation"/>
    </actionGroup>
    <actionGroup name="openGridSizeForm">
        <arguments>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ColumnOnBackend.gridSizeButton(index)}}" stepKey="waitForGridSizeButtonVisible"/>
        <click selector="{{ColumnOnBackend.gridSizeButton(index)}}" stepKey="clickGridSizeButton"/>
        <waitForPageLoad stepKey="waitForAnimation"/>
        <waitForElementVisible selector="{{ColumnOnBackend.gridSizeInput(index)}}" stepKey="waitForGridVisible"/>
    </actionGroup>
    <actionGroup name="closeGridSizeForm">
        <arguments>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <click selector="{{ColumnOnBackend.columnX('1')}}" stepKey="clickColumn"/>
        <waitForPageLoad stepKey="waitForAnimation"/>
        <waitForElementNotVisible selector="{{ColumnOnBackend.gridSizeInput(index)}}" stepKey="waitForGridNotVisible"/>
    </actionGroup>
    <actionGroup name="updateGridSize">
        <arguments>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="gridSize" defaultValue="12" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ColumnOnBackend.gridSizeButton(index)}}" stepKey="waitForGridSizeButtonVisible"/>
        <click selector="{{ColumnOnBackend.gridSizeButton(index)}}" stepKey="clickGridSizeButton"/>
        <waitForPageLoad stepKey="waitForAnimation"/>
        <waitForElementVisible selector="{{ColumnOnBackend.gridSizeInput(index)}}" stepKey="waitForGridVisible"/>
        <fillField selector="{{ColumnOnBackend.gridSizeInput(index)}}" userInput="{{gridSize}}" stepKey="enterGridSize"/>
        <pressKey selector="{{ColumnOnBackend.gridSizeInput(index)}}" parameterArray="['su',\Facebook\WebDriver\WebDriverKeys::ENTER]" stepKey="pressKeyEnter"/>
        <waitForPageLoad stepKey="waitForUpdate"/>
        <waitForElementVisible selector="{{ColumnOnBackend.displayLabelGridSize(index, gridSize)}}" stepKey="validateGridSize"/>
    </actionGroup>
    <actionGroup name="updateGridSizeInvalid">
        <arguments>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="gridSize" defaultValue="12" type="string"/>
            <argument name="errorMessage"/>
        </arguments>
        <fillField selector="{{ColumnOnBackend.gridSizeInput(index)}}" userInput="{{gridSize}}" stepKey="enterGridSize"/>
        <click selector="{{ColumnOnBackend.columnX(index)}}" stepKey="clickColumn"/>
        <waitForPageLoad stepKey="waitForAnimation"/>
        <waitForElementVisible selector="{{ColumnOnBackend.gridSizeError(index, errorMessage)}}" stepKey="verifyError"/>
    </actionGroup>
    <actionGroup name="validateColumnAppearanceFullHeight">
        <arguments>
            <argument name="section" defaultValue="ColumnOnBackend"/>
            <argument name="columnIndex" defaultValue="1" type="string"/>
            <argument name="columnGroupIndex" defaultValue="1" type="string"/>
            <argument name="acceptableOffset" defaultValue="2" type="string"/>
        </arguments>
        <comment userInput="validateColumnAppearanceFullHeight" stepKey="comment"/>
        <waitForElementVisible selector="{{section.columnGroup(columnGroupIndex)}}" stepKey="waitForColumnGroup"/>
        <waitForElementVisible selector="{{section.base(columnIndex)}}" stepKey="waitForColumn"/>
        <seeElement selector="{{section.appearance(columnIndex, PageBuilderColumnAppearanceProperty_FullHeight.value)}}" stepKey="seeColumnAppearance"/>
        <executeJS function="return document.querySelectorAll('{{section.allColumnGroups}}')[{{columnGroupIndex}}-1].clientHeight" stepKey="columnGroupHeight"/>
        <executeJS function="return document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].clientHeight" stepKey="individualColumnHeight"/>
        <executeJS function="return Math.round(Math.abs({$columnGroupHeight}-{$individualColumnHeight}))" stepKey="heightDifference"/>
        <assertLessThan stepKey="assertColumnHeightEqualToColumnGroupHeight">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">heightDifference</actualResult>
        </assertLessThan>
    </actionGroup>
    <actionGroup name="validateColumnAppearanceTopAligned">
        <arguments>
            <argument name="section" defaultValue="ColumnOnBackend"/>
            <argument name="height" defaultValue="PageBuilderMinHeightProperty_300"/>
            <argument name="columnIndex" defaultValue="1" type="string"/>
            <argument name="columnGroupIndex" defaultValue="1" type="string"/>
            <argument name="acceptableOffset" defaultValue="2" type="string"/>
        </arguments>
        <comment userInput="validateColumnAppearanceTopAligned" stepKey="comment"/>
        <waitForElementVisible selector="{{section.columnGroup(columnGroupIndex)}}" stepKey="waitForColumnGroup"/>
        <waitForElementVisible selector="{{section.base(columnIndex)}}" stepKey="waitForColumn"/>
        <seeElement selector="{{section.appearance(columnIndex, PageBuilderColumnAppearanceProperty_Top.value)}}" stepKey="seeColumnAppearance"/>
        <executeJS function="return document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].clientHeight" stepKey="individualColumnHeight"/>
        <executeJS function="return Math.round(Math.abs({$individualColumnHeight}-{{height.value}}))" stepKey="heightDifference"/>
        <!-- Validate height of column -->
        <assertLessThanOrEqual stepKey="assertContentHeightAcceptable">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">heightDifference</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return document.querySelectorAll('{{section.allColumnGroups}}')[{{columnGroupIndex}}-1].getBoundingClientRect().top" stepKey="topOfColumnGroup"/>
        <executeJS function="return document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].getBoundingClientRect().top" stepKey="topOfIndividualColumn"/>
        <executeJS function="return Math.round(Math.abs({$topOfColumnGroup}-{$topOfIndividualColumn}))" stepKey="topOfColumnDifference"/>
        <!-- Validate position of column -->
        <assertLessThan stepKey="assertTopOfColumnAcceptable">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">topOfColumnDifference</actualResult>
        </assertLessThan>
    </actionGroup>
    <actionGroup name="validateColumnAppearanceCenterAligned" extends="validateColumnAppearanceTopAligned">
        <comment userInput="validateColumnAppearanceCenterAligned" stepKey="comment"/>
        <seeElement selector="{{section.appearance(columnIndex, PageBuilderColumnAppearanceProperty_Center.value)}}" stepKey="seeColumnAppearance"/>
        <executeJS function="return Math.round(document.querySelectorAll('{{section.allColumnGroups}}')[{{columnGroupIndex}}-1].getBoundingClientRect().top + (document.querySelectorAll('{{section.allColumnGroups}}')[{{columnGroupIndex}}-1].clientHeight / 2))" stepKey="topOfColumnGroup"/>
        <executeJS function="return Math.round(document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].getBoundingClientRect().top  + (document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].clientHeight / 2))" stepKey="topOfIndividualColumn"/>
    </actionGroup>
    <actionGroup name="validateColumnAppearanceBottomAligned" extends="validateColumnAppearanceTopAligned">
        <comment userInput="validateColumnAppearanceBottomAligned" stepKey="comment"/>
        <seeElement selector="{{section.appearance(columnIndex, PageBuilderColumnAppearanceProperty_Bottom.value)}}" stepKey="seeColumnAppearance"/>
        <executeJS function="return document.querySelectorAll('{{section.allColumnGroups}}')[{{columnGroupIndex}}-1].getBoundingClientRect().bottom" stepKey="topOfColumnGroup"/>
        <executeJS function="return document.querySelectorAll('{{section.baseCSS}}')[{{columnIndex}}-1].getBoundingClientRect().bottom" stepKey="topOfIndividualColumn"/>
    </actionGroup>
</actionGroups>
