<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="switchTabs">
        <arguments>
            <argument name="section"/>
            <argument name="from" defaultValue="1" type="string"/>
            <argument name="to" defaultValue="2" type="string"/>
        </arguments>
        <click selector="{{section.tabHeader(to)}}" stepKey="switchToTab"/>
        <waitForPageLoad stepKey="waitForPageLoad" time="30"/>
        <waitForElementVisible time="30" selector="{{section.tabHeaderItemActive(to)}}" stepKey="seeNewTabActive"/>
        <assertElementContainsAttribute selector="{{section.tabPanel(from)}}" attribute="aria-hidden" expectedValue="true" stepKey="assertOldTabHidden"/>
        <assertElementContainsAttribute selector="{{section.tabPanel(to)}}" attribute="aria-hidden" expectedValue="false" stepKey="assertNewTabVisible"/>
    </actionGroup>
    <actionGroup name="inlineEditTabItemName">
        <arguments>
            <argument name="tabName" defaultValue="{{PageBuilderTabNameRandom1.value}}" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="pageBuilderArea" defaultValue="" type="string"/>
        </arguments>
        <comment userInput="inlineEditTabItemName" stepKey="comment"/>
        <waitForElementVisible selector="{{TabOnStage.tabHeaderEditableTitle(index)}}" stepKey="waitForTabHeaderVisible"/>
        <pressKey selector="{{TabOnStage.tabHeaderEditableTitle(index)}}" userInput="{{tabName}}" stepKey="enterTabName"/>
        <see selector="{{TabOnStage.tabHeader(index)}}" userInput="{{tabName}}" stepKey="seeTabName"/>
        <click selector="{{pageBuilderArea}}{{PageBuilderPanel.searchPanel}}" stepKey="unFocusLiveEdit"/>
        <waitForPageLoad stepKey="waitForUnFocus"/>
    </actionGroup>
    <actionGroup name="moveTabItem">
        <arguments>
            <argument name="x" defaultValue="null" type="string"/>
            <argument name="y" defaultValue="null" type="string"/>
            <argument name="tabGroupIndex" defaultValue="1" type="string"/>
            <argument name="tabItemIndexToMove" defaultValue="1" type="string"/>
            <argument name="tabItemIndexToMoveTo" defaultValue="2" type="string"/>
        </arguments>
        <comment userInput="moveTabItem" stepKey="comment"/>
        <waitForElementVisible selector="{{TabOnStage.tabHeader(tabItemIndexToMove)}}" stepKey="waitForTabItem1"/>
        <click selector="{{TabOnStage.tabHeader(tabItemIndexToMove)}}" stepKey="clickTabItem1"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <!-- Note MFTF Bug: MQE-1185. We cannot reliably use offsets and therefore, dropping to index x will result in an actual drop of index x-1 -->
        <!-- Once bug is fixed, we need to add executeJS to calculate width & height of tab item to determine default offsets -->
        <dragAndDrop selector1="{{TabOnStage.moveHandle(tabGroupIndex, tabItemIndexToMove)}}" selector2="{{TabOnStage.tabHeader(tabItemIndexToMoveTo)}}" x="{{x}}" y="{{y}}" stepKey="dragAndDropTabItem"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <waitForElementVisible selector="{{TabOnStage.tabHeader(tabItemIndexToMove)}}" stepKey="waitForTabItem2"/>
    </actionGroup>
    <actionGroup name="validateTabHeadersAlignedCenter">
        <arguments>
            <argument name="tabGroupSection" defaultValue="TabsOnStage"/>
            <argument name="tabItemSection" defaultValue="TabOnStage"/>
            <argument name="tabGroupIndex" defaultValue="1" type="string"/>
            <argument name="acceptableOffset" defaultValue="2" type="string"/>
        </arguments>
        <comment userInput="validateTabHeadersAlignedCenter" stepKey="comment"/>
        <executeJS function="return document.querySelectorAll('{{tabGroupSection.baseCSS}}')[{{tabGroupIndex}}-1].getBoundingClientRect().right" stepKey="tabGroupRightPosition"/>
        <executeJS function="return document.querySelectorAll('{{tabGroupSection.baseCSS}}')[{{tabGroupIndex}}-1].getBoundingClientRect().width" stepKey="tabGroupWidth"/>
        <executeJS function="return Math.round({$tabGroupRightPosition} - ({$tabGroupWidth} / 2))" stepKey="tabGroupCenterPosition"/>
        <executeJS function="return (document.querySelectorAll('{{tabGroupSection.baseCSS}}')[{{tabGroupIndex}}-1]).querySelectorAll('{{tabItemSection.tabHeaderCSS}}')[0].getBoundingClientRect().left" stepKey="firstTabHeaderLeftPosition"/>
        <executeJS function="return (document.querySelectorAll('{{tabGroupSection.baseCSS}}')[{{tabGroupIndex}}-1]).querySelectorAll('{{tabItemSection.tabHeaderCSS}}')[(document.querySelectorAll('{{tabGroupSection.baseCSS}}')[{{tabGroupIndex}}-1]).querySelectorAll('{{tabItemSection.tabHeaderCSS}}').length-1].getBoundingClientRect().right" stepKey="lastTabHeaderRightPosition"/>
        <executeJS function="return Math.abs({$lastTabHeaderRightPosition} - {$firstTabHeaderLeftPosition})" stepKey="tabHeaderGroupWidth"/>
        <executeJS function="return Math.round({$lastTabHeaderRightPosition} - ({$tabHeaderGroupWidth} / 2))" stepKey="tabHeaderGroupCenterPosition"/>
        <executeJS function="return Math.abs({$tabGroupCenterPosition} - {$tabHeaderGroupCenterPosition})" stepKey="positionDifference"/>
        <assertLessThanOrEqual stepKey="assertPositionAcceptable">
            <expectedResult type="int">{{acceptableOffset}}</expectedResult>
            <actualResult type="variable">positionDifference</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
</actionGroups>
