<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="BannerPosterWithMarginStaysInsideParent">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - With margin stays inside of parent container"/>
            <description value="Verify that a Banner poster with margin stays inside parent container"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5025"/>
            <testCaseId value="MC-5840"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsProperty_50"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate stage before save -->
        <comment userInput="Validate stage before save" stepKey="commentValidateStageBeforeSave"/>
        <actionGroup ref="validatePositionRightWithinContainer" stepKey="validatePositionRightBeforeSave">
            <argument name="content" value="{{BannerOnBackend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStage.baseCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnBackend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStage.baseCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate stage after save -->
        <comment userInput="Validate stage after save" stepKey="commentValidateStageAfterSave"/>
        <actionGroup ref="validatePositionRightWithinContainer" stepKey="validatePositionRightAfterSave">
            <argument name="content" value="{{BannerOnBackend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStage.baseCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnBackend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStage.baseCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate storefront -->
        <comment userInput="Validate storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validatePositionRightWithinContainer" stepKey="validatePositionRightStorefront">
            <argument name="content" value="{{BannerOnFrontend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.baseCSS}}"/>
            <argument name="contentMargins" value="PageBuilderMarginsProperty_50"/>
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BannerPosterCanInlineEditContent">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Can Inline Edit Banner Content"/>
            <description value="Verify that users are able to inline edit a poster Banner's content from the stage"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-521"/>
            <testCaseId value="MC-3833"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="enableTinyMCE4"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragContentTypeIntoContainer">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Inline Edit Banner Content -->
        <comment userInput="Inline Edit Banner Content" stepKey="commentInlineEdit"/>
        <actionGroup ref="inlineEditWYSIWYGFromStage" stepKey="inlineEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="content" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateTextInTinyMCE" stepKey="seeMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
    </test>
    <test name="BannerPosterWYSIWYGDisabledInlineEdit" extends="BannerPosterCanInlineEditContent">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Inline Edit With WYSIWYG Disabled"/>
            <description value="Verify that a user can inline edit Banner poster content when WYSIWYG is disabled"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-521"/>
            <testCaseId value="MC-3841"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <remove keyForRemoval="enableWYSIWYG"/>
            <remove keyForRemoval="enableTinyMCE4"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="disableWYSIWYG" before="loginAsAdmin"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG" before="logout"/>
        </after>
        <actionGroup ref="inlineEditTextAreaFromStage" stepKey="inlineEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="content" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <executeJS function="return document.querySelector('{{BannerOnConfigurationPanel.textArea}}').value" stepKey="seeMessageText"/>
        <assertEquals stepKey="assertTextAreaValueEditPanel" after="seeMessageText">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeMessageText</actualResult>
        </assertEquals>
        <actionGroup ref="assertTextareaContainsValue" stepKey="seeMessageContentStage">
            <argument name="selector" value="{{PageBuilderStage.inlineTextAreaEditor(PageBuilderBannerContentType.role, '1')}}"/>
            <argument name="value" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
    </test>
    <test name="BannerPosterTinyMCE3InlineEdit" extends="BannerPosterCanInlineEditContent">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Inline Edit With TinyMCE3 Enabled"/>
            <description value="Verify that a user can inline edit Banner poster content when TinyMCE3 is enabled"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-521"/>
            <testCaseId value="MC-3950"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <remove keyForRemoval="enableTinyMCE4"/>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="enableTinyMCE3" before="loginAsAdmin"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="enableTinyMCE4" before="logout"/>
        </after>
        <actionGroup ref="inlineEditTextAreaFromStage" stepKey="inlineEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="content" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <actionGroup ref="assertTextareaContainsValue" stepKey="seeMessageContentStage">
            <argument name="selector" value="{{PageBuilderStage.inlineTextAreaEditor(PageBuilderBannerContentType.role, '1')}}"/>
            <argument name="value" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
    </test>
    <test name="BannerPosterCanInlineEditContentWhenIn25PercentWidthColumn">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Can Inline Edit Banner Content When In 25 Percent Width Column"/>
            <description value="Verify that users are able to inline edit a poster Banner's content from the stage when the banner is in a 25 percent width column"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-521"/>
            <testCaseId value="MC-3842"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="enableTinyMCE4"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Banner To Column -->
        <comment userInput="Add Banner To Column" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragContentTypeIntoContainer">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragContentTypeIntoContainer2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Resize Column -->
        <comment userInput="Resize Column" stepKey="commentResizeColumn"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnResizeGridLine('1')}}').clientWidth" stepKey="guideWidth"/>
        <dragAndDrop selector1="{{ColumnOnBackend.columnX('1')}} {{ColumnOnBackend.columnResizeHandle}}" selector2="{{ColumnOnBackend.columnResizeGridLine('9')}}" x="$guideWidth" stepKey="dragColumn1"/>
        <waitForPageLoad stepKey="waitForDragAndDrop"/>
        <executeJS function="return parseInt(window.getComputedStyle(document.querySelector('{{ColumnOnBackend.columnX('1')}}')).width)" stepKey="column1Width1"/>
        <executeJS function="return parseInt(window.getComputedStyle(document.querySelector('{{ColumnOnBackend.columnX('2')}}')).width)" stepKey="column2Width1"/>
        <executeJS function="return Math.round({$column1Width1}/{$column2Width1})" stepKey="columnSizeRatio"/>
        <executeJS function="return {{PageBuilderGridSize.defaultGridSize}}/4" stepKey="expectedColumnSizeRatio"/>
        <assertEquals stepKey="assertColumnIsLarge">
            <expectedResult type="variable">$expectedColumnSizeRatio</expectedResult>
            <actualResult type="variable">$columnSizeRatio</actualResult>
        </assertEquals>
        <!-- Inline Edit Banner Content -->
        <comment userInput="Inline Edit Banner Content" stepKey="commentInlineEdit"/>
        <actionGroup ref="inlineEditWYSIWYGFromStage" stepKey="inlineEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="content" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="offsetXCoordinate" value="null"/>
            <argument name="offsetYCoordinate" value="null"/>
        </actionGroup>
        <actionGroup ref="validateTextInTinyMCE" stepKey="seeMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
    </test>
    <test name="BannerPosterMobileWithMobileImageValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check desktop and mobile images of a poster banner with mobile image"/>
            <description value="Check desktop and mobile images of a poster banner with mobile image"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-4016"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderBackgroundMobileImage_GIF.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachPageBuilderFile">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachPageBuilderMobileFile">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate desktop image is displayed before browser is resized -->
        <comment userInput="Validate desktop image is displayed before browser is resized" stepKey="commentDesktopImage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront1">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate mobile image is displayed when browser is resized -->
        <comment userInput="Validate mobile image is displayed when browser is resized" stepKey="commentMobileImage"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateMobileImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
    </test>
    <test name="BannerPosterMobileWithoutMobileImageValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check desktop and mobile images of a poster banner without mobile image"/>
            <description value="Check desktop and mobile images of a poster banner without mobile image"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-4017"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachPageBuilderFile">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate desktop image is displayed before browser is resized -->
        <comment userInput="Validate desktop image is displayed before browser is resized" stepKey="commentDesktopImage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront1">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate desktop image still visible in mobile view -->
        <comment userInput="Validate desktop image still visible in mobile view" stepKey="commentDesktopImageMobileView"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
    </test>
    <test name="BannerPosterAddWYSIWYGLink">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Verify User Can Add Link To WYSIWYG"/>
            <description value="Verify that a user can add a link to the WYSIWYG for Banner"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-405"/>
            <testCaseId value="MC-3104"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <!-- Add Link To WYSIWYG -->
        <comment userInput="Add Link To WYSIWYG" stepKey="commentAddLink"/>
        <actionGroup ref="insertLinkInWYSIWYG" stepKey="insertLinkInWYSIWYG">
            <argument name="url" value="{{ExternalLink.googleUrl}}"/>
            <argument name="textToDisplay" value="{{ExternalLink.googleUrl}}"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.wysiwygLinkUrl('1', ExternalLink.googleUrl)}}" stepKey="waitForBannerStage"/>
        <!-- Save Page -->
        <comment userInput="Save Page" stepKey="commentSavePage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Page Save -->
        <comment userInput="Validate Stage After Page Save" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.wysiwygLinkUrl('1', ExternalLink.googleUrl)}}" stepKey="waitForBannerStage2"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.wysiwygLinkUrl('1', ExternalLink.googleUrl)}}" stepKey="waitForBannerStorefront"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.wysiwygLinkUrl('1', ExternalLink.googleUrl)}}" stepKey="waitForBannerStorefrontMobile"/>
    </test>
    <test name="BannerPosterButtonNeverShow">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster button never show state works"/>
            <description value="Check poster button never show state works"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-2692"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBannerButtonNeverShow">
            <argument name="property" value="PageBuilderBannerShowButtonNeverProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStage"/>
        <seeElement selector="{{BannerOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStage"/>
        <dontSeeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonInDOMStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <dontSeeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonInDOMOnHoverStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefront"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefront"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonInDOMStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonInDOMOnHoverStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefrontMobile"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonInDOMStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefrontMobile"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonInDOMOnHoverStorefrontMobile"/>
    </test>
    <test name="BannerPosterButtonOnHover">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster button on hover state works"/>
            <description value="Check poster button on hover state works"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-2496"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBannerButtonShowOnHover">
            <argument name="property" value="PageBuilderBannerShowButtonOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStage"/>
        <seeElement selector="{{BannerOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonInDOMStage"/>
        <dontSeeElement selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonOnHoverStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefront"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefront"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefrontMobile"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefrontMobile"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefrontMobile"/>
    </test>
    <test name="BannerPosterOverlayNeverShow">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster overlay never show state works"/>
            <description value="Check poster overlay never show state works"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-2904"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerOverlayNeverShow">
            <argument name="property" value="PageBuilderBannerShowContentOverlayNeverShowProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStage"/>
        <seeElement selector="{{BannerOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStage"/>
        <seeElement selector="{{BannerOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayOnHoverStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefront"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayOnHoverStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seePosterStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayOnHoverStorefrontMobile"/>
    </test>
    <test name="BannerPosterOverlayOnHover">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster overlay on hover state works"/>
            <description value="Check poster overlay on hover state works"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-2813"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerOverlayShowOnHover">
            <argument name="property" value="PageBuilderBannerShowContentOverlayOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundColor"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundColorStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundColorStorefrontMobile"/>
    </test>
    <test name="BannerPosterOverlayAndButtonOnHover">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster button and overlay on hover state works"/>
            <description value="Check poster button and overlay on hover state works"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83553"/>
            <testCaseId value="MC-2665"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBannerButtonShowOnHover">
            <argument name="property" value="PageBuilderBannerShowButtonOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerOverlayShowOnHover">
            <argument name="property" value="PageBuilderBannerShowContentOverlayOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlPropertyValidate"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{BannerOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonInDOMStage"/>
        <dontSeeElement selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonStage"/>
        <seeElement selector="{{BannerOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonOnHoverStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefront"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefront"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Click banner anchor -->
        <comment userInput="Click banner anchor" stepKey="clickBannerAnchorStorefront" />
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlPropertyValidate.value)}}" stepKey="clickLinkUrlStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront" />
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlPropertyValidate.value}}" stepKey="seeThatUrlIsChangedToButtonUrlStorefront" />
        <!-- Validate Storefront Mobile -->
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefrontMobile"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefrontMobile"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStorefrontMobile"/>
        <!-- Click mobile banner anchor -->
        <comment userInput="Click mobile banner anchor" stepKey="clickMobileBannerAnchorStorefront" />
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlPropertyValidate.value)}}" stepKey="clickLinkUrlStorefrontMobile"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefrontMobile" />
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlPropertyValidate.value}}" stepKey="seeThatUrlIsChangedToButtonUrlStorefrontMobile" />
    </test>
    <test name="BannerPosterOverlayPosition">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Check poster overlay position is correct"/>
            <description value="Check poster overlay is correct"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4116"/>
            <testCaseId value="MC-5035"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionStage">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionStageAfterSave">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionStorefront">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
    </test>
    <test name="BannerPosterButtonsCanBeEditedInline">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Ability to edit a poster banner button inline on the stage"/>
            <description value="A user should be able to edit a poster banner button inline on the stage"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-87988"/>
            <testCaseId value="MC-2548"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.editableButtonOnStage('1')}}" stepKey="seeButtonIsEditable"/>
        <click selector="{{BannerOnBackend.editableButtonOnStage('1')}}" stepKey="clickButtonToEdit"/>
        <pressKey selector="{{BannerOnBackend.editableButtonOnStage('1')}}" userInput="{{PageBuilderButtonItemText_Common2.value}}" stepKey="enterButtonText"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeButtonTextOnForm">
            <argument name="property" value="PageBuilderBannerButtonTextProperty2"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStorefront"/>
    </test>
    <test name="BannerPosterUpdateAdvancedConfigurationValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Update Advanced Configuration Values"/>
            <description value="Validate that updating every attribute in the Advanced Configuration form for Banner Poster appearance will update the Stage and Storefront correctly."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3239"/>
            <testCaseId value="MC-3369"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Update Values -->
        <comment userInput="Update Values" stepKey="commentUpdateValues"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignmentCenter">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{BannerOnBackend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage"/>
        <seeElement selector="{{BannerOnBackend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage2"/>
        <seeElement selector="{{BannerOnBackend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage2"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage2"/>
        <seeElement selector="{{BannerOnBackend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage2"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage2"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage2"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage2"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage2"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage2"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStorefront"/>
        <seeElement selector="{{BannerOnFrontend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStorefront"/>
        <seeElement selector="{{BannerOnFrontend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStorefront"/>
        <seeElement selector="{{BannerOnFrontend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStorefront"/>
    </test>
    <test name="BannerPosterUpdateAllAttributes">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Update All Attributes"/>
            <description value="A user should be able to add a poster banner with all attribute fields filled."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1433"/>
            <testCaseId value="MC-2792"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderBackgroundMobileImage_GIF.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="selectBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterLink">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty2"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignmentCenter">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{BannerOnBackend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStage"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStage"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStage"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundColor"/>
        <seeElement selector="{{BannerOnBackend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage"/>
        <seeElement selector="{{BannerOnBackend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage2"/>
        <seeElement selector="{{BannerOnBackend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage2"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage2"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStage2"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStage2"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundColor2"/>
        <seeElement selector="{{BannerOnBackend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage2"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage2"/>
        <seeElement selector="{{BannerOnBackend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage2"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage2"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage2"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage2"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage2"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage2"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAppearance">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMinimumHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="seeBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateTextInTinyMCE" stepKey="seeMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelLinkUrlField" stepKey="seeLink">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty2"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="seeLinkUrl"/>
        <seeElement selector="{{BannerOnFrontend.showButton('1', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundStorefront"/>
        <seeElement selector="{{BannerOnFrontend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStorefront"/>
        <seeElement selector="{{BannerOnFrontend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStorefront"/>
        <seeElement selector="{{BannerOnFrontend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStorefront"/>
        <seeElement selector="{{BannerOnFrontend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStorefront"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeMobileAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMobileMinimumHeightStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateMobileBackgroundAttributesStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMobileMessageContentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showButton('1', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeMobileButtonStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeMobileButtonTypeStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeMobileButtonTextStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeMobileOverlayStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeMobileOverlayBackgroundStorefront"/>
        <seeElement selector="{{BannerOnFrontend.alignment('1', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeMobileAlignmentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.border('1', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeMobileBorderStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderColor('1', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeMobileBorderColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderWidth('1', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeMobileBorderWidthStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderRadius('1', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeMobileBorderRadiusStorefront"/>
        <seeElement selector="{{BannerOnFrontend.cssClasses('1', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeMobileCSSClassesStorefront"/>
        <seeElement selector="{{BannerOnFrontend.margins('1', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMobileMarginsStorefront"/>
        <seeElement selector="{{BannerOnFrontend.posterPadding('1', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seeMobilePaddingStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateMobileImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="clickLinkUrl"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlProperty.value}}" stepKey="seeCurrentUrlEquals"/>
    </test>
    <test name="BannerPosterWithBordersAndPaddingEqualToMinHeight" extends="RowWithBordersAndPaddingEqualToMinHeight">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Banner with borders and padding is equal to min height"/>
            <description value="A user can see Banner poster height with borders and padding is equal to min height"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5079"/>
            <testCaseId value="MC-5794"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" after="enterPageTitle" stepKey="expandMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" after="commentConfigureContentType" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderBannerMinimumHeightDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateContentTypeHeightBeforeSave">
            <argument name="content" value="{{BannerOnBackend.wrapperCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateContentTypeHeightAfterSave">
            <argument name="content" value="{{BannerOnBackend.wrapperCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateContentTypeHeightStorefront">
            <argument name="content" value="{{BannerOnFrontend.wrapperCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
    </test>
    <test name="BannerPosterHtmlValueInButtons" extends="BannerCollageCenterHtmlValueInButtons">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - HTML Value In Buttons Does Not Render As HTML"/>
            <description value="Validate that html can be entered into the button and that the html doesn't render on stage and storefront."/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-849"/>
            <testCaseId value="MC-3657"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
    </test>
    <test name="BannerPosterNonBreakingSpaceValueInButtons" extends="BannerCollageCenterNonBreakingSpaceValueInButtons">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Non Breaking Space In Button Does Not Render as nbsp;"/>
            <description value="Validate that non breaking space can be entered into the button and that the html doesn't render on stage and storefront as nbsp."/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3889"/>
            <testCaseId value="MC-4199"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
    </test>
    <test name="BannerOverlayHasConvertedBorderRadiusAppliedOnPosterAppearance">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Overlay has converted border radius applied on poster appearance"/>
            <description value="As a content creator I want border radius of banner overlay with poster appearance to have a different border radius than its parent wrapper so that it aligns snugly alongside it without exposing any gaps"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3870"/>
            <testCaseId value="MC-5237"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <closeTab stepKey="closeTab"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Open edit panel and apply border radius/width where border radius > border width -->
        <comment userInput="Open edit panel and apply border radius/width where border radius greater than border width" stepKey="commentOpenEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerShowOverlayAlways">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage where border radius > border width -->
        <comment userInput="Validate Stage where border radius greater than border width" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlay"/>
        <executeJS function="return parseInt(getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.overlay('1')}}&quot;,document.body).iterateNext()).borderRadius, 10)" stepKey="overlayBorderRadius"/>
        <executeJS function="return Math.max(0, parseInt({{PageBuilderAdvancedBorderRadiusProperty12.value}}, 10) - parseInt({{PageBuilderAdvancedBorderWidthProperty10.value}}, 10))" stepKey="expectedOverlayBorderRadius"/>
        <assertEquals stepKey="assertOverlayBorderRadiusEqualityWhereBorderRadiusGreaterThanBorderWidth">
            <expectedResult type="variable">$expectedOverlayBorderRadius</expectedResult>
            <actualResult type="variable">$overlayBorderRadius</actualResult>
        </assertEquals>
        <!-- Validate Storefront where border radius > border width -->
        <comment userInput="Validate Storefront where border radius greater than border width" stepKey="commentValidateStorefront"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <executeJS function="return parseInt(getComputedStyle(document.evaluate(&quot;{{BannerOnFrontend.overlay('1')}}&quot;,document.body).iterateNext()).borderRadius, 10)" stepKey="overlayBorderRadiusStorefront"/>
        <assertEquals stepKey="assertOverlayBorderRadiusEqualityWhereBorderRadiusGreaterThanBorderWidthOnStorefront">
            <expectedResult type="variable">$expectedOverlayBorderRadius</expectedResult>
            <actualResult type="variable">$overlayBorderRadiusStorefront</actualResult>
        </assertEquals>
        <switchToPreviousTab stepKey="switchBackToAdmin"/>
        <reloadPage stepKey="refreshPage"/>
        <waitForPageLoad stepKey="waitForPageRefresh"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Open edit panel and apply border radius/width where border radius <= border width -->
        <comment userInput="Open edit panel and apply border radius/width where border radius less than or equal to border width" stepKey="commentOpenEditPanel2"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Validate Stage on where border radius <= border width -->
        <comment userInput="Validate Stage where border radius less than or equal to border width" stepKey="commentValidateStagePoster"/>
        <executeJS function="return parseInt(getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.overlay('1')}}&quot;,document.body).iterateNext()).borderRadius, 10)" stepKey="overlayBorderRadius2" />
        <executeJS function="return Math.max(0, parseInt({{PageBuilderAdvancedBorderRadiusProperty1.value}}, 10) - parseInt({{PageBuilderAdvancedBorderWidthProperty10.value}}, 10))" stepKey="expectedOverlayBorderRadius2"/>
        <assertEquals stepKey="assertOverlayBorderRadiusEqualityWhereBorderRadiusLessThanOrEqualToBorderWidth">
            <expectedResult type="variable">$expectedOverlayBorderRadius2</expectedResult>
            <actualResult type="variable">$overlayBorderRadius2</actualResult>
        </assertEquals>
        <!-- Validate Storefront where border radius <= border width -->
        <comment userInput="Validate Storefront where border radius less than or equal to border width" stepKey="commentValidateStorefront2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <switchToNextTab stepKey="switchBackToStorefront" />
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <executeJS function="return parseInt(getComputedStyle(document.evaluate(&quot;{{BannerOnFrontend.overlay('1')}}&quot;,document.body).iterateNext()).borderRadius, 10)" stepKey="overlayBorderRadiusStorefront2" />
        <assertEquals stepKey="assertOverlayBorderRadiusEqualityWhereBorderRadiusLessThanOrEqualToBorderWidthOnStorefront">
            <expectedResult type="int">$expectedOverlayBorderRadius2</expectedResult>
            <actualResult type="variable">$overlayBorderRadiusStorefront2</actualResult>
        </assertEquals>
    </test>
    <test name="BannerOverlayAndButtonDoNotGoOutsideContainerOnPosterAppearance">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Banner Overlay and Button do not go outside container on poster appearance"/>
            <description value="User should be able to place a banner with Poster appearance inside a narrow column without the contents spilling outside of the column."/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5372"/>
            <testCaseId value="MC-5935"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Column to Stage -->
        <comment userInput="Add Column to Stage" stepKey="addColumnToStage"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Duplicate column to achieve 3/12 width -->
        <comment userInput="Duplicate column to achieve 3/12 width" stepKey="duplicateColumn"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateContentType">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Banner to Stage -->
        <comment userInput="Add Banner to Stage" stepKey="addBannerToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionMedia">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragBannerOntoColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditPanelOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_RGB_Blue"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterMessageText">
            <argument name="property" value="PageBuilderBannerMessagePropertyLong"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextPropertyLong"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertySolid"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateOverlayAndButtonPoster" stepKey="validateBannerOnStage">
            <argument name="column" value="ColumnOnBackend"/>
            <argument name="element" value="BannerOnBackend"/>
            <argument name="elementBorderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="diffThreshold" value="2"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateOverlayAndButtonPoster" stepKey="validateBannerOnStorefront">
            <argument name="column" value="ColumnOnFrontend"/>
            <argument name="element" value="BannerOnFrontend"/>
            <argument name="elementBorderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="diffThreshold" value="0"/>
        </actionGroup>
    </test>
    <test name="BannerPosterAlignmentInheritance">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Poster - Alignment Inherits"/>
            <description value="A user should be able to have a parent container content type pass its alignment to its children"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-4290"/>
            <testCaseId value="MC-6015"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Banner To Row -->
        <comment userInput="Add Banner To Row" stepKey="commentAddBannerToRow"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openBannerEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Banner Edit Panel -->
        <comment userInput="Fill Out Banner Edit Panel" stepKey="commentFillBannerEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypePrimaryProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignmentDefault">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveBannerEditPanelSettings"/>
        <executeJS function="return {{BannerOnBackend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPosition"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPosition"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPosition}-{$overlayLeftPosition}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPadding"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAligned">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPadding</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnBackend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlign"/>
        <assertEquals stepKey="assertDefaultComputedTextAlign">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlign</actualResult>
        </assertEquals>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusBannerEditor"/>
        <!-- Fill Out Row Edit Panel -->
        <comment userInput="Fill Out Row Edit Panel" stepKey="commentFillRowEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openRowEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <comment userInput="Update Values" stepKey="commentUpdateValues"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveRowEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusRowEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <executeJS function="return {{BannerOnBackend.overlayJS('1')}}.getBoundingClientRect().right" stepKey="overlayRightPosition"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().right" stepKey="buttonRightPosition"/>
        <executeJS function="return Math.abs(Math.round({$overlayRightPosition}-{$buttonRightPosition}-{{PageBuilderPaddingProperty40.paddingRight}}))" stepKey="overlayMinusButtonMinusPadding"/>
        <assertLessThanOrEqual stepKey="assertButtonRightAligned">
        <expectedResult type="int">5</expectedResult>
        <actualResult type="variable">overlayMinusButtonMinusPadding</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnBackend.wrapperJS('1')}}).textAlign" stepKey="grabComputedTextAlign"/>
        <assertEquals stepKey="assertComputedTextAlign">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyRight.value}}</expectedResult>
            <actualResult type="variable">grabComputedTextAlign</actualResult>
        </assertEquals>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <executeJS function="return {{BannerOnBackend.overlayJS('1')}}.getBoundingClientRect().right" stepKey="overlayRightPositionAfterSave"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().right" stepKey="buttonRightPositionAfterSave"/>
        <executeJS function="return Math.abs(Math.round({$overlayRightPositionAfterSave}-{$buttonRightPositionAfterSave}-{{PageBuilderPaddingProperty40.paddingRight}}))" stepKey="overlayMinusButtonMinusPaddingAfterSave"/>
        <assertLessThanOrEqual stepKey="assertButtonRightAlignedAfterSave">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">overlayMinusButtonMinusPaddingAfterSave</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnBackend.wrapperJS('1')}}).textAlign" stepKey="grabComputedTextAlignAfterSave"/>
        <assertEquals stepKey="assertComputedTextAlignAfterSave">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyRight.value}}</expectedResult>
            <actualResult type="variable">grabComputedTextAlignAfterSave</actualResult>
        </assertEquals>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <executeJS function="return {{BannerOnFrontend.overlayJS('1')}}.getBoundingClientRect().right" stepKey="overlayRightPositionStoreFront"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnFrontend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().right" stepKey="buttonRightPositionStoreFront"/>
        <executeJS function="return Math.abs(Math.round({$overlayRightPositionStoreFront}-{$buttonRightPositionStoreFront}-{{PageBuilderPaddingProperty40.paddingRight}}))" stepKey="overlayMinusButtonMinusPaddingStoreFront"/>
        <assertLessThanOrEqual stepKey="assertButtonRightAlignedStoreFront">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">overlayMinusButtonMinusPaddingStoreFront</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnFrontend.wrapperJS('1')}}).textAlign" stepKey="grabComputedTextAlignStoreFront"/>
        <assertEquals stepKey="assertComputedTextAlignStoreFront">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyRight.value}}</expectedResult>
            <actualResult type="variable">grabComputedTextAlignStoreFront</actualResult>
        </assertEquals>
    </test>
</tests>
