<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="HeadingLiveEditToolbarNotCutOffInFullScreenModeTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Heading"/>
            <title value="Heading live edit toolbar should not overflow viewport bounds (get 'cut off') in full screen mode"/>
            <description value="As a content creator I want live edit toolbar for heading content type to be always positioned within viewport bounds so that they are accessible to me within the UI"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-5383"/>
            <testCaseId value="MC-13682"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-heading"/>
            <group value="pr_exclude"/>
        </annotations>
        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer">
                <argument name="contentType" value="PageBuilderRowContentType"/>
                <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            </actionGroup>
        </before>
        <after>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Add Column Content Type -->
        <comment userInput="Add Column Content Type" stepKey="commentAddColumnContentType"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionForColumnContentType">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnGroupContentType"/>
        </actionGroup>
        <!-- Duplicate left column 3 times to create 1/12 column on the left configuration -->
        <comment userInput="Duplicate left column 3 times to create 1/12 column on the left configuration" stepKey="commentInitialResize"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFirstColumn1Of3">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFirstColumn2Of3">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFirstColumn3Of3">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.displayLabel('1','2/12')}}" stepKey="validateFirstColumnWidth"/>
        <!-- Add Heading Content Type -->
        <comment userInput="Add Heading Content Type" stepKey="commentAddInnerContentType"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderInnerContentTypePanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragInnerContentTypeIntoColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <waitForElementVisible selector="{{HeadingOnStage.headingTypeToolbar('1',PageBuilderHeadingTypeProperty_H6.toolbar)}}" stepKey="waitForToolbarVisible"/>
        <executeJS function="{{HeadingOnStage.headingToolbarViewportPositionBottom('0')}}" stepKey="toolbarBottomPosition"/>
        <executeJS function="{{HeadingOnStage.headingToolbarViewportPositionTop('0')}}" stepKey="toolbarTopPosition"/>
        <executeJS function="{{HeadingOnStage.headingContentTypeViewportPositionTop('0')}}" stepKey="inputBoxTopPosition"/>
        <!-- Assert toolbar did not overflow -->
        <comment userInput="Assert toolbar did not overflow" stepKey="commentAssertToolbarNotOverflow"/>
        <assertGreaterThanOrEqual stepKey="assertToolbarTopBoundingClientRectIsNotNegative">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">$toolbarTopPosition</actualResult>
        </assertGreaterThanOrEqual>
        <!-- Assert bottom of toolbar is above top of input box -->
        <comment userInput="Assert bottom of toolbar is above top of input box" stepKey="commentCheckToolbarAboveInputBox"/>
        <comment userInput="assertToolbarAboveInputBox" stepKey="assertToolbarAboveInputBox"/>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="unFocusEditor">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Set PageBuilder to full screen -->
        <comment userInput="Set PageBuilder to full screen" stepKey="commentSetFullScreen"/>
        <comment userInput="openPageBuilderFullScreen" stepKey="openFullScreen"/>
        <waitForElementVisible selector="{{HeadingOnStage.base('1')}}" stepKey="waitForContentTypeToBeVisible"/>
        <actionGroup ref="clickInsideLiveEditHeading" stepKey="focusOnInnerContentType">
            <argument name="index" value="1"/>
        </actionGroup>
        <executeJS function="{{HeadingOnStage.headingToolbarViewportPositionTop('0')}}" stepKey="toolbarTopPositionAfterOverflow"/>
        <executeJS function="{{HeadingOnStage.headingContentTypeViewportPositionBottom('0')}}" stepKey="inputBoxBottomPositionAfterOverflow"/>
        <executeJS function="{{HeadingOnStage.headingContentTypeViewportPositionTop('0')}}" stepKey="inputBoxTopPositionAfterOverflow"/>
        <!-- Assert toolbar did not overflow -->
        <comment userInput="Assert toolbar did not overflow" stepKey="commentAssertToolbarNotOverflowAfterOverflow"/>
        <assertGreaterThanOrEqual stepKey="assertToolbarTopBoundingClientRectIsNotNegativeAfterOverflow">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">$inputBoxTopPositionAfterOverflow</actualResult>
        </assertGreaterThanOrEqual>
        <!-- Check top of toolbar is below bottom of input box -->
        <comment userInput="Check top of toolbar is below bottom of input box" stepKey="commentCheckToolbarBelowInputBoxAfterOverflow"/>
        <assertGreaterThanOrEqual stepKey="assertToolbarAboveInputBoxAfterOverflow">
            <expectedResult type="variable">$inputBoxBottomPositionAfterOverflow</expectedResult>
            <actualResult type="variable">$toolbarTopPositionAfterOverflow</actualResult>
        </assertGreaterThanOrEqual>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="unFocusEditorAfterOverflow">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Exit full screen -->
        <comment userInput="Exit full screen" stepKey="commentExitFullScreen"/>
        <comment userInput="exitPageBuilderFullScreen" stepKey="exitFullScreen"/>
        <comment userInput="clickInsideLiveEditHeading" stepKey="focusOnInnerContentTypeAfterExitFullScreen"/>
        <comment userInput="toolbarBottomPositionAfterExitFullScreen" stepKey="toolbarBottomPositionAfterExitFullScreen"/>
        <comment userInput="toolbarTopPositionAfterExitFullScreen" stepKey="toolbarTopPositionAfterExitFullScreen"/>
        <comment userInput="inputBoxTopPositionAfterExitFullScreen" stepKey="inputBoxTopPositionAfterExitFullScreen"/>
        <!-- Assert toolbar did not overflow after exit full screen-->
        <comment userInput="Assert toolbar did not overflow after exit full screen" stepKey="commentAssertToolbarNotOverflowAfterExitFullScreen"/>
        <comment userInput="assertToolbarTopBoundingClientRectIsNotNegativeAfterExitFullScreen" stepKey="assertToolbarTopBoundingClientRectIsNotNegativeAfterExitFullScreen"/>
        <!-- Check bottom of toolbar is above top of input box -->
        <comment userInput="Check bottom of toolbar is above top of input box" stepKey="commentCheckToolbarAboveInputBoxAfterExitFullScreen"/>
        <comment userInput="assertToolbarAboveInputBoxAfterExitFullScreen" stepKey="assertToolbarAboveInputBoxAfterExitFullScreen"/>
        <!-- Remove heading and two of the columns to create 3/12 column -->
        <actionGroup ref="removeContentTypeFromStageByIndex" stepKey="removeHeadingContentType">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeNumber" value="1"/>
        </actionGroup>
        <actionGroup ref="removeContentTypeFromStageByIndex" stepKey="removeFirstColumnContentType">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeNumber" value="1"/>
        </actionGroup>
        <actionGroup ref="removeContentTypeFromStageByIndex" stepKey="removeSecondColumnContentType">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeNumber" value="1"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.displayLabel('1','6/12')}}" stepKey="validateColumnWidth"/>
        <!-- Add Another Heading Content Type -->
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingContentTypeIntoColumn2">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <executeJS function="{{HeadingOnStage.headingToolbarViewportPositionTop('0')}}" stepKey="toolbarTopPositionInMediumColumn"/>
        <executeJS function="return {$toolbarTopPositionInMediumColumn} * 2.24" stepKey="toolbarTopPositionInMediumColumnCalc"/>
        <executeJS function="{{HeadingOnStage.headingContentTypeViewportPositionBottom('0')}}" stepKey="inputBoxBottomPositionInMediumColumn"/>
        <executeJS function="{{HeadingOnStage.headingContentTypeViewportPositionTop('0')}}" stepKey="inputBoxTopPositionInMediumColumn"/>
        <!-- Assert toolbar did not overflow in 3/12 column -->
        <assertGreaterThanOrEqual stepKey="assertToolbarTopBoundingClientRectIsNotNegativeInMediumColumn">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">$inputBoxTopPositionInMediumColumn</actualResult>
        </assertGreaterThanOrEqual>
        <!-- Check top of toolbar is below bottom of input box in 3/12 column -->
        <assertGreaterThanOrEqual stepKey="assertToolbarAboveInputBoxInMediumColumn">
            <expectedResult type="variable">$inputBoxBottomPositionInMediumColumn</expectedResult>
            <actualResult type="variable">$toolbarTopPositionInMediumColumnCalc</actualResult>
        </assertGreaterThanOrEqual>
    </test>
</tests>
