<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminPageBuilderProductsDoesNotAppearOnFrontendWhenNotConfigured">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="No products appear on the storefront when dialog is closed (not saved) without being configured."/>
            <description value="Validate that when Products dialog is closed without configuring settings that no products show up on the storefront."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-1327"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>

        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>

        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabStorefrontProducts"/>
        <assertCount expected="0" expectedType="int" actualType="variable" actual="grabStorefrontProducts" stepKey="assertStorefrontCountIs0" />
    </test>
    <test name="AdminPageBuilderProductsCanSaveConditionTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Save with condition"/>
            <description value="Validate that adding a condition in the General form for Products will update the Stage and Storefront correctly with the correct products."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-4027"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProducts" stepKey="validateProductsStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
        </actionGroup>
    </test>
    <test name="AdminPageBuilderProductsWithCount">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Save with products count"/>
            <description value="Validate that adding a products count update the Stage and Storefront correctly with the correct number of products."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-4028"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct3">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct4">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqProduct3" stepKey="deletePreReqProduct3"/>
            <deleteData createDataKey="createPreReqProduct4" stepKey="deletePreReqProduct4"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <closeTab stepKey="closeTab"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <!-- Check form field validations -->
        <comment userInput="Check form field validations" stepKey="commentCheckFormFieldValidations"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterInvalidMinProductsCount">
            <argument name="property" value="PageBuilderProductsInvalidMinCountProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSection" stepKey="validateInvalidMinCount">
            <argument name="property" value="PageBuilderProductsInvalidMinCountProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterInvalidEmptyProductsCount">
            <argument name="property" value="PageBuilderProductsInvalidEmptyCountProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSection" stepKey="validateInvalidEmptyCount">
            <argument name="property" value="PageBuilderProductsInvalidEmptyCountProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterInvalidMaxProductsCount">
            <argument name="property" value="PageBuilderProductsInvalidMaxCountProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSection" stepKey="validateInvalidMaxCount">
            <argument name="property" value="PageBuilderProductsInvalidMaxCountProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterInvalidTypeProductsCount">
            <argument name="property" value="PageBuilderProductsInvalidTypeCountProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSection" stepKey="validateInvalidTypeProductsCount">
            <argument name="property" value="PageBuilderProductsInvalidTypeCountProperty"/>
        </actionGroup>
        <!-- Validate 999 max is valid -->
        <comment userInput="Validate 999 max is valid" stepKey="commentValidateMax"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMaxProductsCount">
            <argument name="property" value="PageBuilderProductsCountPropertyMax"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveValidationEditPanelSettings"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Only one of them should be showing -->
        <comment userInput="Set only one of them should be showing" stepKey="commentSetOnlyOneShouldBeShowing"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterOneProductsCount">
            <argument name="property" value="PageBuilderProductsCountPropertyOne"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStageAfterSave">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStageAfterSave">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProducts" stepKey="validateProductsStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
        </actionGroup>
        <!-- Switch Back To Backend -->
        <comment userInput="Switch Back To Backend" stepKey="commentSwitchToBackend"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Four products should be showing -->
        <comment userInput="Four products should be showing" stepKey="commentFourProductsShouldBeShowing"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterFourProductsCount">
            <argument name="property" value="PageBuilderProductsCountPropertyFour"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="4"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage2">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage2AfterSave"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage2AfterSave">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="4"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage2AfterSave">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="ClearCacheActionGroup" stepKey="clearMagentoCache"/>
        <!-- Switch Back To Frontend -->
        <comment userInput="Switch Back To Frontend" stepKey="commentSwitchToFrontend"/>
        <switchToNextTab stepKey="switchToNextTab2"/>
        <reloadPage stepKey="reloadPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront2">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="4"/>
        </actionGroup>
        <actionGroup ref="validateProductInProducts" stepKey="validateProductsStorefront2">
            <argument name="page" value="ProductsOnStorefront"/>
        </actionGroup>
    </test>
    <test name="AdminPageBuilderProductsConfigurationIsPersistent">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Main configuration settings are properly saved"/>
            <description value="Validate that main settings are saved and loaded correctly on the stage in memory and after page reload."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-4029"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>

        <!-- Add a category rule -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>

        <!-- Set products count -->
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>

        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>

        <!-- Reopen the settings -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad2"/>

        <!-- Verify settings -->
        <comment userInput="Validate Stage Settings" stepKey="commentValidateStageSettings"/>
        <grabTextFrom selector="{{ProductsContentTypeForm.conditionsListSavedValue('1','2')}}" stepKey="grabCategoryValue"/>
        <assertEquals expected="$$createPreReqCategory.id$$" expectedType="string" actualType="variable" actual="grabCategoryValue" stepKey="assertCategoryCondition" />
        <seeInField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="assertProductsCountFieldValue"/>

        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>

        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>

        <!-- Validate Stage After Save -->
        <comment userInput="Re-Validate Stage" stepKey="commentReValidateStage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad3"/>
        <grabTextFrom selector="{{ProductsContentTypeForm.conditionsListSavedValue('1','2')}}" stepKey="grabCategoryValue2"/>
        <assertEquals expected="$$createPreReqCategory.id$$" expectedType="string" actualType="variable" actual="grabCategoryValue2" stepKey="assertCategoryCondition2" />
        <seeInField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="assertProductsCountFieldValue2"/>
    </test>
    <test name="AdminPageBuilderProductsAllProductsShowWhenSavedWithoutConditions">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="All products show when conditions are saved blank"/>
            <description value="Validate that when Products dialog is saved without configuring settings that all products show up without filtering."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-4030"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>

        <waitForElementVisible selector="{{ProductsOnStage.product('1')}}" stepKey="waitForProductsToLoad"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabProducts"/>
        <assertGreaterThanOrEqual expected="2" expectedType="int" actualType="variable" actual="grabProducts" stepKey="assertCountIsAtLeast2" />

        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabStorefrontProducts"/>
        <assertGreaterThanOrEqual expected="2" expectedType="int" actualType="variable" actual="grabStorefrontProducts" stepKey="assertStorefrontCountIsAtLeast2" />
    </test>
    <test name="ProductsDuplicate">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Duplicate Products"/>
            <description value="A user should be able to duplicate Products content type. Verify on Stage and Storefront."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-965"/>
            <testCaseId value="MC-3601"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Add Products to Stage -->
        <comment userInput="Add Products to Stage" stepKey="commentAddProductsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="hideContentType" stepKey="hideContentType">
            <argument name="section" value="ProductsOnStage"/>
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Duplicate -->
        <comment userInput="Duplicate" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateContentType">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate content type is disabled -->
        <comment userInput="Validate content type is disabled" stepKey="commentValidateHiddenStage"/>
        <waitForElementVisible selector="{{ProductsOnStage.hidden('1')}}" stepKey="waitForContentTypeHidden1"/>
        <waitForElementVisible selector="{{ProductsOnStage.hidden('2')}}" stepKey="waitForContentTypeHidden2"/>
        <!-- Stage: Validate Default Show/Hide State - After Save -->
        <comment userInput="Stage: Validate Default Show/Hide State - After Save" stepKey="CommentValidateDefaultShowHideStateOnStageAfterSave"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <waitForElementVisible selector="{{ProductsOnStage.hidden('1')}}" stepKey="waitForContentTypeHiddenAfterSave1"/>
        <waitForElementVisible selector="{{ProductsOnStage.hidden('2')}}" stepKey="waitForContentTypeHiddenAfterSave2"/>
        <!-- Reset Stage and Verify Settings -->
        <comment userInput="Reset stage and verify settings" stepKey="CommentResetStage"/>
        <actionGroup ref="showContentType" stepKey="showContentTypeFirstProducts">
            <argument name="section" value="ProductsOnStage"/>
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="showContentType" stepKey="showContentTypeSecondProducts">
            <argument name="section" value="ProductsOnStage"/>
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsOnStage.notHidden('1')}}" stepKey="waitForContentTypeHiddenReset1"/>
        <waitForElementVisible selector="{{ProductsOnStage.notHidden('2')}}" stepKey="waitForContentTypeHiddenReset2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPageAfterReset"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad" time="30"/>
        <!-- Validate content type is enabled in Storefront -->
        <comment userInput="Validate content type is enabled in Storefront" stepKey="commentValidateShownStorefront"/>
        <waitForElementVisible selector="{{ProductsOnStorefront.notHidden('1')}}" stepKey="waitForContentTypeShownStorefront1"/>
        <waitForElementVisible selector="{{ProductsOnStorefront.notHidden('2')}}" stepKey="waitForContentTypeShownStorefront2"/>
    </test>
    <test name="ProductsDelete">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Delete Product List"/>
            <description value="A user should be able to delete an Product List content type. Verify on Stage amd Storefront."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-2839"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="removeEmptyContentTypeFromStage" stepKey="removeEmptyContentTypeFromStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <dontSeeElement selector="{{PageBuilderStage.contentTypeInStage(PageBuilderProductsContentType.role)}}" stepKey="dontSeeContentTypeInStage"/>
    </test>
    <test name="ProductsValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Product List."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-2500"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct" stepKey="deletePreReqProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor2"/>
        <assertEmpty actual="getBorderColor2" actualType="variable" message="Text field has text: $getBorderColor2" stepKey="assertBorderColor2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses2"/>
        <assertEmpty actual="getCssClasses2" actualType="variable" message="Text field was not empty. Had text: $getCssClasses2" stepKey="assertCssClasses2"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="ProductsUpdateAdvancedConfigurationValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Update Advanced Configuration Values"/>
            <description value="Validate that updating every attribute in the Advanced Configuration form for Product List will update the Stage and Storefront correctly."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-2647"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct" stepKey="deletePreReqProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <!-- Update Values -->
        <comment userInput="Update Values" stepKey="commentUpdateValues"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="ShowOutOfStockProduct">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Show out of stock"/>
            <description value="Products display and respect global configuration settings Show Out Of Stock products"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-71425"/>
            <testCaseId value="MC-4031"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <magentoCLI command="config:set cataloginventory/options/show_out_of_stock 1" stepKey="displayOutOfStockProduct"/>
            <createData entity="_defaultCmsPage" stepKey="createdCMSPage" />
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="SimpleProduct3" stepKey="createPreReqProductA">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="SimpleProduct4" stepKey="createPreReqProductB">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSBPage1">
                <argument name="CMSPage" value="$$createdCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <magentoCLI command="config:set cataloginventory/options/show_out_of_stock 0" stepKey="dontDisplayOutOfStockProduct"/>
            <deleteData createDataKey="createPreReqProductA" stepKey="deletePreReqProductA"/>
            <deleteData createDataKey="createPreReqProductB" stepKey="deletePreReqProductB"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <deleteData createDataKey="createdCMSPage" stepKey="deleteCreatedCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage: Show Out of Stock -->
        <comment userInput="Validate Stage: Show Out of Stock" stepKey="commentValidateStage1"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage1">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront: Show Out of Stock -->
        <comment userInput="Validate Storefront: Show Out of Stock" stepKey="commentValidateStorefront1"/>
        <amOnPage url="$$createdCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront1">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <magentoCLI command="config:set cataloginventory/options/show_out_of_stock 0" stepKey="dontDisplayOutOfStockProduct"/>
        <actionGroup ref="ClearCacheActionGroup" stepKey="clearMagentoCache"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSBPage2">
            <argument name="CMSPage" value="$$createdCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage: Don't Show Out of Stock -->
        <comment userInput="Validate Stage: Don't Show Out of Stock" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <!-- Validate Storefront: Don't Show Out of Stock -->
        <comment userInput="Validate Storefront: Don't Show Out of Stock" stepKey="commentValidateStorefront2"/>
        <amOnPage url="$$createdCMSPage.identifier$$" stepKey="amOnPageTestPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront2">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
    </test>
    <test name="ProductsCannotAddToStage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Cannot add Products to Stage"/>
            <description value="If user drags Products to Stage, it should have no effect"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3130"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-cannotAddToStage"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="cannotDragContentTypeToTarget" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderStage"/>
        </actionGroup>
        <dontSeeElementInDOM selector="{{ProductsOnStage.base('1')}}" stepKey="dontSeeProducts"/>
    </test>
    <test name="ProductsCanAddToColumn">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Add Products to Column container and view on Admin and Storefront"/>
            <description value="As a Content Manager I want column to be a container so that I can add Products inside"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3129"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-addToColumn"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Products to Stage -->
        <comment userInput="Add Products to Stage" stepKey="addProductsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragProductsOntoColumn">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2" />
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="User sees Products displayed in column on Stage" stepKey="confirmProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate stage after save" stepKey="validateProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="View Products inside column on storefront" stepKey="viewProductsOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefrontInDOM" stepKey="checkContentTypeInContainerStorefront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
    </test>
    <test name="ValidateShowHideOnProductsDefaultState">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Products is shown by default"/>
            <description value="Products is shown by default in stage and storefront"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-965"/>
            <testCaseId value="MC-3555"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-hideShow"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Add Products to Stage -->
        <comment userInput="Add Products to Stage" stepKey="commentAddProductsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Stage: Validate Default Show/Hide State - Before Save -->
        <comment userInput="Stage: Validate Default Show/Hide State Before Save" stepKey="CommentValidateDefaultShowHideStateOnStageBeforeSave"/>
        <seeElement selector="{{ProductsOnStage.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStageBeforeSave"/>
        <!-- Stage: Validate Default Show/Hide State - After Save -->
        <comment userInput="Stage: Validate Default Show/Hide State - After Save" stepKey="CommentValidateDefaultShowHideStateOnStageAfterSave"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <seeElement selector="{{ProductsOnStage.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStageAfterSave"/>
        <!-- Storefront: Validate Default Show/Hide State -->
        <comment userInput="Storefront: Validate Default Show/Hide State" stepKey="CommentValidateDefaultShowHideStateOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <seeElement selector="{{ProductsOnStorefront.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStorefront"/>
    </test>
    <test name="ValidateShowHideOnProducts">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Products has hide show capabilities"/>
            <description value="A user is able to hide and show the video successfully"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-965"/>
            <testCaseId value="MC-3522"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-hideShow"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <closeTab stepKey="closeTab" />
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="hideContentType" stepKey="hideContentType">
            <argument name="section" value="ProductsOnStage"/>
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage1"/>
        <!-- Validate content type remains disabled after save -->
        <comment userInput="Validate content type remains disabled after save" stepKey="commentValidateHiddenStage"/>
        <seeElement selector="{{ProductsOnStage.hidden('1')}}" stepKey="waitForContentTypeHidden" />
        <!-- Validate store front -->
        <comment userInput="Validate content type is disabled on storefront" stepKey="commentValidateHiddenStorefront"/>
        <openNewTab stepKey="openNewTab" />
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <waitForElement selector="{{ProductsOnStorefront.base('1')}}" stepKey="waitForContentTypeNotVisible" />
        <dontSeeElement selector="{{ProductsOnStorefront.base('1')}}" stepKey="dontSeeContentType" />
        <seeElementInDOM selector="{{ProductsOnStorefront.hidden('1')}}" stepKey="waitForHiddenElement" />
        <!-- Set content to visible in admin -->
        <comment userInput="Set content to visible in admin" stepKey="commentSetContentToVisibleAdmin"/>
        <switchToNextTab stepKey="switchBackToAdmin" />
        <reloadPage stepKey="reloadPage" />
        <waitForPageLoad stepKey="waitForAdminReload" />
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="showContentType" stepKey="showContentType">
            <argument name="section" value="ProductsOnStage"/>
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage1"/>
        <!-- Validate Content Is Shown Storefront -->
        <comment userInput="Validate Content Is Shown Storefront" stepKey="commentValidateContentIsShownStorefront"/>
        <switchToNextTab stepKey="switchBackToStorefront" />
        <reloadPage stepKey="reloadStorefront" />
        <waitForPageLoad stepKey="waitForStorefrontReload" />
        <dontSeeElementInDOM selector="{{ProductsOnStorefront.hidden('1')}}" stepKey="dontSeeHiddenElement"/>
        <seeElement selector="{{ProductsOnStorefront.base('1')}}" stepKey="waitForContentTypeVisible" />
    </test>
    <test name="ProductsWrapsInsideTinyColumn">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Product Content Type wraps inside tiny column"/>
            <description value="As a Content Manager I want products to be wrapped inside tiny column"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4096"/>
            <testCaseId value="MC-4301"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-addToColumn"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Drag new column onto column group to make 1/12 column -->
        <comment userInput="Drag new column onto column group to make 1/12 column" stepKey="commentDragNewColumnToGroupMakeFirstColumnSmall"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragColumnIntoFirstColumnGroup">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="3"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Add Products to Stage -->
        <comment userInput="Add Products to Stage" stepKey="addProductsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragProductsOntoColumn">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1" />
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="User sees Products displayed in column on Stage" stepKey="confirmProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validating products is smaller than column -->
        <comment userInput="Validating products is smaller than column" stepKey="commentValidatingProductsIsSmallerThanColumn"/>
        <waitForElementVisible selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="validateFirstColumnWidth"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnBackend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productImageCSS}}')[0].clientWidth" stepKey="productImageWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productActions}}')[0].clientWidth" stepKey="productActionsWidth"/>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductImage">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productImageWidth</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductPriceContainer">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productPriceContainerWidth</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductActions">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productActionsWidth</expectedResult>
        </assertGreaterThan>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate stage after save" stepKey="validateProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validating products is smaller than column after save -->
        <comment userInput="Validating products is smaller than column after save" stepKey="commentValidatingProductsIsSmallerThanColumnAfterSave"/>
        <waitForElementVisible selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="validateFirstColumnWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnBackend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productImageCSS}}')[0].clientWidth" stepKey="productImageWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productActions}}')[0].clientWidth" stepKey="productActionsWidthAfterSave"/>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductImageAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productImageWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductPriceContainerAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productPriceContainerWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductActionsAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productActionsWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <!-- Validate Storefront -->
        <comment userInput="View Products inside column on storefront" stepKey="viewProductsOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validating products is smaller than column Storefront -->
        <comment userInput="Validating products is smaller than column storefront" stepKey="commentValidatingProductsIsSmallerThanColumnStoreFront"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnFrontend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productImageCSS}}')[0].clientWidth" stepKey="productImageWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productActions}}')[0].clientWidth" stepKey="productActionsWidthFrontend"/>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductImageFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productImageWidthFrontend</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductPriceContainerFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productPriceContainerWidthFrontend</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductActionsFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productActionsWidthFrontend</expectedResult>
        </assertGreaterThan>
    </test>
</tests>
