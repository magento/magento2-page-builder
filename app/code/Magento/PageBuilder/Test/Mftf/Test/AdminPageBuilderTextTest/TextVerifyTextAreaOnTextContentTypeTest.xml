<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="TextVerifyTextAreaOnTextContentTypeTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Textarea editor inline Text Content Type"/>
            <description value="Verify that user are able to add text into Textarea of Text Content Type and see it on storefront"/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-1438"/>
            <testCaseId value="MC-3667"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pr_exclude"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="disableWYSIWYG1"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG1"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection1">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Input text into textarea on stage-->
        <comment userInput="Input text into textarea on stage" stepKey="commentInputTextIntoStage"/>
        <click selector="{{TextOnStage.textareaPlaceholder('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.textareaPlaceholder('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillTextToTextarea"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromTextarea"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{TextOnStage.textArea('1')}}" stepKey="waitForTextStage1"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="textareaValue"/>
        <assertEquals stepKey="assertTextValue">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">textareaValue</actualResult>
        </assertEquals>
        <!--Verify inputed text on slideout-->
        <comment userInput="Verify inputed text on slideout" stepKey="commentVerifyTextOnSlideout"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <executeJS function="return document.getElementById('{{TextOnConfiguration.textAreaId}}').value;" stepKey="getText"/>
        <assertStringContainsString stepKey="assertEquals1" message="pass">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">getText</actualResult>
        </assertStringContainsString>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!--Verify Text Content Type on stage after saving cms page-->
        <comment userInput="Verify text content type on stage" stepKey="commentVerifyTextOnStage"/>
        <waitForElementVisible selector="{{TextOnStage.textArea('1')}}" stepKey="waitForTextStage2"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="textareaValueAfterSaving"/>
        <assertEquals stepKey="assertTextValueAfterSaving">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">textareaValueAfterSaving</actualResult>
        </assertEquals>
        <!--Verify Text Content Type on storefront-->
        <comment userInput="Verify Text Content Type on storefront" stepKey="commentVerifyTextContentTypeOnStorefront"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <waitForElementVisible selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStorefront"/>
    </test>
</tests>
