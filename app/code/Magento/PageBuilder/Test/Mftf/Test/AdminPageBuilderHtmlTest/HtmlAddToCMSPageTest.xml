<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="HtmlAddToCMSPageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="HTML Code"/>
            <title value="Update General Values"/>
            <description value="Validate that updating every attribute in the General form for Html will update the Stage and Storefront correctly."/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-1408"/>
            <testCaseId value="MC-2584"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-html"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{ImageFolder.name}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="ImageUpload3"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHtmlIntoStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelTextArea" stepKey="enterHtmlContent">
            <argument name="property" value="PageBuilderHtmlPropertyButton"/>
        </actionGroup>
        <!-- Add media directives -->
        <comment userInput="Add media directives" stepKey="commentAddMediaDirectives"/>
        <actionGroup ref="addPageLinkWidgetToHtmlCodeWYSIWYGDisabled" stepKey="addPageLinkWidgetToHtmlCodeWYSIWYGDisabled">
            <argument name="widget" value="PageBuilderTextArea_WidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickHtmlInsertImageButton" stepKey="clickInsertImageInHtmlCode"/>
        <actionGroup ref="clickMediaGalleryStorageRootArrow" stepKey="clickMediaGalleryStorageRootArrow"/>
        <actionGroup ref="CreateImageFolderActionGroup" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="AttachImageActionGroup" stepKey="attachImage1">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="SaveImageActionGroup" stepKey="insertImage"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertImageInTextareaValueBeforeSave">
            <argument name="value" value="{{ImageUpload3.value}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="addVariableToHtmlCodeWYSIWYGDisabled" stepKey="addVariableToHtmlCodeWYSIWYGDisabled">
            <argument name="variable" value="PageBuilderTextArea_VariableBaseURL"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{HtmlOnStage.base('1')}}" stepKey="waitForHtmlBaseStage1"/>
        <waitForElementVisible selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="waitForHtmlStage1"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStage.baseCSS}}')[0].innerText;" stepKey="actualTextFromHtmlCode"/>
        <assertStringContainsString stepKey="assertWidgetOnStage">
            <expectedResult type="string">{{TinyMCEWidgetCMSPageLink.stageValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCode</actualResult>
        </assertStringContainsString>
        <assertStringContainsString stepKey="assertImageOnStage">
            <expectedResult type="string">{{ImageUpload3.value}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCode</actualResult>
        </assertStringContainsString>
        <assertStringContainsString stepKey="assertVariableOnStage">
            <expectedResult type="string">{{TinyMCEVariableBaseURL.stageValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCode</actualResult>
        </assertStringContainsString>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{HtmlOnStage.base('1')}}" stepKey="waitForHtmlBaseStage2"/>
        <waitForElementVisible selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="waitForHtmlStage2"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStage.baseCSS}}')[0].innerText;" stepKey="actualTextFromHtmlCodeAfterSave"/>
        <assertStringContainsString stepKey="assertWidgetOnStageAfterSave">
            <expectedResult type="string">{{TinyMCEWidgetCMSPageLink.stageValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertStringContainsString>
        <assertStringContainsString stepKey="assertImageOnStageAfterSave">
            <expectedResult type="string">{{ImageUpload3.value}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertStringContainsString>
        <assertStringContainsString stepKey="assertVariableOnStageAfterSave">
            <expectedResult type="string">{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertStringContainsString>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertButtonInTextareaValueAfterSave">
            <argument name="value" value="{{PageBuilderHtmlPropertyButton.value}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertWidgetInTextareaValueAfterSave">
            <argument name="value" value="{{PageBuilderTextArea_WidgetCMSPageLink.editPanelValue}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertImageInTextareaValueAfterSave">
            <argument name="value" value="{{ImageUpload3.value}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertVariableInTextareaValueAfterSave">
            <argument name="value" value="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{HtmlOnStorefront.base('1')}}" stepKey="waitForHtmlBaseStorefront"/>
        <waitForElementVisible selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="waitForHtmlStorefront"/>
        <seeElement selector="{{HtmlOnStorefront.widgetLink('1', _ENV.MAGENTO_BASE_URL, $$createCMSPage.identifier$$)}}" stepKey="seeWidgetStorefront"/>
        <seeElement selector="{{StorefrontCMSPageSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeMediaSourceStorefront"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStorefront.baseCSS}}')[0].innerText;" stepKey="actualTextStorefront"/>
        <assertStringContainsString stepKey="assertVariableStorefront">
            <expectedResult type="string">{{_ENV.MAGENTO_BASE_URL}}</expectedResult>
            <actualResult type="variable">actualTextStorefront</actualResult>
        </assertStringContainsString>
        <!-- Click Page Link Widget Storefront -->
        <comment userInput="Click Page Link Widget Storefront" stepKey="clickClickPageLinkWidgetStorefront"/>
        <click selector="{{HtmlOnStorefront.widgetLink('1', _ENV.MAGENTO_BASE_URL, $$createCMSPage.identifier$$)}}" stepKey="clickWidgetStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}$$createCMSPage.identifier$$" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
</tests>
