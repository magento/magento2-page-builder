<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="RowValidateLayoutSectionDefaultValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Validate Layout Section Default Values"/>
            <description value="Validate the default values for fields in the Layout section for Row."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-914"/>
            <testCaseId value="MC-2385"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForFirstRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Validate Min Height Field -->
        <comment userInput="Validate min height fields" stepKey="commentMinHeight"/>
        <actionGroup ref="seeInFieldSlideOutPropertyActionGroup" stepKey="validateEmptyHeightField">
            <argument name="property" value="PageBuilderMinHeightProperty_Empty"/>
        </actionGroup>
        <!-- Validate Vertical Alignment Fields -->
        <comment userInput="Validate vertical alignment fields" stepKey="commentVerticalAlignment"/>
        <actionGroup ref="validateVerticalAlignmentVisualSelectsActionGroup" stepKey="validateVerticalAlignment">
            <argument name="property1" value="PageBuilderVerticalAlignmentPropertyTop"/>
            <argument name="property2" value="PageBuilderVerticalAlignmentPropertyCenter"/>
            <argument name="property3" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutPropertyActionGroup" stepKey="verticalAlignTopSelected">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyTop"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsThirdColumn"/>
        <!-- Verify Min Height Not Used and Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify min height not used and vertical alignment on stage before save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageBeforeSave"/>
        <waitForElement selector="{{RowOnStage.base('1')}}" stepKey="waitForFirstRowMinHeightStyle"/>
        <dontSeeElement selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_300.value)}}" stepKey="dontSeeFirstRowMinHeightStyle"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTop"/>
        <!-- Verify Min Height Not Used and Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify min height not used and vertical alignment on stage after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageAfterSave"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <waitForElement selector="{{RowOnStage.base('1')}}" stepKey="waitForRowAfterSave"/>
        <dontSeeElement selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_300.value)}}" stepKey="seeFirstRowMinHeightAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTopAfterSave"/>
        <!-- Verify Min Height Not Used and Vertical Alignment In Form - After Save -->
        <comment userInput="Verify min height and vertical alignment in form after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentInFormAfterSave"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForFirstRowAfterSave">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutPropertyActionGroup" stepKey="validateEmptyHeightFieldAfterSave">
            <argument name="property" value="PageBuilderMinHeightProperty_Empty"/>
        </actionGroup>
        <actionGroup ref="validateVerticalAlignmentVisualSelectsActionGroup" stepKey="validateVerticalAlignmentAfterSave">
            <argument name="property1" value="PageBuilderVerticalAlignmentPropertyTop"/>
            <argument name="property2" value="PageBuilderVerticalAlignmentPropertyCenter"/>
            <argument name="property3" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutPropertyActionGroup" stepKey="verticalAlignTopSelectedAfterSave">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyTop"/>
        </actionGroup>
        <!-- Verify Min Height and Vertical Alignment Not Used In Storefront -->
        <comment userInput="Verify min height and vertical alignment not used in storefront" stepKey="commentVerifyMinHeightAndVerticalAlignmentNotUsedInStorefront"/>
        <actionGroup ref="navigateToStoreFrontActionGroup" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <waitForElement selector="{{RowOnStorefront.base('1')}}" stepKey="waitForRowOnStage"/>
        <dontSeeElement selector="{{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}" stepKey="seeRow1MinHeightApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeRow1VerticalAlignmentTopApplied"/>
    </test>
    <test name="RowMinHeightInvalidInputs">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Row Min Height Invalid Inputs"/>
            <description value="A user cannot submit an invalid min height value"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-914"/>
            <testCaseId value="MC-2391"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForFirstRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Enter Height: NonNumeric -->
        <comment userInput="Enter Height: NonNumeric" stepKey="commentEnterHeightNonNumeric"/>
        <actionGroup ref="fillSlideOutPanelFieldAndExpectToSeeErrorInFieldsetGeneralActionGroup" stepKey="enterMinHeightPropertyFirstRowNonNumeric">
            <argument name="property" value="PageBuilderMinHeightProperty_NonNumeric"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSectionActionGroup" stepKey="validateErrorNonNumeric">
            <argument name="property" value="PageBuilderMinHeightProperty_NonNumeric"/>
        </actionGroup>
        <!-- Enter Height: Negative -->
        <comment userInput="Enter Height: Negative" stepKey="commentEnterHeightNegative"/>
        <actionGroup ref="fillSlideOutPanelFieldAndExpectToSeeErrorInFieldsetGeneralActionGroup" stepKey="enterMinHeightPropertyFirstRowNegative">
            <argument name="property" value="PageBuilderMinHeightProperty_Negative1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldErrorGeneralSectionActionGroup" stepKey="validateErrorNegative">
            <argument name="property" value="PageBuilderMinHeightProperty_Negative1"/>
        </actionGroup>
        <!-- Enter Height: Valid After Invalid -->
        <comment userInput="Enter Height: Valid After Invalid" stepKey="commentEnterHeightValidAfterInvalid"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightPropertyFirstRow">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsFirstRow"/>
        <!-- Verify Valid Height After Invalid - Before Save -->
        <comment userInput="Verify valid height after invalid on stage before save" stepKey="commentVerifyValidHeightAfterInvalidBeforeSave"/>
        <waitForElementVisible selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_500.value)}}" stepKey="seeFirstRowMinHeight"/>
        <!-- Verify Valid Height After Invalid - After Save -->
        <comment userInput="Verify valid height after invalid on stage after save" stepKey="commentVerifyHeightAfterInvalidOnStageAfterSave"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <waitForElementVisible selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_500.value)}}" stepKey="seeFirstRowMinHeightAfterSave"/>
    </test>
    <test name="RowWithBordersAndPaddingEqualToMinHeight">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Row with borders and padding is equal to min height"/>
            <description value="A user can see Row height with borders and padding is equal to min height"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5079"/>
            <testCaseId value="MC-5765"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Configure content type -->
        <comment userInput="Configure content type" stepKey="commentConfigureContentType"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_300"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldActionGroup" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertySolid"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPaddingActionGroup" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettings"/>
        <!-- Validate height on stage before save -->
        <comment userInput="Validate height on stage before save" stepKey="commentValidateHeightOnStageBeforeSave"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeightActionGroup" stepKey="validateContentTypeHeightBeforeSave">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <!-- Validate height on stage after save -->
        <comment userInput="Validate height on stage after save" stepKey="commentValidateHeightOnStageAfterSave"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeightActionGroup" stepKey="validateContentTypeHeightAfterSave">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFrontActionGroup" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Validate height on storefront -->
        <comment userInput="Validate height on storefront" stepKey="commentValidateHeightOnStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeightActionGroup" stepKey="validateContentTypeHeightStorefront">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
        </actionGroup>
    </test>
    <test name="RowWithBordersPaddingAndLargeContentsGreaterThanMinHeight">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Row with borders, padding, and large content is greater than min height"/>
            <description value="A user can see Row height with borders, padding, and large content is greater than min height"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5079"/>
            <testCaseId value="MC-5802"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Configure content type -->
        <comment userInput="Configure content type" stepKey="commentConfigureContentType"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldActionGroup" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertySolid"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPaddingActionGroup" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettings"/>
        <!-- Add tall content to container -->
        <comment userInput="Add tall content to container" stepKey="commentAddTallContentToContainer"/>
        <actionGroup ref="expandPageBuilderPanelMenuSectionActionGroup" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStageActionGroup" stepKey="dragContentTypeToContainer">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate height on stage before save -->
        <comment userInput="Validate height on stage before save" stepKey="commentValidateHeightOnStageBeforeSave"/>
        <actionGroup ref="validateContentTypeHeightGreaterThanMinHeightActionGroup" stepKey="validateContentTypeHeightBeforeSave">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <!-- Validate height on stage after save -->
        <comment userInput="Validate height on stage after save" stepKey="commentValidateHeightOnStageAfterSave"/>
        <actionGroup ref="validateContentTypeHeightGreaterThanMinHeightActionGroup" stepKey="validateContentTypeHeightAfterSave">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFrontActionGroup" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Validate height on storefront -->
        <comment userInput="Validate height on storefront" stepKey="commentValidateHeightOnStorefront"/>
        <actionGroup ref="validateContentTypeHeightGreaterThanMinHeightActionGroup" stepKey="validateContentTypeHeightStorefront">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
    </test>
    <test name="RowContentIsVerticallyAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Row Content Can Be Vertically Aligned"/>
            <description value="A user can vertically align row contents"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-914"/>
            <testCaseId value="MC-2388"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Add two rows to stage -->
        <comment userInput="Add two rows to the stage" stepKey="commentAddTwoRows"/>
        <actionGroup ref="dragContentTypeToStageActionGroup" stepKey="dragSecondRowIntoStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStageActionGroup" stepKey="dragThirdRowIntoStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Configure First Row - Vertical Align Top -->
        <comment userInput="Configure vertical align top" stepKey="commentConfigureVerticalAlignTop"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForFirstRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmentTopProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyTop"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsFirstRow"/>
        <actionGroup ref="expandPageBuilderPanelMenuSectionActionGroup" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToFirstRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeadingActionGroup" stepKey="clickOutsideLiveEditHeading1">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Configure Second Row - Vertical Align Center -->
        <comment userInput="Configure vertical align center" stepKey="commentConfigureVerticalAlignCenter"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForSecondRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmenCenterProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsSecondRow"/>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToSecondRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeadingActionGroup" stepKey="clickOutsideLiveEditHeading2">
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Configure Third Row - Vertical Align Bottom -->
        <comment userInput="Configure vertical align bottom" stepKey="commentConfigureVerticalAlignBottom"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForThirdRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="3"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmentBottomProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsThirdColumn"/>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToThirdRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="3"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Verify Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify vertical alignment on stage before save" stepKey="commentVerifyVerticalAlignmentOnStageBeforeSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTop"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeSecondRowVerticalAlignmentCenter"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeThirdRowVerticalAlignmentBottom"/>
        <!-- Verify Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify vertical alignment on stage after save" stepKey="commentVerifyVerticalAlignmentOnStageAfterSave"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTopAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeSecondRowVerticalAlignmentCenterAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeThirdRowVerticalAlignmentBottomAfterSave"/>
        <!-- Verify Vertical Alignment In Storefront -->
        <actionGroup ref="navigateToStoreFrontActionGroup" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <seeElement selector="{{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeRow1VerticalAlignmentTopApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeRow2VerticalAlignmentCenterApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeRow3VerticalAlignmentBottomApplied"/>
    </test>
    <test name="RowContentIsVerticallyAlignedWithDifferentMinimumHeights">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Row"/>
            <title value="Row Content Can Be Vertically Aligned With Different Heights"/>
            <description value="A user can vertically align row contents with different heights"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-914"/>
            <testCaseId value="MC-2389"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowLayout"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdminActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilderActionGroup" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitleActionGroup" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Add two rows to stage -->
        <comment userInput="Add two rows to the stage" stepKey="commentAddTwoRows"/>
        <actionGroup ref="dragContentTypeToStageActionGroup" stepKey="dragSecondRowIntoStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStageActionGroup" stepKey="dragThirdRowIntoStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Configure First Row - Vertical Align Top -->
        <comment userInput="Configure vertical align top" stepKey="commentConfigureVerticalAlignTop"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForFirstRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightPropertyFirstRow">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmentTopProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyTop"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsFirstRow"/>
        <actionGroup ref="expandPageBuilderPanelMenuSectionActionGroup" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop"/>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToFirstRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeadingActionGroup" stepKey="clickOutsideLiveEditHeading1">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Configure Second Row - Vertical Align Center -->
        <comment userInput="Configure vertical align center" stepKey="commentConfigureVerticalAlignCenter"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForSecondRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightPropertySecondRow">
            <argument name="property" value="PageBuilderMinHeightProperty_300"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmentCenterProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsSecondRow"/>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop2"/>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToSecondRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop3"/>
        <actionGroup ref="clickOutsideLiveEditHeadingActionGroup" stepKey="clickOutsideLiveEditHeading2">
            <argument name="index" value="2"/>
        </actionGroup>
        <!--Configure Third Row - Vertical Align Bottom -->
        <comment userInput="Configure vertical align bottom" stepKey="commentConfigureVerticalAlignBottom"/>
        <actionGroup ref="openPageBuilderEditPanelByIndexActionGroup" stepKey="openEditPanelForThirdRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="3"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneralActionGroup" stepKey="enterMinHeightPropertyThirdRow">
            <argument name="property" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOptionActionGroup" stepKey="enterVerticalAlignmentBottomProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsActionGroup" stepKey="saveEditPanelSettingsThirdColumn"/>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop4"/>
        <actionGroup ref="dragContentTypeToContainerActionGroup" stepKey="dragHeadingToThirdRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="3"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Verify Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify min height and vertical alignment on stage before save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageBeforeSave"/>
        <seeElement selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_500.value)}}" stepKey="seeFirstRowMinHeight"/>
        <seeElement selector="{{RowOnStage.minHeight('2', PageBuilderMinHeightProperty_300.value)}}" stepKey="seeSecondRowMinHeight"/>
        <seeElement selector="{{RowOnStage.minHeight('3', PageBuilderMinHeightProperty_200.value)}}" stepKey="seeThirdRowMinHeight"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTop"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeSecondRowVerticalAlignmentCenter"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeThirdRowVerticalAlignmentBottom"/>
        <!-- Verify Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify min height and vertical alignment on stage after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageAfterSave"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStageActionGroup" stepKey="switchToPageBuilderStage"/>
        <seeElement selector="{{RowOnStage.minHeight('1', PageBuilderMinHeightProperty_500.value)}}" stepKey="seeFirstRowMinHeightAfterSave"/>
        <seeElement selector="{{RowOnStage.minHeight('2', PageBuilderMinHeightProperty_300.value)}}" stepKey="seeSecondRowMinHeightAfterSave"/>
        <seeElement selector="{{RowOnStage.minHeight('3', PageBuilderMinHeightProperty_200.value)}}" stepKey="seeThirdRowMinHeightAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeFirstRowVerticalAlignmentTopAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeSecondRowVerticalAlignmentCenterAfterSave"/>
        <seeElement selector="{{RowOnStage.rowChildrenStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeThirdRowVerticalAlignmentBottomAfterSave"/>
        <!-- Verify Min Height and Vertical Alignment In Storefront -->
        <comment userInput="Verify min height and vertical alignment in storefront" stepKey="commentVerifyMinHeightAndVerticalAlignmentInStorefront"/>
        <actionGroup ref="navigateToStoreFrontActionGroup" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <seeElement selector="{{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}" stepKey="seeRow1MinHeightApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('2', PageBuilderMinHeightProperty_300.style)}}" stepKey="seeRow2MinHeightApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('3', PageBuilderMinHeightProperty_200.style)}}" stepKey="seeRow3MinHeightApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyTop.style)}}" stepKey="seeRow1VerticalAlignmentTopApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('2', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeRow2VerticalAlignmentCenterApplied"/>
        <seeElement selector="{{RowOnStorefront.rowStyle('3', PageBuilderVerticalAlignmentPropertyBottom.style)}}" stepKey="seeRow3VerticalAlignmentBottomApplied"/>
    </test>
</tests>
