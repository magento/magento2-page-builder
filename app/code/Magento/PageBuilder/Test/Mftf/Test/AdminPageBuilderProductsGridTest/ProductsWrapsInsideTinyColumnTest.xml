<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="ProductsWrapsInsideTinyColumnTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Products"/>
            <title value="Grid - Product Content Type Wraps Inside Tiny Column"/>
            <description value="Validate that the Products content type wraps in a tiny column"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-4096"/>
            <testCaseId value="MC-4301"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-addToColumn"/>
            <group value="pagebuilder-productsGrid"/>
        </annotations>
        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer">
                <argument name="contentType" value="PageBuilderRowContentType"/>
                <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnGroupContentType"/>
        </actionGroup>
        <!-- Drag new column onto column group to make 1/12 column -->
        <comment userInput="Drag new column onto column group to make 1/12 column" stepKey="commentDragNewColumnToGroupMakeFirstColumnSmall"/>
        <actionGroup ref="dragColumnToColumnGroup" stepKey="dragColumnIntoFirstColumnGroup">
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="3"/>
        </actionGroup>
        <!-- Add Products to Stage -->
        <comment userInput="Add Products to Stage" stepKey="addProductsToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionAddContent">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragProductsOntoColumn">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectAppearance">
            <argument name="property" value="PageBuilderProductsProductGridAppearance"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="chooseSelectProductsBy">
            <argument name="property" value="PageBuilderProductsSelectProductsByCondition"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="User sees Products displayed in column on Stage" stepKey="confirmProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validating products is smaller than column -->
        <comment userInput="Validating products is smaller than column" stepKey="commentValidatingProductsIsSmallerThanColumn"/>
        <waitForElementVisible selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="validateFirstColumnWidth"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnBackend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productImageCSS}}')[0].clientWidth" stepKey="productImageWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidth"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productActions}}')[0].clientWidth" stepKey="productActionsWidth"/>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductImage">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productImageWidth</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductPriceContainer">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productPriceContainerWidth</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductActions">
            <actualResult type="variable">firstColumnWidth</actualResult>
            <expectedResult type="variable">productActionsWidth</expectedResult>
        </assertGreaterThan>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate stage after save" stepKey="validateProductsOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage2">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validating products is smaller than column after save -->
        <comment userInput="Validating products is smaller than column after save" stepKey="commentValidatingProductsIsSmallerThanColumnAfterSave"/>
        <waitForElementVisible selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="validateFirstColumnWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnBackend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productImageCSS}}')[0].clientWidth" stepKey="productImageWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidthAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStage.productActions}}')[0].clientWidth" stepKey="productActionsWidthAfterSave"/>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductImageAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productImageWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductPriceContainerAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productPriceContainerWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertColumnIsWiderThanProductActionsAfterSave">
            <actualResult type="variable">firstColumnWidthAfterSave</actualResult>
            <expectedResult type="variable">productActionsWidthAfterSave</expectedResult>
        </assertGreaterThan>
        <!-- Validate Storefront -->
        <comment userInput="View Products inside column on storefront" stepKey="viewProductsOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Validating products is smaller than column Storefront -->
        <comment userInput="Validating products is smaller than column storefront" stepKey="commentValidatingProductsIsSmallerThanColumnStoreFront"/>
        <executeJS function="return document.querySelectorAll('{{ColumnOnFrontend.columnX('1')}}')[0].clientWidth" stepKey="firstColumnWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productImageCSS}}')[0].clientWidth" stepKey="productImageWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productPriceContainer}}')[0].clientWidth" stepKey="productPriceContainerWidthFrontend"/>
        <executeJS function="return document.querySelectorAll('{{ProductsOnStorefront.productActions}}')[0].clientWidth" stepKey="productActionsWidthFrontend"/>
        <assertGreaterThanOrEqual stepKey="assertColumnIsWiderThanProductImageFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productImageWidthFrontend</expectedResult>
        </assertGreaterThanOrEqual>
        <assertGreaterThanOrEqual stepKey="assertColumnIsWiderThanProductPriceContainerFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productPriceContainerWidthFrontend</expectedResult>
        </assertGreaterThanOrEqual>
        <assertGreaterThanOrEqual stepKey="assertColumnIsWiderThanProductActionsFrontend">
            <actualResult type="variable">firstColumnWidthFrontend</actualResult>
            <expectedResult type="variable">productActionsWidthFrontend</expectedResult>
        </assertGreaterThanOrEqual>
    </test>
</tests>
