<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="BlockRenderHTMLThroughBlockContentTypeTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render HTML Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the HTML content type through the Block content type."/>
            <severity value="BLOCKER"/>
            <testCaseId value="MC-14806"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-html"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSBlockPageActionGroup" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{ImageFolder.name}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="ImageUpload3"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add HTML -->
        <comment userInput="Add HTML" stepKey="commentAddHTML"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHTMLIntoStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <!-- Edit HTML -->
        <comment userInput="Edit HTML" stepKey="commentEditHTML"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuHtml">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelTextArea" stepKey="enterHtmlContent">
            <argument name="property" value="PageBuilderHtmlPropertyButton"/>
        </actionGroup>
        <!-- Add media directives -->
        <comment userInput="Add media directives" stepKey="commentAddMediaDirectives"/>
        <actionGroup ref="addPageLinkWidgetToHtmlCodeWYSIWYGDisabled" stepKey="addPageLinkWidgetToHtmlCodeWYSIWYGDisabled">
            <argument name="widget" value="PageBuilderTextArea_WidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickHtmlInsertImageButton" stepKey="clickInsertImageInHtmlCode"/>
        <actionGroup ref="clickMediaGalleryStorageRootArrow" stepKey="clickMediaGalleryStorageRootArrow"/>
        <actionGroup ref="CreateImageFolderActionGroup" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="AttachImageActionGroup" stepKey="attachImage1">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="SaveImageActionGroup" stepKey="insertImage"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertImageInTextareaValueBeforeSave">
            <argument name="value" value="{{ImageUpload3.value}}"/>
            <argument name="selector" value="{{HtmlOnConfiguration.textarea}}"/>
        </actionGroup>
        <actionGroup ref="addVariableToHtmlCodeWYSIWYGDisabled" stepKey="addVariableToHtmlCodeWYSIWYGDisabled">
            <argument name="variable" value="PageBuilderTextArea_VariableBaseURL"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsHtml"/>
        <actionGroup ref="SaveCMSBlockActionGroup" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage After Save -->
        <comment userInput="Validate CMS Block Stage After Save" stepKey="commentValidateCMSBlockStageAfterSave"/>
        <seeElement selector="{{HtmlOnStage.base('1')}}" stepKey="seeHtmlBaseCMSBlockStageAfterSave"/>
        <seeElement selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSBlockStageAfterSave"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStage.baseCSS}}')[0].innerText;" stepKey="actualTextFromHtmlCodeAfterSave"/>
        <assertContains stepKey="assertWidgetOnStageAfterSave">
            <expectedResult type="string">{{TinyMCEWidgetCMSPageLink.stageValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertContains>
        <assertContains stepKey="assertImageOnStageAfterSave">
            <expectedResult type="string">{{ImageUpload3.value}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertContains>
        <assertContains stepKey="assertVariableOnStageAfterSave">
            <expectedResult type="string">{{TinyMCEVariableBaseURL.stageValue}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeAfterSave</actualResult>
        </assertContains>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSPageStage"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStage.baseCSS}}')[0].innerText;" stepKey="actualTextFromHtmlCodeCMSPageStage"/>
        <assertContains stepKey="assertWidgetOnStageCMSPageStage">
            <expectedResult type="string">{{_ENV.MAGENTO_BASE_URL}}$$createCMSPage.identifier$$</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeCMSPageStage</actualResult>
        </assertContains>
        <assertContains stepKey="assertImageOnStageCMSPageStage">
            <expectedResult type="string">{{ImageUpload3.value}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeCMSPageStage</actualResult>
        </assertContains>
        <assertContains stepKey="assertVariableOnStageCMSPageStage">
            <expectedResult type="string">{{_ENV.MAGENTO_BASE_URL}}</expectedResult>
            <actualResult type="variable">actualTextFromHtmlCodeCMSPageStage</actualResult>
        </assertContains>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStorefront"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="seeRenderedHtmlCMSPageStorefront"/>
        <click selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="clickRenderedHtmlButtonCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderHtmlPropertyButton.url}}" stepKey="seeThatUrlIsChangedToHtmlLinkUrl"/>
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToCMSPageStorefront2">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HtmlOnStorefront.widgetLink('1', _ENV.MAGENTO_BASE_URL, $$createCMSPage.identifier$$)}}" stepKey="seeWidgetStorefront"/>
        <seeElement selector="{{StorefrontCMSPageSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeMediaSourceStorefront"/>
        <executeJS function="return document.querySelectorAll('{{HtmlOnStorefront.baseCSS}}')[0].innerText;" stepKey="actualTextStorefront"/>
        <assertContains stepKey="assertVariableStorefront">
            <expectedResult type="string">{{_ENV.MAGENTO_BASE_URL}}</expectedResult>
            <actualResult type="variable">actualTextStorefront</actualResult>
        </assertContains>
        <!-- Click Page Link Widget Storefront -->
        <comment userInput="Click Page Link Widget Storefront" stepKey="clickClickPageLinkWidgetStorefront"/>
        <click selector="{{HtmlOnStorefront.widgetLink('1', _ENV.MAGENTO_BASE_URL, $$createCMSPage.identifier$$)}}" stepKey="clickWidgetStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}$$createCMSPage.identifier$$" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
</tests>
