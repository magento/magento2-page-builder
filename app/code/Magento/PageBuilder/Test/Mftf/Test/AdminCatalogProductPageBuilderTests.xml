<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="PageBuilderCatalogProductDirectivesTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Magento Directives - Always render Magento Directives on Magento Storefront for Product"/>
            <description value="Admin are able to add CMS Page link, image, variable, widget into PageBuilder content and see it Product Page"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1364"/>
            <testCaseId value="MC-3174 "/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-magentoDirectives"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <magentoCLI command="config:set general/store_information/country_id US" stepKey="setValueForCountryVariable"/>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_newDefaultProduct" stepKey="createPreReqProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="simpleCmsPage" stepKey="createCMSPageA"/>
            <createData entity="simpleCmsPage" stepKey="createCMSPageB"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <magentoCLI command="config:set general/store_information/country_id none" stepKey="setBackToDefaultValue"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <deleteData createDataKey="createPreReqProduct" stepKey="deletePreReqProduct"/>
            <deleteData createDataKey="createCMSPageA" stepKey="deletePreReqCmsPageA"/>
            <deleteData createDataKey="createCMSPageB" stepKey="deletePreReqCmsPageB"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!--Go to Product Page-->
        <comment userInput="Go to Product Page" stepKey="goToProductPage"/>
        <amOnPage url="{{AdminProductEditPage.url($$createPreReqProduct.id$$)}}" stepKey="goToEditPage"/>
        <waitForPageLoad stepKey="waitForProductPageBeLoaded"/>
        <click selector="{{AdminProductFormSection.contentTab}}" stepKey="clickContentTab"/>
        <waitForElementVisible selector="{{PageBuilderCategoryAttribute.PageBuilderArea('description')}}" stepKey="waitForPageBuilderBtn"/>
        <see userInput="Edit with Page Builder" stepKey="seePageBuilderBtn"/>
        <!--Click enable PageBuilder button-->
        <comment userInput="Click enable PageBuilder button" stepKey="clickEnablePageBuilderBtn"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="enablePageBuilderOnCatalog"/>
        <!--Add button into PageBuilder-->
        <comment userInput="Add button into PageBuilder" stepKey="addButtonIntoPageBuilder"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionElements">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonIntoStage">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuOnStage1">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <!--Choose cms page link type-->
        <comment userInput="Choose cms page link type" stepKey="commentChooseCmsPageLinkType"/>
        <actionGroup ref="fillOutUrlInput" stepKey="choosePageLink">
            <argument name="fieldName" value="button_link"/>
            <argument name="linkName" value="ExternalLink.page"/>
            <argument name="searchString" value="ExternalLinkSearch.page"/>
            <argument name="searchResult" value="$$createCMSPageA.title$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <actionGroup ref="unFocusOptionMenu" stepKey="unFocusOptionMenu">
            <argument name="contentType" value="PageBuilderButtonItemContentType"/>
        </actionGroup>
        <!--Add image into PageBuilder-->
        <comment userInput="Add image into PageBuilder" stepKey="addImageIntoPageBuilder"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="addImageToStage" stepKey="addImageToStage">
            <argument name="property" value="PageBuilderImageProperty_StageJPG"/>
        </actionGroup>
        <waitForElementVisible selector="{{ImageOnStageWithoutImageUploaded.imageSourceByIndex('1', PageBuilderImageProperty_StageJPG.fileName)}}" stepKey="seeImage1SourceOnStage"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="closeLiveEdit"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Add variable into Text content-->
        <comment userInput="Add variable into Text content" stepKey="addVariableIntoTextContent"/>
        <actionGroup ref="addVariableToTinyMCE" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableCountry"/>
        </actionGroup>
        <!--Switch to iFrame 1-->
        <comment userInput="Switch to iFrame" stepKey="commentSwitchToIFrame1"/>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame1"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEVariable(TinyMCEVariableCountry.editPanelValue, '1')}}" stepKey="waitForVariable2"/>
        <switchToIFrame stepKey="exitIFrame1"/>
        <!--Add variable into Text content-->
        <comment userInput="Add widget into Text content" stepKey="addWidgetIntoTextContent"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCE" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <!--Switch to iFrame-->
        <comment userInput="Switch to iFrame" stepKey="commentSwitchToIFrame"/>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEWidget(TinyMCEWidgetCMSPageLink.editPanelValue, '1')}}" stepKey="waitForWidget"/>
        <switchToIFrame stepKey="exitIFrame"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <waitForElementVisible time="5" selector="{{PageBuilderStage.exitFullScreen}}" stepKey="waitForExitFullScreen"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <!--Go to storefront to verify Product Link-->
        <comment userInput="Verify directives on store front" stepKey="commentVerifyDirectivesOnSlideout"/>
        <amOnPage url="$$createPreReqProduct.name$$.html" stepKey="navigateToProductPage"/>
        <comment userInput="Verify directive link on Storefront" stepKey="verifyDirectiveLinkOnStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <scrollTo selector="{{StorefrontProductInfoDetailsSection.detailsTab}}" stepKey="scrollToDetailsTab"/>
        <see userInput="US" stepKey="verifyCountryVariableName"/>
        <see userInput="$$createCMSPageB.title$$" stepKey="verifyWidget"/>
        <waitForElementVisible selector="{{ImageOnStorefront.imageSourceByIndex('1', PageBuilderImageProperty_StageJPG.fileName)}}" stepKey="seeImage2SourceOnStorefront"/>
        <actionGroup ref="verifyCmsPageLinkOnFrontend" stepKey="checkButtonOnStoreFront">
            <argument name="CMSPage" value="$$createCMSPageA$$"/>
            <argument name="index" value="1"/>
            <argument name="section" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="PageBuilderCatalogProductCanCreatePageBuilderProductAttribute">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can create product attribute with pagebuilder"/>
            <description value="The user should be able to create product attribute type of pagebuilder"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-1321"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <amOnPage url="{{ProductAttributePage.url}}" stepKey="amOnProductAttributeCreationForm"/>
        <fillField selector="{{AttributePropertiesSection.DefaultLabel}}" userInput="{{ProductAttributeFrontendLabel.label}}" stepKey="fillDefaultLabel"/>
        <click selector="{{AttributePropertiesSection.InputType}}" stepKey="openInputTypeDropdown"/>
        <see userInput="Page Builder" stepKey="seePageBuilderInputType"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectOption1"/>
        <waitForElementVisible time="10" selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="waitForSaveAndContinueButton"/>
        <click selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="saveAndEdit"/>
        <waitForPageLoad time="10" stepKey="waitForPageToLoad"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="seePageBuilderIsSaved"/>
    </test>
    <test name="PageBuilderCatalogProductCanCreateProductWithPageBuilderProductAttribute">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can create product using pagebuilder product attribute"/>
            <description value="Can create product using pagebuilder product attribute and see it on Storefront"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-1316"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="disableWYSIWYG"/>
            <createData stepKey="myProductAttributeCreation" entity="productAttributeWysiwyg"/>
            <createData stepKey="myProductAttributeSetAssign" entity="AddToDefaultSet">
                <requiredEntity createDataKey="myProductAttributeCreation"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <deleteData createDataKey="myProductAttributeCreation" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$myProductAttributeCreation$$"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder"  stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute1"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <seeElement selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seePagebuilderBtn"/>
        <click selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="enablePageBuilder"/>
        <waitForElementVisible selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="waitForPageBuilderVisible"/>
        <seeElement selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="seePageBuilderVisible"/>
        <seeElement selector=".stage-full-screen" stepKey="seePageBuilderFullSizeScreen"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <fillField selector="{{TextOnConfiguration.textArea}}" userInput="Hello Product Page From PageBuilder" stepKey="addTextToEditor"/>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPageOnStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <see userInput="Hello Product Page From PageBuilder" stepKey="pagebuilderContent"/>
    </test>
    <test name="PageBuilderCatalogProductCanDownGradePageBuilderProductAttributeToTextArea">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can downgrade pagebuilder product attribute to text area product attribute"/>
            <description value="Can downgrade pagebuilder product attribute to text area product attribute"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-3015"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="myProductAttributeCreation" entity="productAttributeWysiwyg"/>
            <createData stepKey="myProductAttributeSetAssign" entity="AddToDefaultSet">
                <requiredEntity createDataKey="myProductAttributeCreation"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="myProductAttributeCreation" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$myProductAttributeCreation$$"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder"  stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute1"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <seeElement selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seePagebuilderBtn"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <amOnPage url="{{AdminProductAttributeGridPage.url}}" stepKey="navigateToProductAttributeGrid2"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <click selector="{{AdminProductAttributeGridSection.AttributeCode($$myProductAttributeCreation.attribute_code$$)}}" stepKey="navigateToAttributeEditPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad6"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="seePageBuilderSelected"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor" stepKey="seeTextEditor"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Text Area" stepKey="seeTextArea"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Text Area"  stepKey="selectTextArea"/>
        <waitForElementVisible selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="waitForWarningMsg"/>
        <seeElement selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="seeWarningMsg"/>
        <click selector="{{PageBuilderProductAttribute.AcceptBtn}}" stepKey="clickAcceptBtn"/>
        <waitForElementNotVisible selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="waitForWarningMsgNotVisible"/>
        <waitForElementVisible time="10" selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="waitForSaveAndContinueButtonVisible"/>
        <click selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="saveAttribute8"/>
        <waitForPageLoad time="10" stepKey="waitForPageToLoad71"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Text Area" stepKey="seeTextAreaSelected"/>
        <waitForPageLoad stepKey="waitForPageLoad7"/>
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGrid"/>
        <waitForPageLoad stepKey="waitForPageLoad8"/>
        <actionGroup ref="SortByIdDescendingActionGroup" stepKey="sortByIdDescending"/>
        <click selector="{{AdminProductGridActionSection.productName(SimpleProduct.name)}}"  stepKey="navigateToEditProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad9"/>
        <dontSeeElement selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="dontSeeTinyMCE4"/>
        <seeElement selector="{{ProductAttributeWYSIWYGSection.TextArea($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seeTextAreaAttribute"/>
    </test>
    <test name="PageBuilderCatalogProductCanDownGradePageBuilderProductAttributeToTextEditor">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can downgrade pagebuilder product attribute to text editor product attribute"/>
            <description value="Can downgrade pagebuilder product attribute to text editor product attribute"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-3013"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="myProductAttributeCreation" entity="productAttributeWysiwyg"/>
            <createData stepKey="myProductAttributeSetAssign" entity="AddToDefaultSet">
                <requiredEntity createDataKey="myProductAttributeCreation"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="myProductAttributeCreation" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <amOnPage url="{{AdminProductAttributeGridPage.url}}" stepKey="navigateToProductAttributeGrid1"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <click selector="{{AdminProductAttributeGridSection.AttributeCode($$myProductAttributeCreation.attribute_code$$)}}" stepKey="navigateToAttributeEditPage1"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder"  stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute1"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <seeElement selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seePagebuilderBtn"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <amOnPage url="{{AdminProductAttributeGridPage.url}}" stepKey="navigateToProductAttributeGrid2"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <click selector="{{AdminProductAttributeGridSection.AttributeCode($$myProductAttributeCreation.attribute_code$$)}}" stepKey="navigateToAttributeEditPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad6"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="seePageBuilderSelected"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor" stepKey="seeTextEditor"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Text Area" stepKey="seeTextArea"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor"  stepKey="selectTextEditor"/>
        <waitForElementVisible selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="waitForWarningMsg"/>
        <seeElement selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="seeWarningMsg"/>
        <click selector="{{PageBuilderProductAttribute.AcceptBtn}}" stepKey="clickAcceptBtn"/>
        <waitForElementNotVisible selector="{{PageBuilderProductAttribute.WarningMsg}}" stepKey="waitForWarningMsgNotVisible"/>
        <waitForElementVisible selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="waitForSaveAndContinueButtonVisible"/>
        <click selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="saveAttribute2"/>
        <waitForPageLoad stepKey="waitForPageToLoad71"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor" stepKey="seeEditorSelected"/>
        <waitForPageLoad stepKey="waitForPageLoad7"/>
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGrid"/>
        <waitForPageLoad stepKey="waitForPageLoad8"/>
        <actionGroup ref="SortByIdDescendingActionGroup" stepKey="sortByIdDescending"/>
        <click selector="{{AdminProductGridActionSection.productName(SimpleProduct.name)}}"  stepKey="navigateToEditProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad9"/>
        <seeElement selector="{{ProductAttributeWYSIWYGSection.TinyMCE4($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seeTinyMCE4Attribute"/>
    </test>
    <test name="PageBuilderCatalogProductCanUpgradeTextEditorProductAttributeToPageBuilder">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can upgrade texteditor product attribute to pagebuilder product attribute"/>
            <description value="Can upgrade texteditor product attribute to pagebuilder product attribute"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-4026"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="myProductAttributeCreation" entity="productAttributeWysiwyg"/>
            <createData stepKey="myProductAttributeSetAssign" entity="AddToDefaultSet">
                <requiredEntity createDataKey="myProductAttributeCreation"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="myProductAttributeCreation" stepKey="deleteProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <amOnPage url="{{AdminProductAttributeGridPage.url}}" stepKey="navigateToProductAttributeGrid1"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <click selector="{{AdminProductAttributeGridSection.AttributeCode($$myProductAttributeCreation.attribute_code$$)}}" stepKey="navigateToAttributeEditPage1"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor"  stepKey="selectTextEditor"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute1"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <seeElement selector="{{ProductAttributeWYSIWYGSection.TinyMCE4($$myProductAttributeCreation.attribute_code$$)}}" stepKey="waitForPageLoad10"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <amOnPage url="{{AdminProductAttributeGridPage.url}}" stepKey="navigateToProductAttributeGrid2"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <click selector="{{AdminProductAttributeGridSection.AttributeCode($$myProductAttributeCreation.attribute_code$$)}}" stepKey="navigateToAttributeEditPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad6"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor" stepKey="seeTextEditorSelected"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="seePageBuilder"/>
        <see selector="{{AttributePropertiesSection.InputType}}" userInput="Text Area" stepKey="seeTextArea"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder"  stepKey="selectPageBuilder"/>
        <waitForElementVisible selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="waitForSaveAndContinueButtonVisible"/>
        <click selector="{{AttributePropertiesSection.SaveAndEdit}}" stepKey="saveAttribute2"/>
        <waitForPageLoad stepKey="waitForPageToLoad71"/>
        <seeOptionIsSelected selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="seePageBuilderSelected"/>
        <waitForPageLoad stepKey="waitForPageLoad7"/>
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGrid"/>
        <waitForPageLoad stepKey="waitForPageLoad8"/>
        <actionGroup ref="SortByIdDescendingActionGroup" stepKey="sortByIdDescending"/>
        <click selector="{{AdminProductGridActionSection.productName(SimpleProduct.name)}}"  stepKey="navigateToEditProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad9"/>
        <seeElement selector="{{PageBuilderProductAttribute.PageBuilderBtn($$myProductAttributeCreation.attribute_code$$)}}" stepKey="seePagebuilderBtn"/>
    </test>
    <test name="PageBuilderCatalogProductCanCreatePageBuilderProductAttributeOnProductForm">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Can create pagebuilder product attribute on product form"/>
            <description value="Can create pagebuilder product attribute on product form"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1423"/>
            <testCaseId value="MC-1332"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="disableWYSIWYG"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <click selector="{{AdminProductFormSection.addAttributeBtn}}"  stepKey="clickAddAtttributeBtn"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoading1"/>
        <click selector="{{AdminProductFormSection.createNewAttributeBtn}}"  stepKey="clickCreateNewAtttributeBtn"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoading2"/>
        <fillField selector="{{AdminProductFormSection.attributeLabel}}" userInput="{{ProductAttributeFrontendLabel.label}}" stepKey="fillDefaultLabel"/>
        <click selector="{{AdminProductFormSection.frontendInput}}" stepKey="openInputTypeDropdown"/>
        <see userInput="Page Builder" stepKey="seePageBuilderInputType"/>
        <selectOption selector="{{AdminProductFormSection.frontendInput}}" userInput="Page Builder" stepKey="selectOption1"/>
        <click selector="{{AdminProductFormSection.saveNewAttribute}}" stepKey="saveAttribute"/>
        <waitForElementNotVisible selector="{{AdminProductFormSection.saveNewAttribute}}" stepKey="waitForSlideOutCloses"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <click selector="{{AdminProductFormSection.attributeTab}}" stepKey="expandAttributeTab"/>
        <waitForElementVisible selector="{{PageBuilderProductAttribute.PageBuilderBtn(ProductAttributeFrontendLabel.label)}}" stepKey="waitForAttributeVisbile"/>
        <click selector="{{PageBuilderProductAttribute.PageBuilderBtn(ProductAttributeFrontendLabel.label)}}" stepKey="enablePageBuilder"/>
        <waitForElementVisible selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="waitForPageBuilderVisible"/>
        <seeElement selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="seePageBuilderVisible"/>
        <seeElement selector=".stage-full-screen" stepKey="seePageBuilderFullSizeScreen"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <fillField selector="{{TextOnConfiguration.textArea}}" userInput="Hello Product Page From PageBuilder" stepKey="addTextToEditor"/>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPageOnStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <see userInput="Hello Product Page From PageBuilder" stepKey="pagebuilderContent"/>
    </test>
    <test name="PageBuilderCatalogProductCreateProductWithPageBuilderDescription">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Product description should display in full width"/>
            <description value="Product description should display in full width"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-936"/>
            <testCaseId value="MC-3090"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="FillAdminSimpleProductForm" stepKey="fillProductFieldsInAdmin">
                <argument name="category" value="$$createPreReqCategory$$"/>
                <argument name="simpleProduct" value="_defaultProduct"/>
            </actionGroup>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
        </after>
        <!-- Add PageBuilder description -->
        <comment userInput="Add PageBuilder description" stepKey="commentAddDescription"/>
        <click selector="{{AdminProductContentSection.sectionHeader}}" stepKey="openContentSection"/>
        <waitForPageLoad stepKey="waitForPageLoadContentSection"/>
        <waitForElementVisible selector="{{PageBuilderCategoryAttribute.PageBuilderArea('description')}}" stepKey="waitForPageBuilderBtn"/>
        <see userInput="{{EditWithPageBuilderButton.value}}" stepKey="seePageBuilderBtn"/>
        <click selector="{{PageBuilderCategoryAttribute.PageBuilderArea('description')}}" stepKey="clickOnPageBuilderBtn"/>
        <waitForPageLoad stepKey="waitForPageLoadPageBuilder"/>
        <waitForElementVisible selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="waitForPageBuilderVisible"/>
        <waitForElementVisible selector="{{PageBuilderStage.stageWrapperFullScreen}}" stepKey="seePageBuilderFullSizeScreen"/>
        <!-- Set background color of row -->
        <comment userInput="Set background color of row" stepKey="commentSetRowBackgroundColor"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHeadingOntoStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <!-- Add heading to stage -->
        <comment userInput="Add heading to stage" stepKey="commentAddHeadingToStage"/>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Use Full Width layout -->
        <comment userInput="Set Layout to Product - Full Width" stepKey="commentSetLayout"/>
        <actionGroup ref="setLayout" stepKey="setFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.product"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Check that description is full width -->
        <comment userInput="Check that description is full width" stepKey="commentSeeDescriptionFullWidth"/>
        <amOnPage url="{{_defaultProduct.urlKey}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <actionGroup ref="verifyFullWidthLayout" stepKey="verifyFullWidthLayout"/>
    </test>
    <test name="PageBuilderCatalogProductCreateProductWithPageBuilderDescriptionAndInvalidLayout">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Create product with unsupported Page Builder full width layout"/>
            <description value="Create product with unsupported Page Builder full width layout"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-936"/>
            <testCaseId value="MC-3172"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="FillAdminSimpleProductForm" stepKey="fillProductFieldsInAdmin">
                <argument name="category" value="$$createPreReqCategory$$"/>
                <argument name="simpleProduct" value="_defaultProduct"/>
            </actionGroup>
        </before>
        <after>
            <closeTab stepKey="closeTab"/>
            <actionGroup ref="logout" stepKey="logout"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
        </after>
        <!-- Add PageBuilder description -->
        <comment userInput="Add PageBuilder description" stepKey="commentAddDescription"/>
        <click selector="{{AdminProductContentSection.sectionHeader}}" stepKey="openContentSection"/>
        <waitForPageLoad stepKey="waitForPageLoadContentSection"/>
        <waitForElementVisible selector="{{PageBuilderCategoryAttribute.PageBuilderArea('description')}}" stepKey="waitForPageBuilderBtn"/>
        <see userInput="{{EditWithPageBuilderButton.value}}" stepKey="seePageBuilderBtn"/>
        <click selector="{{PageBuilderCategoryAttribute.PageBuilderArea('description')}}" stepKey="clickOnPageBuilderBtn"/>
        <waitForPageLoad stepKey="waitForPageLoadPageBuilder"/>
        <waitForElementVisible selector="{{PageBuilderPanel.layoutMenuSection}}" stepKey="waitForPageBuilderVisible"/>
        <waitForElementVisible selector="{{PageBuilderStage.stageWrapperFullScreen}}" stepKey="seePageBuilderFullSizeScreen"/>
        <!-- Set background color of row -->
        <comment userInput="Set background color of row" stepKey="commentSetRowBackgroundColor"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <!-- Add heading to stage -->
        <comment userInput="Add heading to stage" stepKey="commentAddHeadingToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHeadingOntoStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Set Layout to Category - Full Width -->
        <comment userInput="Set Layout to Category - Full Width" stepKey="commentSetLayout"/>
        <actionGroup ref="setLayout" stepKey="setCategoryFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.category"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Check that content is displayed on storefront with category full width layout -->
        <comment userInput="Check that content is displayed on storefront with category full width layout" stepKey="commentSeeContent"/>
        <openNewTab stepKey="openNewTab"/>
        <amOnPage url="{{_defaultProduct.urlKey}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <waitForElementVisible selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H2.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="waitForStorefrontHeadingText"/>
        <!-- Set Layout to Page - Full Width -->
        <comment userInput="Set Layout to Page - Full Width" stepKey="commentSetLayout2"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <actionGroup ref="setLayout" stepKey="setPageFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.cms"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct2"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct2"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess2"/>
        <!-- Check that content is displayed on storefront with Page full width layout -->
        <comment userInput="Check that content is displayed on storefront" stepKey="commentSeeContent2"/>
        <switchToNextTab stepKey="switchToNextTab1"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForPageReload"/>
        <waitForElementVisible selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H2.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="waitForStorefrontHeadingText2"/>
    </test>
    <test name="PageBuilderCatalogProductCreateProductWithFullWidthPageBuilderAttribute">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Create product with custom Page Builder attribute with full width layout"/>
            <description value="Create product with custom Page Builder attribute with full width layout"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3103"/>
            <testCaseId value="MC-3278"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="createWysiwygAttribute" entity="productAttributeWysiwyg"/>
            <createData stepKey="createWysiwygAttributeAttributeGroup" entity="AddToDefaultSet">
                <requiredEntity createDataKey="createWysiwygAttribute"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="createWysiwygAttribute" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Update created attribute to enable Page Builder -->
        <comment userInput="Update created attribute to enable Page Builder" stepKey="commentUpdateAttribute"/>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$createWysiwygAttribute$$"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute"/>
        <waitForPageLoad stepKey="waitForAttributeSave"/>
        <!-- Create a new product -->
        <comment userInput="Create a new product" stepKey="commentCreateNewProduct"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForProductPage"/>
        <!-- Fill the remaining product fields accordingly -->
        <comment userInput="Fill the remaining product fields accordingly" stepKey="commentFillProductFields"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <!-- Set background colour of row for custom attribute -->
        <comment userInput="Set background colour of row for custom attribute" stepKey="commentSetBackgroundColor"/>
        <scrollToTopOfPage stepKey="scrollToTop"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForAttribute">
            <argument name="attributeCode" value="$$createWysiwygAttribute.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Save product, before editing row -->
        <comment userInput="Save product, before editing row" stepKey="commentSaveProductAfterAttribute"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProductAfterAttribute"/>
        <waitForPageLoad stepKey="waitForProductSaveAfterAttribute"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccessAfterAttribute"/>
        <!-- Set background colour of row for description -->
        <comment userInput="Set background colour of row for description" stepKey="commentSetDescriptionRowBackgroundColor"/>
        <click selector="{{AdminProductContentSection.sectionHeader}}" stepKey="openContentSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription">
            <argument name="attributeCode" value="description"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openDescriptionEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterDescriptionRowBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveDescriptionEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitDescriptionPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForDescriptionPageLoadExitFullScreen"/>
        <!-- Save product -->
        <comment userInput="Save product" stepKey="commentSaveProduct"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <!-- Verify custom product attribute has it's own heading  -->
        <comment userInput="Verify custom product attribute has it's own heading" stepKey="commentValidateAttributeHasHeading"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeSectionHeading('1', $$createWysiwygAttribute.default_frontend_label$$)}}" stepKey="attributeHeadingVisible"/>
        <!-- Check that custom attribute and description are full  -->
        <comment userInput="Check that custom attribute and description are full width" stepKey="commentSeeFullWidthFrontend"/>
        <actionGroup ref="verifyFullWidthLayout" stepKey="verifyDescriptionFullWidthLayout">
            <argument name="index" value="0"/>
        </actionGroup>
        <actionGroup ref="verifyFullWidthLayout" stepKey="verifyAttributeFullWidthLayout">
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="PageBuilderCatalogProductCreateProductWithNormalAttributeValidateInTableFullWidth">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Custom attribute text field displays as expected with full width"/>
            <description value="Create product attribute of type text field, populate on full width product, verify display of attribute on front-end in more information section"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3103"/>
            <testCaseId value="MC-3279"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="createTextAttribute" entity="productAttributeText"/>
            <createData stepKey="assignTextAttributeGroup" entity="AddToDefaultSet">
                <requiredEntity createDataKey="createTextAttribute"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="createTextAttribute" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Create a new product -->
        <comment userInput="Create a new product" stepKey="commentCreateNewProduct"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForProductPage"/>
        <!-- Add a value to our attribute -->
        <comment userInput="Add a value to our attribute" stepKey="commentAddAttributeValue"/>
        <fillField selector="{{PageBuilderProductAttribute.attributeTextInput($$createTextAttribute.attribute_code$$)}}" userInput="Normal Text Attribute Value" stepKey="fillCustomAttribute"/>
        <!-- Fill the remaining product fields accordingly -->
        <comment userInput="Fill the remaining product fields accordingly" stepKey="commentFillProductFields"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <!-- Save product -->
        <comment userInput="Save product" stepKey="commentSaveProduct"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Verify text field attribute is displayed correctly in table -->
        <comment userInput="Verify text field attribute is displayed correctly in table" stepKey="commentVerifyAttributeInTable"/>
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeTableValue($$createTextAttribute.default_frontend_label$$, 'Normal Text Attribute Value')}}" stepKey="seeAttributeValueInTable"/>
    </test>
    <test name="PageBuilderCatalogProductProductFullWidthValidateAttributeOrder">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Attributes should be displayed in the order they are sorted in the attribute set"/>
            <description value="Attributes should be displayed in the order they are sorted in the attribute set"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3103"/>
            <testCaseId value="MC-3295"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="createPageBuilderAttribute1" entity="productAttributeWysiwyg"/>
            <createData stepKey="addToDefaultSetSortOrder1" entity="AddToDefaultSetSortOrder1">
                <requiredEntity createDataKey="createPageBuilderAttribute1"/>
            </createData>
            <createData stepKey="createPageBuilderAttribute2" entity="productAttributeWysiwyg"/>
            <createData stepKey="addToDefaultSetSortOrder2" entity="AddToDefaultSetSortOrder2">
                <requiredEntity createDataKey="createPageBuilderAttribute2"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <closeTab stepKey="closeTab"/>
            <deleteData createDataKey="createPageBuilderAttribute1" stepKey="deleteAttribute1"/>
            <deleteData createDataKey="createPageBuilderAttribute2" stepKey="deleteAttribute2"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Update created attributes to enable Page Builder -->
        <comment userInput="Update created attributes to enable Page Builder" stepKey="commentUpdateAttributes"/>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$createPageBuilderAttribute1$$"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute"/>
        <waitForPageLoad stepKey="waitForAttributeSave"/>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute1">
            <argument name="ProductAttribute" value="$$createPageBuilderAttribute2$$"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder1"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute1"/>
        <waitForPageLoad stepKey="waitForAttributeSave1"/>
        <!-- Create a new product -->
        <comment userInput="Create a new product" stepKey="commentCreateNewProduct"/>
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForProductPage"/>
        <!-- Fill the remaining product fields accordingly -->
        <comment userInput="Fill the remaining product fields accordingly" stepKey="commentFillProductFields"/>
        <actionGroup ref="fillMainProductForm" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <!-- Set background colour of row for our first custom attribute -->
        <comment userInput="Set background colour of row for our first custom attribute" stepKey="commentSetBackgroundColor"/>
        <scrollToTopOfPage stepKey="scrollToTopOfPage"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForAttribute1">
            <argument name="attributeCode" value="$$createPageBuilderAttribute1.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Save product, after first attribute -->
        <comment userInput="Save product, after first attribute" stepKey="commentSaveProductAfterAttribute"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProductAfterAttribute"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProductAfterAttribute"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccessAfterAttribute"/>
        <!-- Set background colour of row for our second custom attribute -->
        <comment userInput="Set background colour of row for our second custom attribute" stepKey="commentSetBackgroundColor1"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForAttribute2">
            <argument name="attributeCode" value="$$createPageBuilderAttribute2.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor1">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings1"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen1"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen1"/>
        <!-- Save product -->
        <comment userInput="Save product" stepKey="commentSaveProduct"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Validate attributes are displayed in the correct order -->
        <comment userInput="Validate attributes are displayed in the correct order" stepKey="commentValidateAttributeOrder"/>
        <openNewTab stepKey="openNewTab"/>
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPage"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeSectionHeading('1', $$createPageBuilderAttribute1.default_frontend_label$$)}}" stepKey="validateAttribute1DisplayedFirst"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeSectionHeading('2', $$createPageBuilderAttribute2.default_frontend_label$$)}}" stepKey="validateAttribute2DisplayedSecond"/>
        <!-- Swap the sort order of the attributes -->
        <comment userInput="Swap the sort order of the attributes" stepKey="commentSwapTheSortOrderOfAttributes"/>
        <switchToNextTab stepKey="switchToAdmin"/>
        <amOnPage url="{{AdminProductAttributeSetGridPage.url}}" stepKey="navigateToProductAttributeSetGrid"/>
        <waitForPageLoad stepKey="waitForAttributeSetGrid"/>
        <click selector="{{AdminProductAttributeSetGridSection.AttributeSetName('Default')}}" stepKey="navigateToDefaultAttributeSet"/>
        <waitForPageLoad stepKey="waitForAttributeSetEditPage"/>
        <dragAndDrop selector1="{{AdminProductAttributeSetSection.attribute($$createPageBuilderAttribute1.attribute_code$$)}}" selector2="{{AdminProductAttributeSetSection.attribute('weight')}}" stepKey="dragFirstAttributeToWeight"/>
        <waitForPageLoad stepKey="waitForDragAndDrop"/>
        <dragAndDrop selector1="{{AdminProductAttributeSetSection.attribute($$createPageBuilderAttribute2.attribute_code$$)}}" selector2="{{AdminProductAttributeSetSection.attribute('status')}}" stepKey="dragSecondAttributeToStatus"/>
        <waitForPageLoad stepKey="waitForDragAndDrop2"/>
        <click selector="{{AdminProductAttributeSetSection.saveBtn}}" stepKey="saveAttributesOrder"/>
        <actionGroup ref="ClearCacheActionGroup" stepKey="clearMagentoCache"/>
        <!-- Validate attributes are displayed in the reverse order -->
        <comment userInput="Validate attributes are displayed in the reverse order" stepKey="commentValidateAttributeOrderSwapped"/>
        <switchToNextTab stepKey="switchToProduct"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForPageReload"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeSectionHeading('2', $$createPageBuilderAttribute1.default_frontend_label$$)}}" stepKey="validateAttribute1DisplayedSecond"/>
        <waitForElementVisible selector="{{PageBuilderProductStorefront.attributeSectionHeading('1', $$createPageBuilderAttribute2.default_frontend_label$$)}}" stepKey="validateAttribute2DisplayedFirst"/>
    </test>
    <test name="PageBuilderCatalogProductStorefrontPageBuilderFullWidthProductsContentsAreOrderedCorrectly">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Catalog product storefront page should be ordered correctly"/>
            <description value="Catalog product storefront detail page should be ordered correctly"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5450"/>
            <testCaseId value="MC-5477"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData stepKey="createPageBuilderAttribute" entity="productAttributeWysiwyg"/>
            <createData stepKey="addToDefaultSetSortOrder" entity="AddToDefaultSetSortOrder1">
                <requiredEntity createDataKey="createPageBuilderAttribute"/>
            </createData>
            <createData stepKey="createTextAttribute" entity="productAttributeText"/>
            <createData stepKey="addToDefaultSetSortOrder1" entity="AddToDefaultSetSortOrder1">
                <requiredEntity createDataKey="createTextAttribute"/>
            </createData>
            <createData stepKey="createPreReqCategory" entity="_defaultCategory"/>
            <createData stepKey="relatedSimpleProduct" entity="SimpleProduct2"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <deleteData createDataKey="createPageBuilderAttribute" stepKey="deleteAttribute1"/>
            <deleteData createDataKey="createTextAttribute" stepKey="deleteAttribute2"/>
            <deleteData createDataKey="relatedSimpleProduct" stepKey="deleteRelatedProduct"/>
        </after>
        <!-- Update created attribute to enable Page Builder -->
        <comment userInput="Update created attribute to enable Page Builder" stepKey="commentUpdateAttribute"/>
        <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$createPageBuilderAttribute$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AttributePropertiesSection.InputType}}" stepKey="waitForInputType"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute"/>
        <waitForPageLoad stepKey="waitForAttributeSave"/>
        <actionGroup ref="FillAdminSimpleProductForm" stepKey="fillProductFieldsInAdmin">
            <argument name="category" value="$$createPreReqCategory$$"/>
            <argument name="simpleProduct" value="_defaultProduct"/>
        </actionGroup>
        <!-- Set background colour of row for our first custom attribute -->
        <comment userInput="Set background colour of row for our first custom attribute" stepKey="commentSetBackgroundColor"/>
        <scrollToTopOfPage stepKey="scrollToTopOfPage"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForAttribute1">
            <argument name="attributeCode" value="$$createPageBuilderAttribute.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Save product after custom attribute -->
        <comment userInput="Save product after custom attribute" stepKey="saveProductAfterCustomAttribute"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProductAfterAttribute"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProductAfterAttribute"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccessAfterAttribute"/>
        <!-- Add PageBuilder description -->
        <comment userInput="Add PageBuilder description" stepKey="commentAddDescription"/>
        <conditionalClick selector="{{AdminProductContentSection.sectionHeader}}" dependentSelector="{{AdminProductContentSection.sectionHeaderIfNotShowing}}" visible="false" stepKey="openContentSection"/>
        <waitForPageLoad stepKey="waitForPageLoadContentSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription">
            <argument name="attributeCode" value="description"/>
        </actionGroup>
        <!-- Set background color of row -->
        <comment userInput="Set background color of row" stepKey="commentSetRowBackgroundColor"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor1">
            <argument name="property" value="PageBuilderBackgroundColorProperty_3C3C3C"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings1"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen1"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen1"/>
        <!-- Update new text attribute, to be shown in More Information -->
        <comment userInput="Update new text attribute, to be shown in More Information" stepKey="commentTextAttribute"/>
        <waitForElementVisible selector="{{PageBuilderProductAttribute.attributeTextInput($$createTextAttribute.attribute_code$$)}}" stepKey="waitForTextInput"/>
        <fillField selector="{{PageBuilderProductAttribute.attributeTextInput($$createTextAttribute.attribute_code$$)}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillCustomContentTextarea"/>
        <!-- Add our related product -->
        <comment userInput="Add our related product" stepKey="commentAddRelatedProduct"/>
        <actionGroup ref="addRelatedProductBySku" stepKey="addRelatedProduct">
            <argument name="sku" value="$$relatedSimpleProduct.sku$$"/>
        </actionGroup>
        <!-- Add our up-sell product -->
        <comment userInput="Add our up-sell product" stepKey="commentAddUpSellProduct"/>
        <actionGroup ref="addUpSellProductBySku" stepKey="addUpSellProduct">
            <argument name="sku" value="$$relatedSimpleProduct.sku$$"/>
        </actionGroup>
        <!-- Use Full Width layout -->
        <comment userInput="Set Layout to Product - Full Width" stepKey="commentSetLayout"/>
        <actionGroup ref="setLayout" stepKey="setFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.product"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Check that description is full width -->
        <comment userInput="Check that description is full width" stepKey="commentSeeDescriptionFullWidth"/>
        <amOnPage url="{{_defaultProduct.urlKey}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <!-- Verify all sections exist on page -->
        <comment userInput="Verify all sections exist on page" stepKey="commentVerifySectionsOnPage"/>
        <seeElement selector="{{StorefrontProductFullWidth.infoMain}}" stepKey="seeInfoMain"/>
        <seeElement selector="{{StorefrontProductFullWidth.media}}" stepKey="seeMedia"/>
        <seeElement selector="{{StorefrontProductFullWidth.description}}" stepKey="seeDescription"/>
        <seeElement selector="{{StorefrontProductFullWidth.attributes}}" stepKey="seeAttributes"/>
        <seeElement selector="{{StorefrontProductFullWidth.moreInformation}}" stepKey="seeMoreInformation"/>
        <seeElement selector="{{StorefrontProductFullWidth.reviews}}" stepKey="seeReviews"/>
        <seeElement selector="{{StorefrontProductFullWidth.related}}" stepKey="seeRelated"/>
        <seeElement selector="{{StorefrontProductFullWidth.upsell}}" stepKey="seeUpsell"/>
        <!-- Assert sections on page are in correct order -->
        <comment userInput="Assert sections on page are in correct order" stepKey="commentAssertOrder"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.infoMain}}')[0].getBoundingClientRect().y" stepKey="infoMainPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.media}}')[0].getBoundingClientRect().y" stepKey="mediaPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.description}}')[0].getBoundingClientRect().y" stepKey="descriptionPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.attributes}}')[0].getBoundingClientRect().y" stepKey="attributesPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.moreInformation}}')[0].getBoundingClientRect().y" stepKey="moreInformationPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.reviews}}')[0].getBoundingClientRect().y" stepKey="reviewsPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.related}}')[0].getBoundingClientRect().y" stepKey="relatedPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.upsell}}')[0].getBoundingClientRect().y" stepKey="upsellPosition"/>
        <assertEquals stepKey="assertInfoMainAndMediaPosition">
            <expectedResult type="variable">infoMainPosition</expectedResult>
            <actualResult type="variable">mediaPosition</actualResult>
        </assertEquals>
        <assertGreaterThan stepKey="assertDescriptionBelowInfoMain">
            <expectedResult type="variable">infoMainPosition</expectedResult>
            <actualResult type="variable">descriptionPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertAttributesBelowDescription">
            <expectedResult type="variable">descriptionPosition</expectedResult>
            <actualResult type="variable">attributesPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertMoreInformationBelowAttributes">
            <expectedResult type="variable">attributesPosition</expectedResult>
            <actualResult type="variable">moreInformationPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertReviewsBelowMoreInformation">
            <expectedResult type="variable">moreInformationPosition</expectedResult>
            <actualResult type="variable">reviewsPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertRelatedBelowReviews">
            <expectedResult type="variable">reviewsPosition</expectedResult>
            <actualResult type="variable">relatedPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertUpsellBelowRelated">
            <expectedResult type="variable">relatedPosition</expectedResult>
            <actualResult type="variable">upsellPosition</actualResult>
        </assertGreaterThan>
    </test>
    <test name="PageBuilderCatalogProductRowCanAddAdditionalRowOnProduct">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Add additional row in Product"/>
            <description value="A user should be able to add additional rows into Page Builder when used on a product."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3101"/>
            <testCaseId value="MC-3220"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowGeneral"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Drag a new row to the stage -->
        <comment userInput="Drag a new row to the stage" stepKey="commentDragRow"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragAdditionalRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Verify an additional row has been added to the stage -->
        <comment userInput="Verify an additional row has been added to the stage" stepKey="commentVerifyRow"/>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="seeNumberOfRows2"/>
        <!-- Save product and verify second row is persisted -->
        <comment userInput="Save product and verify second row is persisted" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <!-- Re-open Page Builder after save -->
        <comment userInput="Re-open Page Builder after save" stepKey="commentReopenPageBuilder"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="seeSavedNumberOfRows2"/>
    </test>
    <test name="PageBuilderCatalogProductAddAndEditRowColumnSlide">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Add and Edit Row, Column, and Slider to PageBuilder in Catalog Product Description"/>
            <description value="This test is intended to ensure that basic adding and editing of multiple content types work correctly in the Catalog Product area of PageBuilder."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13664"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add 2nd Row -->
        <comment userInput="Add 2nd Row" stepKey="commentAddRow"/>
        <actionGroup ref="dragContentTypeToDropZone" stepKey="dragRowToStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            <argument name="dropZoneIndex" value="2"/>
        </actionGroup>
        <!-- Edit 2nd Row -->
        <comment userInput="Edit 2nd Row" stepKey="commentEditRow"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForRow2">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorRow">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForRow"/>
        <!-- Add Column to 2nd Row -->
        <comment userInput="Add Column to 2nd Row" stepKey="commentAddColumn"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragColumnToRow2">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Edit Column -->
        <comment userInput="Edit Column" stepKey="commentEditColumn"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForColumn2">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorColumn">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForColumn"/>
        <!-- Add Slider to 2nd Column -->
        <comment userInput="Add Slider to 2nd Column" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragSliderToColumn2">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Edit Slide Item -->
        <comment userInput="Edit Slide Item" stepKey="commentEditSlide"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForSlide">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorSlide1">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForSlide"/>
        <!-- Add Slide 2 -->
        <comment userInput="Add Slide 2" stepKey="commentAddSlide"/>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="add2ndSlide">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <!-- Edit Slide 2 -->
        <comment userInput="Edit Slide 2" stepKey="commentEditSlide2"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForSlide2">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorSlide2">
            <argument name="property" value="PageBuilderBackgroundColor_RGB_Blue"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForSlide2"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="see2RowsStage"/>
        <seeElement selector="{{RowOnStage.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStage"/>
        <seeNumberOfElements selector="{{ColumnOnBackend.allColumns}}" userInput="2" stepKey="see2ColumnsStage"/>
        <seeElement selector="{{ColumnOnBackend.backgroundColor('2', PageBuilderBackgroundColor_Hex_White.rgb)}}" stepKey="seeBackgroundColorColumnStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundColor('2', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeBackgroundColorSlide2Stage"/>
        <actionGroup ref="switchSlide" stepKey="switchSlideStage">
            <argument name="slideIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlide1Stage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="see2RowsStageAfterSave"/>
        <seeElement selector="{{RowOnStage.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStageAfterSave"/>
        <seeNumberOfElements selector="{{ColumnOnBackend.allColumns}}" userInput="2" stepKey="see2ColumnsStageAfterSave"/>
        <seeElement selector="{{ColumnOnBackend.backgroundColor('2', PageBuilderBackgroundColor_Hex_White.rgb)}}" stepKey="seeBackgroundColorColumnStageAfterSave"/>
        <seeElement selector="{{SlideOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlide1StageAfterSave"/>
        <actionGroup ref="switchSlide" stepKey="switchSlideStageAfterSave">
            <argument name="slideIndex" value="2"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.backgroundColor('2', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeBackgroundColorSlide2StageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{RowOnStorefront.allRows}}" userInput="2" stepKey="see2RowsStorefront"/>
        <seeElement selector="{{RowOnStorefront.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStorefront"/>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="2" stepKey="see2ColumnsStorefront"/>
        <seeElement selector="{{ColumnOnFrontend.backgroundColor('2', PageBuilderBackgroundColor_Hex_White.rgb)}}" stepKey="seeBackgroundColorColumnStorefront"/>
        <seeElement selector="{{SlideOnFrontend.backgroundColor('2', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlide1Storefront"/>
        <actionGroup ref="switchSlide" stepKey="switchSlideStorefront">
            <argument name="sliderSection" value="SliderOnFrontend"/>
            <argument name="slideSection" value="SlideOnFrontend"/>
            <argument name="slideIndex" value="2"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.backgroundColor('3', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeBackgroundColorSlide2Storefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanMoveContentTypesFromOnHoverOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Move Content Types From On-Hover Option Menus"/>
            <description value="This test is intended to ensure that users can move content types from the on-hover option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13665"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-heading"/>
            <group value="pagebuilder-divider"/>
            <group value="pagebuilder-move"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragColumnToRow">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Add Heading to Column 2 -->
        <comment userInput="Add Heading to Column 2" stepKey="commentAddHeadingToColumn2"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingToColumn2">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Add Divider to Column 2 -->
        <comment userInput="Add Divider to Column 2" stepKey="commentAddDividerToColumn2"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionElements">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerToColumn2">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateHeadingPosition">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateDividerPosition">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="positionInContainer" value="2"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Move Divider -->
        <comment userInput="Move Divider" stepKey="commentMoveDivider"/>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveDividerToColumn1">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validate Stage After Move -->
        <comment userInput="Validate Stage After Move" stepKey="commentValidateStageAfterMove"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateHeadingPositionAfterMove">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateDividerPositionAfterMove">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateHeadingPositionAfterSave">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateDividerPositionAfterSave">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <actionGroup ref="validateContentTypeInsideContainerStorefront" stepKey="validateHeadingPositionStorefront">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefront" stepKey="validateDividerPositionStorefront">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanEditContentTypesFromOnHoverOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Edit Content Types From On-Hover Option Menus"/>
            <description value="This test is intended to ensure that users can edit content types from the on-hover option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13666"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-edit"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Row -->
        <comment userInput="Edit Row" stepKey="commentEditRow"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorRow">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForRow"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{RowOnStage.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeElement selector="{{RowOnStage.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStageAfterSave"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanelAfterSave"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForRowAfterSave">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundColorOnEditPanel">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeElement selector="{{RowOnStorefront.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRowStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanDuplicateContentTypesFromOnHoverOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Duplicate Content Types From On-Hover Option Menus"/>
            <description value="This test is intended to ensure that users can duplicate content types from the on-hover option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13667"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-duplicate"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Row -->
        <comment userInput="Edit Row" stepKey="commentEditRow"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorRow">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForRow"/>
        <!-- Duplicate and Validate Stage -->
        <comment userInput="Duplicate and Validate Stage" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="see2RowsStage"/>
        <seeElement selector="{{RowOnStage.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow1Stage"/>
        <seeElement selector="{{RowOnStage.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow2Stage"/>
        <!-- Validate Edit Panel For Duplicate -->
        <comment userInput="Validate Edit Panel For Duplicate" stepKey="commentValidateEdit"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForRow2">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundColorOnEditPanel">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeNumberOfElements selector="{{RowOnStage.allRows}}" userInput="2" stepKey="see2RowsStageAfterSave"/>
        <seeElement selector="{{RowOnStage.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow1StageAfterSave"/>
        <seeElement selector="{{RowOnStage.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow2StageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{RowOnStorefront.allRows}}" userInput="2" stepKey="see2RowsStorefront"/>
        <seeElement selector="{{RowOnStorefront.backgroundColor('1', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow1Storefront"/>
        <seeElement selector="{{RowOnStorefront.backgroundColor('2', PageBuilderBackgroundColor_Hex_Grey.rgb)}}" stepKey="seeBackgroundColorRow2Storefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanDeleteContentTypesFromOnHoverOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Delete Content Types From On-Hover Option Menus"/>
            <description value="This test is intended to ensure that users can delete content types from the on-hover option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13668"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-divider"/>
            <group value="pagebuilder-delete"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Divider to Row -->
        <comment userInput="Add Divider to Row" stepKey="commentAddDividerToRow"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionElements">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerToRow">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <seeElement selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderDividerContentType.role, '1')}}" stepKey="seeDividerInStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Delete Divider -->
        <comment userInput="Delete Divider" stepKey="commentDeleteDivider"/>
        <actionGroup ref="removeContentTypeFromStage" stepKey="removeContentTypeFromStage">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <dontSeeElementInDOM selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderDividerContentType.role, '1')}}" stepKey="dontSeeDividerInStage"/>
        <!-- Save Product After Delete -->
        <comment userInput="Save Product After Delete" stepKey="commentSaveProductAfterDelete"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenAfterDelete"/>
        <actionGroup ref="saveProductForm" stepKey="saveProductAfterDelete"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProductAfterDelete"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSectionAfterDelete"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescriptionAfterDelete"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <dontSeeElementInDOM selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderDividerContentType.role, '1')}}" stepKey="dontSeeDividerInStageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <dontSeeElementInDOM selector="{{DividerOnStorefront.allDividers}}" stepKey="dontSeeDividerInStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanAddChildContentTypesFromOnHoverOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Add Child Content Types From On-Hover Option Menus"/>
            <description value="This test is intended to ensure that users can add child content types from the on-hover option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13669"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-buttons"/>
            <group value="pagebuilder-add"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragButtonsToRow">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="1" stepKey="see1ButtonItemStage"/>
        <!-- Add 2nd Button -->
        <comment userInput="Add 2nd Button" stepKey="commentAddSecondButton"/>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonItemsStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanEditContentTypesFromOnClickOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Edit Content Types From On-Click Option Menus"/>
            <description value="This test is intended to ensure that users can edit content types from the on-click option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13670"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-edit"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragSliderToRow">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Edit Slide Item -->
        <comment userInput="Edit Slide Item" stepKey="commentEditSlide"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForSlide">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColorSlide1">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForSlide"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlideStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeElement selector="{{SlideOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlideStageAfterSave"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanelAfterSave"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForSlideAfterSave">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutPropertyAlternate" stepKey="seeBackgroundColorOnEditPanel">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeElement selector="{{SlideOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorSlideStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanDuplicateContentTypesFromOnClickOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Duplicate Content Types From On-Click Option Menus"/>
            <description value="This test is intended to ensure that users can duplicate content types from the on-click option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13671"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-buttons"/>
            <group value="pagebuilder-duplicate"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragButtonsToRow">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Edit Button Item -->
        <comment userInput="Edit Button Item" stepKey="commentEditButtonItem"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="fillButtonTextField">
            <argument name="property" value="PageBuilderButtonItemText_Common"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForButtonItem"/>
        <!-- Duplicate and Validate Stage -->
        <comment userInput="Duplicate and Validate Stage" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateSmallContentType" stepKey="duplicateButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStage"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('1', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton1TextStage"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('2', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton2TextStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStageAfterSave"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('1', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton1TextStageAfterSave"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('2', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton2TextStageAfterSave"/>
        <!-- Validate Edit Panel For Duplicate -->
        <comment userInput="Validate Edit Panel For Duplicate" stepKey="commentValidateEdit"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForButtonItem2">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeButtonTextOnEditPanel">
            <argument name="property" value="PageBuilderButtonItemText_Common"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonItemsStorefront"/>
        <seeElement selector="{{ButtonItemOnStorefrontEmptyLink.buttonItemText('1', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton1TextStorefront"/>
        <seeElement selector="{{ButtonItemOnStorefrontEmptyLink.buttonItemText('2', PageBuilderButtonItemText_Common.value)}}" stepKey="seeButton2TextStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanDeleteContentTypesFromOnClickOptionMenus">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Delete Content Types From On-Click Option Menus"/>
            <description value="This test is intended to ensure that users can delete content types from the on-click option menus within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13672"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-buttons"/>
            <group value="pagebuilder-delete"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragButtonsToRow">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Duplicate Button Item -->
        <comment userInput="Duplicate Button Item" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateSmallContentType" stepKey="duplicateButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Delete Button Item -->
        <comment userInput="Delete Button Item" stepKey="commentDeleteButtonItem"/>
        <actionGroup ref="removeContentTypeFromStageSmallByIndex" stepKey="removeButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="confirmRemovalModal" stepKey="confirmRemovalModal"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="1" stepKey="see1ButtonItemStage"/>
        <!-- Save Product After Delete -->
        <comment userInput="Save Product After Delete" stepKey="commentSaveProductAfterDelete"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenAfterDelete"/>
        <actionGroup ref="saveProductForm" stepKey="saveProductAfterDelete"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProductAfterDelete"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSectionAfterDelete"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescriptionAfterDelete"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="1" stepKey="see1ButtonItemStageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="1" stepKey="see1ButtonItemStorefront"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanMoveButtonItems" extends="ButtonItemMoveButtonStackedAppearance">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Move Button Items"/>
            <description value="This test is intended to ensure that users can move button items within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13673"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-buttons"/>
            <group value="pagebuilder-move"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" before="createProduct" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" before="loginAsAdmin" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToAPageWithPageBuilder">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="openPageBuilderForAttribute" after="switchToPageBuilderStage" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" before="deleteCreatedCategory" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" before="NavigateToAndResetProductGridToDefaultView" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" before="logout" stepKey="NavigateToAndResetProductGridToDefaultView"/>
        </after>
        <comment userInput="---merging to remove step---" stepKey="enterPageTitle"/>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings1"/>
        <comment userInput="Save Product" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="saveProductForm" after="switchToPageBuilderStage" stepKey="saveProduct"/>
        <waitForPageLoad after="saveProduct" stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" after="waitForPageLoadSaveProduct" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" after="expandAdminProductSection" stepKey="openPageBuilderForDescription"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" after="navigateToStoreFront" stepKey="scrollToProductDescription"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanMoveSlideItems" extends="SlideItemMoveSlideItemsToRearrange">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Move Slide Items"/>
            <description value="This test is intended to ensure that users can move slide items within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13674"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-move"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" before="createProduct" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" before="loginAsAdmin" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToAPageWithPageBuilder">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="openPageBuilderForAttribute" after="switchToPageBuilderStage" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" before="deleteCreatedCategory" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" before="NavigateToAndResetProductGridToDefaultView" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" before="logout" stepKey="NavigateToAndResetProductGridToDefaultView"/>
        </after>
        <comment userInput="---merging to remove step---" stepKey="enterPageTitle"/>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanel1Settings"/>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanel1Settings2"/>
        <comment userInput="Save Product" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="switchToPageBuilderStage1"/>
        <actionGroup ref="saveProductForm" after="switchToPageBuilderStage1" stepKey="saveProduct"/>
        <waitForPageLoad after="saveProduct" stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" after="waitForPageLoadSaveProduct" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" after="expandAdminProductSection" stepKey="openPageBuilderForDescription"/>
        <comment userInput="Save Product" stepKey="saveAndContinueEditCmsPage1"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="saveProductForm" after="switchToPageBuilderStage2" stepKey="saveProduct2"/>
        <waitForPageLoad after="saveProduct2" stepKey="waitForPageLoadSaveProduct2"/>
        <actionGroup ref="expandAdminProductSection" after="waitForPageLoadSaveProduct2" stepKey="expandAdminProductSection2"/>
        <actionGroup ref="openPageBuilderForAttribute" after="expandAdminProductSection2" stepKey="openPageBuilderForDescription2"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" after="navigateToStoreFront" stepKey="scrollToProductDescription"/>
    </test>
    <test name="PageBuilderCatalogProductVerifyCanMoveTabItems" extends="TabsRearrangeTabItems">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That User Can Move Tab Items"/>
            <description value="This test is intended to ensure that users can move tab items within the PageBuilder stage for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13675"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-tab"/>
            <group value="pagebuilder-move"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" before="createProduct" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" before="loginAsAdmin" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToAPageWithPageBuilder">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="openPageBuilderForAttribute" after="switchToPageBuilderStage" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" before="deleteCreatedCategory" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" before="NavigateToAndResetProductGridToDefaultView" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" before="logout" stepKey="NavigateToAndResetProductGridToDefaultView"/>
        </after>
        <comment userInput="---merging to remove step---" stepKey="enterPageTitle"/>
        <comment userInput="Save Product" stepKey="commentSavePage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="saveProductForm" stepKey="switchToPageBuilderStage"/>
        <waitForPageLoad after="switchToPageBuilderStage" stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" after="waitForPageLoadSaveProduct" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" after="expandAdminProductSection" stepKey="openPageBuilderForDescription"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" after="navigateToStoreFront" stepKey="scrollToProductDescription"/>
    </test>
    <test name="PageBuilderCatalogProductFullScreenCoversEntireScreen" extends="PageBuilderFullScreenCoversEntireScreen">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify That Full-Screen Mode Covers Entire Screen"/>
            <description value="This test is to ensure that the PageBuilder full-screen mode covers the entire screen when opened for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13676"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-fullScreen"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" before="createProduct" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" before="loginAsAdmin" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToAPageWithPageBuilder">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="openPageBuilderForAttribute" after="switchToPageBuilderStage" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" before="deleteCreatedCategory" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" before="NavigateToAndResetProductGridToDefaultView" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" before="logout" stepKey="NavigateToAndResetProductGridToDefaultView"/>
        </after>
        <comment userInput="---merging to remove step---" stepKey="openPageBuilderFullScreen"/>
    </test>
    <test name="PageBuilderCatalogProductFullScreenLeftPanelHeightAndFunctionality" extends="PageBuilderFullScreenLeftPanelHeightAndFunctionality">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Left Panel Is Full-Height and Works In Full-Screen Mode"/>
            <description value="This test is to ensure that the PageBuilder left panel works and grows to span the full height of the viewport in full-screen mode when opened for Product Description."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13677"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-fullScreen"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" before="createProduct" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" before="loginAsAdmin" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToAPageWithPageBuilder">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="openPageBuilderForAttribute" after="switchToPageBuilderStage" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" before="deleteCreatedCategory" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" before="NavigateToAndResetProductGridToDefaultView" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" before="logout" stepKey="NavigateToAndResetProductGridToDefaultView"/>
        </after>
        <comment userInput="---merging to remove step---" stepKey="openPageBuilderFullScreen"/>
    </test>
    <test name="PageBuilderWorksForEachCatalogProductAttribute">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="PageBuilder Works For Each Product Attribute"/>
            <description value="This test is to ensure that the PageBuilder works for Catalog Product Description, Short Description, and Custom Attributes."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3329"/>
            <testCaseId value="MC-13680"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-fullScreen"/>
            <group value="pagebuilder-productAttribute"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="productAttributeWysiwyg" stepKey="createProductAttribute"/>
            <createData entity="AddToDefaultSetTopOfContentSection" stepKey="addAttributeToDefaultAttributeSet">
                <requiredEntity createDataKey="createProductAttribute"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createProductAttribute"/>
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToCreatedProductAttribute">
                <argument name="ProductAttribute" value="$$createProductAttribute$$"/>
            </actionGroup>
            <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder1"/>
            <actionGroup ref="saveProductAttribute" stepKey="saveCustomAttribute"/>
            <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToShortDescriptionProductAttribute">
                <argument name="ProductAttribute" value="ProductShortDescription"/>
            </actionGroup>
            <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder2"/>
            <actionGroup ref="saveProductAttribute" stepKey="saveShortDescriptionAttribute"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="setLayout" stepKey="setFullWidthLayout">
                <argument name="designSection" value="ProductDesignSection"/>
                <argument name="layoutOption" value="PageBuilderFullWidthLayout.product"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <deleteData createDataKey="createProductAttribute" stepKey="deleteProductAttribute"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="navigateToCreatedProductAttribute" stepKey="navigateToShortDescriptionProductAttribute">
                <argument name="ProductAttribute" value="ProductShortDescription"/>
            </actionGroup>
            <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Text Editor" stepKey="selectPageBuilder"/>
            <actionGroup ref="confirmChangeInputTypeModal" stepKey="confirmChangeInputTypeModal"/>
            <actionGroup ref="saveProductAttribute" stepKey="saveShortDescriptionAttribute"/>
            <actionGroup ref="NavigateToAndResetProductAttributeGridToDefaultView" stepKey="NavigateToAndResetProductAttributeGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Product Custom Attribute -->
        <comment userInput="Edit Product Custom Attribute" stepKey="commentEditProductCustomAttribute"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForCustomAttribute">
            <argument name="attributeCode" value="$$createProductAttribute.attribute_code$$"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createProductAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelMenuSectionHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createProductAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoRow">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createProductAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createProductAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="enterHeadingTypePropertyH1">
            <argument name="property" value="PageBuilderHeadingTypeProperty_H1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForHeading"/>
        <!-- Validate Product Custom Attribute Stage -->
        <comment userInput="Validate Product Custom Attribute Stage" stepKey="commentValidateCustomAttributeStage"/>
        <seeElement selector="{{HeadingOnStage.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleStage"/>
        <seeElement selector="{{HeadingOnStage.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextStage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenCustomAttribute"/>
        <!-- Edit Product Description -->
        <comment userInput="Edit Product Description" stepKey="commentEditProductDescription"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription">
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelMenuSectionButtons">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragButtonsToRow">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <!-- Edit Button Item -->
        <comment userInput="Edit Button Item" stepKey="commentEditButtonItem"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuForButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="fillButtonTextField">
            <argument name="property" value="PageBuilderButtonItemText_First"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForButtonItem"/>
        <!-- Add 2nd Button -->
        <comment userInput="Add 2nd Button" stepKey="commentAddSecondButton"/>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <actionGroup ref="inlineEditButton" stepKey="inlineEditButton2">
            <argument name="text" value="PageBuilderButtonItemText_Second"/>
            <argument name="index" value="2"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <!-- Validate Product Description Stage -->
        <comment userInput="Validate Product Description Stage" stepKey="commentValidateProductDescriptionStage"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStage"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('1', PageBuilderButtonItemText_First.value)}}" stepKey="seeButton1TextStage"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('2', PageBuilderButtonItemText_Second.value)}}" stepKey="seeButton2TextStage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenDescription"/>
        <!-- Edit Product Short Description -->
        <comment userInput="Edit Product Short Description" stepKey="commentEditProductShortDescription"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForShortDescription">
            <argument name="attributeCode" value="short_description"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('short_description')}}"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelMenuSectionDivider">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('short_description')}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerIntoRow">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="3"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('short_description')}}"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuForDivider">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterDividerLineColor">
            <argument name="property" value="PageBuilderDividerLineColor_FF5733"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForDivider"/>
        <!-- Validate Product Short Description Stage -->
        <comment userInput="Validate Product Short Description Stage" stepKey="commentValidateShortProductDescriptionStage"/>
        <seeElement selector="{{DividerOnStage.color('1', PageBuilderDividerLineColor_FF5733.rgb)}}" stepKey="seeDividerColorStage"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenShortDescription"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <!-- Validate Product Custom Attribute Stage After Save -->
        <comment userInput="Validate Product Custom Attribute Stage After Save" stepKey="commentValidateProductCustomAttributeStageAfterSave"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForCustomAttributeAfterSave">
            <argument name="attributeCode" value="$$createProductAttribute.attribute_code$$"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createProductAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <seeElement selector="{{HeadingOnStage.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleStageAfterSave"/>
        <seeElement selector="{{HeadingOnStage.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextStageAfterSave"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenCustomAttributeAfterSave"/>
        <!-- Validate Product Description Stage After Save -->
        <comment userInput="Validate Product Description Stage After Save" stepKey="commentValidateProductDescriptionStageAfterSave"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescriptionAfterSave">
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonItemsStageAfterSave"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('1', PageBuilderButtonItemText_First.value)}}" stepKey="seeButton1TextStageAfterSave"/>
        <seeElement selector="{{ButtonItemOnStage.buttonItemText('2', PageBuilderButtonItemText_Second.value)}}" stepKey="seeButton2TextStageAfterSave"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenDescriptionAfterSave"/>
        <!-- Validate Product Short Description Stage After Save -->
        <comment userInput="Validate Product Short Description Stage After Save" stepKey="commentValidateProductShortDescriptionStageAfterSave"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForShortDescriptionAfterSave">
            <argument name="attributeCode" value="short_description"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('short_description')}}"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStage.color('1', PageBuilderDividerLineColor_FF5733.rgb)}}" stepKey="seeDividerColorStageAfterSave"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreenShortDescriptionAfterSave"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <!-- Validate Storefront: Product Description -->
        <comment userInput="Validate Storefront: Product Description" stepKey="commentValidateStorefrontProductDescription"/>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonItemsStorefront"/>
        <seeElement selector="{{ButtonItemOnStorefrontEmptyLink.buttonItemText('1', PageBuilderButtonItemText_First.value)}}" stepKey="seeButton1TextStorefront"/>
        <seeElement selector="{{ButtonItemOnStorefrontEmptyLink.buttonItemText('2', PageBuilderButtonItemText_Second.value)}}" stepKey="seeButton2TextStorefront"/>
        <!-- Validate Storefront: Product Short Description -->
        <comment userInput="Validate Storefront: Product Short Description" stepKey="commentValidateStorefrontProductShortDescription"/>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productShortDescription}}" stepKey="scrollToProductShortDescription"/>
        <seeElement selector="{{DividerOnStorefront.color('1', PageBuilderDividerLineColor_FF5733.rgb)}}" stepKey="seeDividerColorStorefront"/>
        <!-- Validate Storefront: Product Custom Attribute -->
        <comment userInput="Validate Storefront: Product Custom Attribute" stepKey="commentValidateStorefrontProductCustomAttribute"/>
        <scrollTo selector="{{PageBuilderProductStorefront.attributeSectionHeading('1', $$createProductAttribute.attribute[frontend_labels][0][label]$$)}}" stepKey="scrollToProductCustomAttribute"/>
        <seeElement selector="{{HeadingOnStorefront.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleStorefront"/>
        <seeElement selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextStorefront"/>
    </test>
    <test name="HtmlAddToCatalogProduct">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="HTML code add to catalog product"/>
            <description value="Verify adding HTML code to catalog product is rendered correctly"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-14970"/>
            <testCaseId value="MC-14976"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-html"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
            <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteCreatedProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="NavigateToAndResetProductGridToDefaultView" stepKey="NavigateToAndResetProductGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionMedia">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHtmlIntoStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <!-- Update Edit Panel -->
        <comment userInput="Update Edit Panel" stepKey="commentEdit"/>
        <actionGroup ref="fillSlideOutPanelTextArea" stepKey="enterHtmlContent">
            <argument name="property" value="PageBuilderHtmlPropertyButton"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditFormForSlide"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{HtmlOnStage.base('1')}}" stepKey="waitForHtmlBaseStage"/>
        <seeElement selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlOnStage"/>
        <!-- Save Product -->
        <comment userInput="Save Product" stepKey="commentSaveProduct"/>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen"/>
        <actionGroup ref="saveProductForm" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <actionGroup ref="expandAdminProductSection" stepKey="expandAdminProductSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <waitForElementVisible selector="{{HtmlOnStage.base('1')}}" stepKey="waitForHtmlBaseStageAfterSave"/>
        <seeElement selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlOnStageAfterSave"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createProduct.name$$.html"/>
        </actionGroup>
        <scrollTo selector="{{StorefrontProductInfoMainSection.productDescription}}" stepKey="scrollToProductDescription"/>
        <waitForElementVisible selector="{{HtmlOnStorefront.base('1')}}" stepKey="waitForHtmlBaseStageStorefront"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="seeHtmlOnStorefront"/>
    </test>
</tests>
