<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="PageBuilderCatalogProductStorefrontPageBuilderFullWidthProductsContentsAreOrderedCorrectlyTest" deprecated="Use PageBuilderCatalogProductVerifyProductFullWidthLayoutTest instead.">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Catalog product storefront page should be ordered correctly"/>
            <description value="Catalog product storefront detail page should be ordered correctly"/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-5450"/>
            <testCaseId value="MC-5477"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
            <skip>
                <issueId value="DEPRECATED">Use PageBuilderCatalogProductVerifyProductFullWidthLayoutTest instead.</issueId>
            </skip>
            <group value="pr_exclude"/>
        </annotations>
        <before>
            <createData stepKey="createPageBuilderAttribute" entity="productAttributeWysiwyg"/>
            <createData stepKey="addToDefaultSetSortOrder" entity="AddToDefaultSetSortOrder1">
                <requiredEntity createDataKey="createPageBuilderAttribute"/>
            </createData>
            <createData stepKey="createTextAttribute" entity="productAttributeText"/>
            <createData stepKey="addToDefaultSetSortOrder1" entity="AddToDefaultSetSortOrder1">
                <requiredEntity createDataKey="createTextAttribute"/>
            </createData>
            <createData stepKey="createPreReqCategory" entity="_defaultCategory"/>
            <createData stepKey="relatedSimpleProduct" entity="SimpleProduct2"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <actionGroup ref="DeleteProductBySkuActionGroup" stepKey="deleteProduct">
                <argument name="sku" value="{{_defaultProduct.sku}}"/>
            </actionGroup>
            <actionGroup ref="ResetAdminDataGridToDefaultViewActionGroup" stepKey="clearFilter"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <deleteData createDataKey="createPageBuilderAttribute" stepKey="deleteAttribute1"/>
            <deleteData createDataKey="createTextAttribute" stepKey="deleteAttribute2"/>
            <deleteData createDataKey="relatedSimpleProduct" stepKey="deleteRelatedProduct"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>
        <!-- Update created attribute to enable Page Builder -->
        <comment userInput="Update created attribute to enable Page Builder" stepKey="commentUpdateAttribute"/>
        <actionGroup ref="NavigateToCreatedProductAttributeActionGroup" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$createPageBuilderAttribute$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AttributePropertiesSection.InputType}}" stepKey="waitForInputType"/>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder"/>
        <click selector="{{AttributePropertiesSection.Save}}" stepKey="saveAttribute"/>
        <waitForPageLoad stepKey="waitForAttributeSave"/>
        <actionGroup ref="FillAdminSimpleProductFormActionGroup" stepKey="fillProductFieldsInAdmin">
            <argument name="category" value="$$createPreReqCategory$$"/>
            <argument name="simpleProduct" value="_defaultProduct"/>
        </actionGroup>
        <!-- Set background colour of row for our first custom attribute -->
        <comment userInput="Set background colour of row for our first custom attribute" stepKey="commentSetBackgroundColor"/>
        <scrollToTopOfPage stepKey="scrollToTopOfPage"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForAttribute1">
            <argument name="attributeCode" value="$$createPageBuilderAttribute.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_HSV_Orange"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen"/>
        <!-- Save product after custom attribute -->
        <comment userInput="Save product after custom attribute" stepKey="saveProductAfterCustomAttribute"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProductAfterAttribute"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProductAfterAttribute"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccessAfterAttribute"/>
        <!-- Add PageBuilder description -->
        <comment userInput="Add PageBuilder description" stepKey="commentAddDescription"/>
        <conditionalClick selector="{{AdminProductContentSection.sectionHeader}}" dependentSelector="{{AdminProductContentSection.sectionHeaderIfNotShowing}}" visible="false" stepKey="openContentSection"/>
        <waitForPageLoad stepKey="waitForPageLoadContentSection"/>
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription">
            <argument name="attributeCode" value="description"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragRowToRootContainerDescription">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <!-- Set background color of row -->
        <comment userInput="Set background color of row" stepKey="commentSetRowBackgroundColor"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor1">
            <argument name="property" value="PageBuilderBackgroundColorProperty_3C3C3C"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettingsFullScreen" stepKey="saveEditPanelSettings1"/>
        <click selector="{{PageBuilderStage.exitFullScreen}}" stepKey="exitPageBuilderFullScreen1"/>
        <waitForPageLoad stepKey="waitForPageLoadExitFullScreen1"/>
        <!-- Update new text attribute, to be shown in More Information -->
        <comment userInput="Update new text attribute, to be shown in More Information" stepKey="commentTextAttribute"/>
        <waitForElementVisible selector="{{PageBuilderProductAttribute.attributeTextInput($$createTextAttribute.attribute_code$$)}}" stepKey="waitForTextInput"/>
        <fillField selector="{{PageBuilderProductAttribute.attributeTextInput($$createTextAttribute.attribute_code$$)}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillCustomContentTextarea"/>
        <!-- Add our related product -->
        <comment userInput="Add our related product" stepKey="commentAddRelatedProduct"/>
        <actionGroup ref="AddRelatedProductBySkuActionGroup" stepKey="addRelatedProduct">
            <argument name="sku" value="$$relatedSimpleProduct.sku$$"/>
        </actionGroup>
        <!-- Add our up-sell product -->
        <comment userInput="Add our up-sell product" stepKey="commentAddUpSellProduct"/>
        <actionGroup ref="AddUpSellProductBySkuActionGroup" stepKey="addUpSellProduct">
            <argument name="sku" value="$$relatedSimpleProduct.sku$$"/>
        </actionGroup>
        <!-- Use Full Width layout -->
        <comment userInput="Set Layout to Product - Full Width" stepKey="commentSetLayout"/>
        <actionGroup ref="SetLayoutActionGroup" stepKey="setFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.product"/>
        </actionGroup>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForPageLoadSaveProduct"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" stepKey="assertSaveMessageSuccess"/>
        <!-- Check that description is full width -->
        <comment userInput="Check that description is full width" stepKey="commentSeeDescriptionFullWidth"/>
        <amOnPage url="{{_defaultProduct.urlKey}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoadProductPage"/>
        <!-- Verify all sections exist on page -->
        <comment userInput="Verify all sections exist on page" stepKey="commentVerifySectionsOnPage"/>
        <seeElement selector="{{StorefrontProductFullWidth.infoMain}}" stepKey="seeInfoMain"/>
        <seeElement selector="{{StorefrontProductFullWidth.media}}" stepKey="seeMedia"/>
        <seeElement selector="{{StorefrontProductFullWidth.description}}" stepKey="seeDescription"/>
        <seeElement selector="{{StorefrontProductFullWidth.attributes}}" stepKey="seeAttributes"/>
        <seeElement selector="{{StorefrontProductFullWidth.moreInformation}}" stepKey="seeMoreInformation"/>
        <seeElement selector="{{StorefrontProductFullWidth.reviews}}" stepKey="seeReviews"/>
        <seeElement selector="{{StorefrontProductFullWidth.related}}" stepKey="seeRelated"/>
        <seeElement selector="{{StorefrontProductFullWidth.upsell}}" stepKey="seeUpsell"/>
        <!-- Assert sections on page are in correct order -->
        <comment userInput="Assert sections on page are in correct order" stepKey="commentAssertOrder"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.infoMain}}')[0].getBoundingClientRect().y" stepKey="infoMainPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.media}}')[0].getBoundingClientRect().y" stepKey="mediaPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.description}}')[0].getBoundingClientRect().y" stepKey="descriptionPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.attributes}}')[0].getBoundingClientRect().y" stepKey="attributesPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.moreInformation}}')[0].getBoundingClientRect().y" stepKey="moreInformationPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.reviews}}')[0].getBoundingClientRect().y" stepKey="reviewsPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.related}}')[0].getBoundingClientRect().y" stepKey="relatedPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.upsell}}')[0].getBoundingClientRect().y" stepKey="upsellPosition"/>
        <assertEquals stepKey="assertInfoMainAndMediaPosition">
            <expectedResult type="variable">infoMainPosition</expectedResult>
            <actualResult type="variable">mediaPosition</actualResult>
        </assertEquals>
        <assertGreaterThan stepKey="assertDescriptionBelowInfoMain">
            <expectedResult type="variable">infoMainPosition</expectedResult>
            <actualResult type="variable">descriptionPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertAttributesBelowDescription">
            <expectedResult type="variable">descriptionPosition</expectedResult>
            <actualResult type="variable">attributesPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertMoreInformationBelowAttributes">
            <expectedResult type="variable">attributesPosition</expectedResult>
            <actualResult type="variable">moreInformationPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertReviewsBelowMoreInformation">
            <expectedResult type="variable">moreInformationPosition</expectedResult>
            <actualResult type="variable">reviewsPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertRelatedBelowReviews">
            <expectedResult type="variable">reviewsPosition</expectedResult>
            <actualResult type="variable">relatedPosition</actualResult>
        </assertGreaterThan>
        <assertGreaterThan stepKey="assertUpsellBelowRelated">
            <expectedResult type="variable">relatedPosition</expectedResult>
            <actualResult type="variable">upsellPosition</actualResult>
        </assertGreaterThan>
    </test>
</tests>
