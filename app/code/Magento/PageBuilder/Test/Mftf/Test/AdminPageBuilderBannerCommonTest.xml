<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="BannerCanAddBannerTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="User can add and edit banner"/>
            <description value="A user should be able to add and edit banner"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83928"/>
            <testCaseId value="MC-2898"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <waitForElementVisible selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="waitForBannerVisible"/>
    </test>
    <test name="BannerEmptyBannerPreviewValidationTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate empty banner on preview"/>
            <description value="Validate contents and layout of empty banner on preview page."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-83928"/>
            <testCaseId value="MC-2718"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
            <closeTab stepKey="closeTab"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage: Poster -->
        <comment userInput="Validate Stage: Poster" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeEmptyBannerContent"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="waitForPoster"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlay"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonDefaultProperty.value)}}" stepKey="seeButtonStateStage"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayStateStage"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButton"/>
        <moveMouseOver selector="{{BannerOnBackend.base('1')}}" stepKey="moveMouseOverBanner"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seePosterOverlayOnHover"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonDefaultProperty.value)}}" stepKey="seeButtonStateStageOnHover"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayStateStageOnHover"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButtonOnHover"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Storefront: Poster -->
        <comment userInput="Validate Storefront: Poster" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="seeBannerInFrontend1"/>
        <seeElement selector="{{BannerOnFrontend.posterPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seePosterInFrontEnd"/>
        <dontSee userInput="{{PageBuilderBannerMessageDefaultProperty.placeholder}}" stepKey="dontSeePosterMessageInFrontend"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonInFrontend1"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayInFrontend1"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerFrontend1"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonOnHoverInFrontend1"/>
        <!-- Go back to cms page and change configuration to collage left -->
        <comment userInput="Go back to cms page and change configuration to collage left" stepKey="commentCollageLeft"/>
        <switchToPreviousTab stepKey="switchToPreviousTab"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageToEditPoster">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceCollageLeftProperty">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsCollageLeft"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPageWithCollageLeftBanner"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <!-- Validate Stage: Collage Left -->
        <comment userInput="Validate Stage: Collage Left" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeEmptyBannerContent2"/>
        <seeElement selector="{{BannerOnBackend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="waitForCollageLeft"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlay2"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButton1"/>
        <moveMouseOver selector="{{BannerOnBackend.base('1')}}" stepKey="moveMouseOverBanner1"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlayOnHover1"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonDefaultProperty.value)}}" stepKey="seeButtonStateStageOnHover1"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayStateStageOnHover1"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButtonOnHover1"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <reloadPage stepKey="reloadPage1"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <!-- Validate Storefront: Collage Left -->
        <comment userInput="Validate Storefront: Collage Left" stepKey="commentValidateStorefront2"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="seeBannerInFrontend2"/>
        <seeElement selector="{{BannerOnFrontend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seeCollageLeftInFrontEnd"/>
        <dontSee userInput="{{PageBuilderBannerMessageDefaultProperty.placeholder}}" stepKey="dontSeeCollageLeftMessageInFrontend"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonInFrontend2"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayInInFrontend2"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerFrontend2"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonOnHoverInFrontend2"/>
        <!-- Go back to cms page and change configuration to collage centered -->
        <comment userInput="Go back to cms page and change configuration to collage centered" stepKey="commentCollageCenter"/>
        <switchToPreviousTab stepKey="switchToPreviousTab2"/>
        <reloadPage stepKey="reloadPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage4"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageToEditCollageLeft">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceCollageCenteredProperty">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsCollageCentered"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPageWithCollageCenteredBanner"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage5"/>
        <!-- Validate Stage: Collage Center -->
        <comment userInput="Validate Stage: Collage Center" stepKey="commentValidateStage3"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeEmptyBannerContent3"/>
        <seeElement selector="{{BannerOnBackend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="waitForCollageCenter"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlay3"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButton3"/>
        <moveMouseOver selector="{{BannerOnBackend.base('1')}}" stepKey="moveMouseOverBanner2"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlayOnHover2"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonDefaultProperty.value)}}" stepKey="seeButtonStateStageOnHover2"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayStateStageOnHover2"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButtonOnHover2"/>
        <switchToNextTab stepKey="switchToNextTab2"/>
        <reloadPage stepKey="reloadPage3"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <!-- Validate Storefront: Collage Center -->
        <comment userInput="Validate Storefront: Collage Center" stepKey="commentValidateStorefront3"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="seeBannerInFrontend3"/>
        <seeElement selector="{{BannerOnFrontend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seeCollageCenterInFrontEnd"/>
        <dontSee userInput="{{PageBuilderBannerMessageDefaultProperty.placeholder}}" stepKey="dontSeeCollageCenterMessageInFrontend"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonInFrontend3"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayInFrontend3"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerFrontend3"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonOnHoverInFrontend3"/>
        <!-- Go back to cms page and change configuration to collage right -->
        <comment userInput="Go back to cms page and change configuration to collage right" stepKey="commentCollageRight"/>
        <switchToPreviousTab stepKey="switchToPreviousTab3"/>
        <reloadPage stepKey="reloadPage4"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage6"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageToEditCollageCentered">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceCollageRightProperty">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsCollageRight"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPageWithCollageRightBanner"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage7"/>
        <!-- Validate Stage: Collage Right -->
        <comment userInput="Validate Stage: Collage Right" stepKey="commentValidateStage4"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeEmptyBannerContent4"/>
        <seeElement selector="{{BannerOnBackend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="waitForCollageRight"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlay4"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButton4"/>
        <moveMouseOver selector="{{BannerOnBackend.base('1')}}" stepKey="moveMouseOverBanner3"/>
        <seeElement selector="{{BannerOnBackend.overlay('1')}}" stepKey="seeOverlayOnHover3"/>
        <seeElement selector="{{BannerOnBackend.showButton('1', PageBuilderBannerShowButtonDefaultProperty.value)}}" stepKey="seeButtonStateStageOnHover3"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayStateStageOnHover3"/>
        <dontSeeElement selector="{{BannerOnBackend.editableButtonItemElement('1')}}" stepKey="dontSeeButtonOnHover3"/>
        <switchToNextTab stepKey="switchToNextTab3"/>
        <reloadPage stepKey="reloadPage5"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>
        <!-- Validate Storefront: Collage Right -->
        <comment userInput="Validate Storefront: Collage Right" stepKey="commentValidateStorefront4"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="seeBannerInFrontend4"/>
        <seeElement selector="{{BannerOnFrontend.collagePadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seeCollageRightInFrontEnd"/>
        <dontSee userInput="{{PageBuilderBannerMessageDefaultProperty.placeholder}}" stepKey="dontSeeCollageRightMessageInFrontend"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonInFrontend4"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('1', PageBuilderBannerShowContentOverlayDefaultProperty.value)}}" stepKey="seeOverlayInFrontend4"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerFrontend4"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeInDOMButtonOnHoverInFrontend4"/>
    </test>
    <test name="BannerDeleteTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Delete Banner"/>
            <description value="A user should be able to delete a banner content type. Verify on Stage and Storefront."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-3239"/>
            <testCaseId value="MC-3367"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Banner and Save Page -->
        <comment userInput="Add Banner and Save Page" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Delete Banner -->
        <comment userInput="Delete Banner" stepKey="commentDeleteBanner"/>
        <actionGroup ref="removeContentTypeFromStage" stepKey="removeBanner">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <dontSeeElementInDOM selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderBannerContentType.role, '1')}}" stepKey="dontSeeContentTypeInStage"/>
        <!-- Save Page -->
        <comment userInput="Save Page" stepKey="commentSavePage"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <dontSeeElementInDOM selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderBannerContentType.role, '1')}}" stepKey="dontSeeContentTypeInStage2"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.base('1')}}" stepKey="dontSeeContentTypeInStorefront"/>
    </test>
    <test name="BannerHasNoRequiredTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner has  no required fields in edit form"/>
            <description value="Check there is no required fields in banner edit form"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-83928"/>
            <testCaseId value="MC-2626"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <dontSeeElement selector="{{EditPanelForm.editFormAllRequiredFields}}" stepKey="checkNoRequiredField"/>
    </test>
    <test name="BannerHasExpectedFieldsAndDefaultsTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner has the correct fields and default values in edit form"/>
            <description value="A user should see the correct fields and default values when edit button is clicked for banner"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-81599"/>
            <testCaseId value="MC-2664"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel Fields -->
        <comment userInput="Validate Edit Panel Fields" stepKey="commentValidateEditPanelFields"/>
        <actionGroup ref="validateVisualSelects" stepKey="validateAlignment">
            <argument name="property1" value="PageBuilderAppearance_Poster"/>
            <argument name="property2" value="PageBuilderAppearance_CollageLeft"/>
            <argument name="property3" value="PageBuilderAppearance_CollageRight"/>
            <argument name="property4" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMinimumHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_300px"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldHelperText" stepKey="validateHelperText">
            <argument name="property" value="PageBuilderMinHeightProperty_Empty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundColorProperty">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundImageProperty">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMobileImageProperty">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundPositionProperty">
            <argument name="property" value="PageBuilderBackgroundPosition_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundSizeProperty">
            <argument name="property" value="PageBuilderBackgroundSize_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundRepeatProperty">
            <argument name="property" value="PageBuilderBackgroundRepeat_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBackgroundAttachmentProperty">
            <argument name="property" value="PageBuilderBackgroundAttachment_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMessageProperty">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeButtonTextProperty">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeButtonLinkProperty">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
        </actionGroup>
        <actionGroup ref="seeSlideOutPanelFieldNotOpenInNewTab" stepKey="seeOpenInNewTabProperty">
            <argument name="property" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeButtonTypeProperty">
            <argument name="property" value="PageBuilderBannerButtonTypePrimaryProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeShowButtonProperty">
            <argument name="property" value="PageBuilderBannerShowButtonDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeShowOverlayProperty">
            <argument name="property" value="PageBuilderBannerShowContentOverlayDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeOverlayColorProperty">
            <argument name="property" value="PageBuilderBannerContentOverlayColorProperty"/>
        </actionGroup>
        <!-- Validate Edit Panel Defaults -->
        <comment userInput="Validate Edit Panel Defaults" stepKey="commentValidateEditPanelDefaults"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeDefaultMinimumHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_300px"/>
        </actionGroup>
        <grabMultiple selector="{{EditPanelForm.panelFieldOptions(PageBuilderBackgroundPosition_Default.section, PageBuilderBackgroundPosition_Default.fieldName)}}" userInput="innerText" stepKey="grabBackgroundPositionDropdownValues"/>
        <assertEquals stepKey="assertPositionDropdown" message="Background Position in dropdown">
            <expectedResult type="array">{{PageBuilderBackgroundPosition_Default.optionsList}}</expectedResult>
            <actualResult type="variable">grabBackgroundPositionDropdownValues</actualResult>
        </assertEquals>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBackgroundPositionProperty">
            <argument name="property" value="PageBuilderBackgroundPosition_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBackgroundSizeProperty">
            <argument name="property" value="PageBuilderBackgroundSize_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="seeDefaultBackgroundRepeatProperty">
            <argument name="property" value="PageBuilderBackgroundRepeat_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBackgroundAttachmentProperty">
            <argument name="property" value="PageBuilderBackgroundAttachment_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="seeDefaultOpenInNewTabProperty">
            <argument name="property" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBannerButtonTypeProperty">
            <argument name="property" value="PageBuilderBannerButtonTypePrimaryProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBannerShowButtonPositionProperty">
            <argument name="property" value="PageBuilderBannerShowButtonDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeDefaultBannerShowContentOverlayProperty">
            <argument name="property" value="PageBuilderBannerShowContentOverlayDefaultProperty"/>
        </actionGroup>
        <!-- Validate Edit Panel Disabled -->
        <comment userInput="Validate Edit Panel Disabled" stepKey="commentValidateEditPanelDisabled"/>
        <actionGroup ref="validateSlideOutPanelFieldIsDisabled" stepKey="seeBannerButtonTextPropertyIsDisabled">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsDisabled" stepKey="seeBannerButtonTypePropertyIsDisabled">
            <argument name="property" value="PageBuilderBannerButtonTypePrimaryProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsDisabled" stepKey="seeBannerOverlayColorPropertyIsDisabled">
            <argument name="property" value="PageBuilderBannerContentOverlayColorProperty"/>
        </actionGroup>
    </test>
    <test name="BannerValidateBackgroundSectionDefaultValuesTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Background Section Default Values"/>
            <description value="Validate the default values for every attribute in the Background section for Banner. Validate Stage and Storefront as well."/>
            <severity value="BLOCKER"/>
            <useCaseId value="MAGETWO-90828"/>
            <testCaseId value="MC-2831"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerBackground"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoColorInColorSwatch" stepKey="validateColorSwatch">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldPlaceholderText" stepKey="validateBackgroundColorPlaceholderText">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Default"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImageOrColor" stepKey="validateStage">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.noBackgroundColor('1')}}&quot;, document.body).iterateNext()).backgroundColor" stepKey="grabDefaultBackgroundColor"/>
        <assertEquals stepKey="assertDefaultBackgroundColor">
            <expectedResult type="string">{{PageBuilderBannerBackgroundColor_Empty.stageValue}}</expectedResult>
            <actualResult type="variable">grabDefaultBackgroundColor</actualResult>
        </assertEquals>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImageOrColor" stepKey="validateStage2">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.noBackgroundColor('1')}}&quot;, document.body).iterateNext()).backgroundColor" stepKey="grabDefaultBackgroundColorAfterSave"/>
        <assertEquals stepKey="assertDefaultBackgroundColorAfterSave">
            <expectedResult type="string">{{PageBuilderBannerBackgroundColor_Empty.stageValue}}</expectedResult>
            <actualResult type="variable">grabDefaultBackgroundColorAfterSave</actualResult>
        </assertEquals>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor2">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoBackgroundImage2">
            <argument name="property" value="PageBuilderBackgroundImage_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoBackgroundMobileImage2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundPosition2">
            <argument name="property" value="PageBuilderBackgroundPosition_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateBackgroundRepeat2">
            <argument name="property" value="PageBuilderBackgroundRepeat_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundSize2">
            <argument name="property" value="PageBuilderBackgroundSize_Default"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment2">
            <argument name="property" value="PageBuilderBackgroundAttachment_Default"/>
        </actionGroup>
        <!-- Fill URL field so it will show on storefront -->
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage2"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImageOrColor" stepKey="validateStorefront">
            <argument name="section" value="BannerOnFrontend"/>
        </actionGroup>
        <actionGroup ref="validateNoBackgroundImage" stepKey="validateNoBackgroundImageDesktop">
            <argument name="section" value="BannerOnFrontend"/>
        </actionGroup>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="validateNoBackgroundImage" stepKey="validateNoBackgroundImageMobile">
            <argument name="section" value="BannerOnFrontend"/>
        </actionGroup>
    </test>
    <test name="BannerValidateAdvancedConfigurationDefaultValuesTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Banner."/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-522"/>
            <testCaseId value="MC-2894"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingProperty40"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.noAlignment('1')}}" stepKey="seeAlignmentStage"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyNone.value)}}" stepKey="seeBorderStage"/>
        <seeElement selector="{{BannerOnBackend.noBorderColor('1')}}" stepKey="seeBorderColorStage"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthPropertyDefault.value)}}" stepKey="seeBorderWidthStage"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusDefaultProperty.value)}}" stepKey="seeBorderRadiusStage"/>
        <seeElement selector="{{BannerOnBackend.noCssClasses('1')}}" stepKey="seeCSSClassesStage"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyDefault.value)}}" stepKey="seeMarginsStage"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seePaddingStage"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.noAlignment('1')}}" stepKey="seeAlignmentStage2"/>
        <seeElement selector="{{BannerOnBackend.border('1', PageBuilderAdvancedBorderPropertyNone.value)}}" stepKey="seeBorderStage2"/>
        <seeElement selector="{{BannerOnBackend.noBorderColor('1')}}" stepKey="seeBorderColorStage2"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('1', PageBuilderAdvancedBorderWidthPropertyDefault.value)}}" stepKey="seeBorderWidthStage2"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('1', PageBuilderAdvancedBorderRadiusDefaultProperty.value)}}" stepKey="seeBorderRadiusStage2"/>
        <seeElement selector="{{BannerOnBackend.noCssClasses('1')}}" stepKey="seeCSSClassesStage2"/>
        <seeElement selector="{{BannerOnBackend.margins('1', PageBuilderMarginsPropertyDefault.value)}}" stepKey="seeMarginsStage2"/>
        <seeElement selector="{{BannerOnBackend.posterPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seePaddingStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingProperty40"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.noAlignment('1')}}" stepKey="seeInDOMAlignmentStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.border('1', PageBuilderAdvancedBorderPropertyNone.value)}}" stepKey="seeInDOMBorderStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.noBorderColor('1')}}" stepKey="seeInDOMBorderColorStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.borderWidth('1', PageBuilderAdvancedBorderWidthPropertyDefault.value)}}" stepKey="seeInDOMBorderWidthStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.borderRadius('1', PageBuilderAdvancedBorderRadiusDefaultProperty.value)}}" stepKey="seeInDOMBorderRadiusStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.noCssClasses('1')}}" stepKey="seeInDOMCSSClassesStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.margins('1', PageBuilderMarginsPropertyDefault.value)}}" stepKey="seeInDOMMarginsStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.posterPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seeInDOMPaddingStorefront"/>
    </test>
    <test name="BannerHasButtonStyledTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner has 'Edit Button Text' button styled correctly (Luna) in admin and frontend (Base)"/>
            <description value="A user should be able to see 'Edit Button Text' button styled correctly for banner"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-81599"/>
            <testCaseId value="MC-2590"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
            <closeTab stepKey="closeTab"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel: Primary -->
        <comment userInput="Fill Out Edit Panel: Primary" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypePrimaryProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage: Primary -->
        <comment userInput="Validate Stage: Primary" stepKey="commentValidateStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonStage"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypePrimaryProperty.value)}}" stepKey="seeButtonTypeStage"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStage"/>
        <!-- Validate Storefront: Primary -->
        <comment userInput="Validate Storefront: Primary" stepKey="commentValidateStorefront"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypePrimaryProperty.value)}}" stepKey="seeButtonTypeStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStorefront"/>
        <!-- Change button type value to secondary -->
        <comment userInput="Change button type value to secondary" stepKey="commentSecondary"/>
        <switchToPreviousTab stepKey="switchToPreviousTab"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType2">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <!-- Validate Stage: Secondary -->
        <comment userInput="Validate Stage: Secondary" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStage2"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStage2"/>
        <!-- Validate Storefront: Secondary -->
        <comment userInput="Validate Storefront: Secondary" stepKey="commentValidateStorefront2"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <reloadPage stepKey="reloadPage2"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront2"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonStorefront2"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStorefront2"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStorefront2"/>
        <!-- Change button type value to link -->
        <comment userInput="Change button type value to link" stepKey="commentLink"/>
        <switchToPreviousTab stepKey="switchToPreviousTab2"/>
        <reloadPage stepKey="reloadPage3"/>
        <waitForPageLoad stepKey="waitForPageLoad3"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage4"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType3">
            <argument name="property" value="PageBuilderBannerButtonTypeLinkProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage3"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage5"/>
        <!-- Validate Stage: Link -->
        <comment userInput="Validate Stage: Link" stepKey="commentValidateStage3"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStage3"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonStage3"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypeLinkProperty.value)}}" stepKey="seeButtonTypeStage3"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStage3"/>
        <!-- Validate Storefront: Link -->
        <comment userInput="Validate Storefront: Link" stepKey="commentValidateStorefront3"/>
        <switchToNextTab stepKey="switchToNextTab2"/>
        <reloadPage stepKey="reloadPage4"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront3"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonStorefront3"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypeLinkProperty.value)}}" stepKey="seeButtonTypeStorefront3"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextStorefront3"/>
    </test>
    <test name="BannerCanOpenInNewTabTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner can open in new tab in frontend"/>
            <description value="A user should be able to click on banner and open in new tab for frontend"/>
            <severity value="MAJOR"/>
            <useCaseId value="MAGETWO-81599"/>
            <testCaseId value="MC-2773"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
            <closeTab stepKey="closeTab"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachBackgroundImageFile">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <waitForElementVisible selector="{{PageBuilderLinkAttributeAdmin.LinkSelect('link_url')}}" stepKey="waitForLinkSelect"/>
        <seeElement selector="{{PageBuilderLinkAttributeAdmin.LinkSelect('link_url')}}" stepKey="seeLinkSelect"/>
        <seeOptionIsSelected selector="{{PageBuilderLinkAttributeAdmin.LinkSelect('link_url')}}" userInput="URL" stepKey="seeLinkSelectedByDefault"/>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerShowOverlayAlways">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="seeLinkUrlInDom"/>
        <seeElement selector="{{BannerOnFrontend.openInNewTab('1')}}" stepKey="verifyLinkOpensNewWindow"/>
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="clickLinkUrl"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlProperty.value}}" stepKey="seeCurrentUrlEquals"/>
    </test>
    <test name="BannerEmptyLinkURLDoesNothingOnStorefrontTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner - Banner Empty Link URL Does Nothing On Storefront" />
            <description value="A user should be able to click on banner with empty link url and remain on same page on the frontend"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3865"/>
            <testCaseId value="MC-4144"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty_Empty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{BannerOnFrontendEmptyLink.linkUrl('1', PageBuilderBannerLinkUrlProperty_Empty.value)}}" stepKey="seeBannerLinkElementIsADiv"/>
        <click selector="{{BannerOnFrontendEmptyLink.linkUrl('1', PageBuilderBannerLinkUrlProperty_Empty.value)}}" stepKey="clickLinkElement"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccur" />
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}{{PageBuilderBannerContentType.pageNamePrefix}}{{PageBuilderPageTitle.pageName}}" stepKey="seeThatCurrentUrlIsUnchanged" />
    </test>
    <test name="BannerDoesNotNavigateOnStageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner does not navigate on click when on the stage"/>
            <description value="A user should be to click on the banner in stage and not have it navigate to another page."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-81599"/>
            <testCaseId value="MC-2597"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderBackgroundMobileImage_GIF.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImageFile">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerShowOverlayAlways">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <grabFromCurrentUrl stepKey="currentUrl"/>
        <click selector="{{BannerOnBackend.base('1')}}" stepKey="clickBanner"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <grabFromCurrentUrl stepKey="newUrl"/>
        <assertEquals stepKey="assertUrlEquals">
            <expectedResult type="variable">newUrl</expectedResult>
            <actualResult type="variable">currentUrl</actualResult>
        </assertEquals>
    </test>
    <test name="BannerUploadImageFromStageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Upload Image From Stage"/>
            <description value="A user should be able to use the on hover upload buttons for Banner on the stage."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-1434"/>
            <testCaseId value="MC-2415"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToContentCreatedCMSPage1">
                <argument name="CMSPage" value="$$createPreReqCMSPage$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deleteCreatePreReqCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Verify On Hover Upload Button Work-->
        <comment userInput="Verify On Hover Upload Buttons Work" stepKey="commentVerifyButtons"/>
        <actionGroup ref="verifyUploadImageButtons" stepKey="verifyUploadImageButtons">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <attachFile selector="{{PageBuilderStage.uploadImageInput('1')}}" userInput="{{PageBuilderImageProperty_JPG.value}}" stepKey="attachImageFromLocalToStage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="validateBackgroundImage" stepKey="validateBackgroundImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="verifySelectFromGalleryButtonWorks" stepKey="verifySelectFromGalleryButtonWorks">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Verify Edit Panel -->
        <comment userInput="Verify Edit Panel" stepKey="commentVerifyEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeImageOnSlideOut">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <amOnPage url="$$createPreReqCMSPage.identifier$$" stepKey="amOnCmsStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad4"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
    </test>
    <test name="BannerVerifyStageUploadImageButtonsForEachAppearanceTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Verify Each Appearance Has Stage Upload Image Buttons"/>
            <description value="A user should be able to add image to Banner stage when switching between appearance types"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-1434"/>
            <testCaseId value="MC-2416"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToContentCreatedCMSPage1">
                <argument name="CMSPage" value="$$createPreReqCMSPage$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deleteCreatePreReqCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty1">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!-- Collage Left: Verify On Hover Upload Buttons -->
        <comment userInput="Collage Left: Verify On Hover Upload Buttons" stepKey="commentVerifyButtons1"/>
        <actionGroup ref="verifyUploadImageButtons" stepKey="verifyUploadImageButtons1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="verifySelectFromGalleryButtonWorks" stepKey="verifySelectFromGalleryButtonWorks">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty2">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Collage Center: Verify On Hover Upload Buttons -->
        <comment userInput="Collage Center: Verify On Hover Upload Buttons" stepKey="commentVerifyButtons2"/>
        <actionGroup ref="verifyUploadImageButtons" stepKey="verifyUploadImageButtons2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="section" value="PageBuilderStage"/>
        </actionGroup>
        <actionGroup ref="verifySelectFromGalleryButtonWorks" stepKey="verifySelectFromGalleryButtonWorks2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty3">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <!-- Collage Right: Verify On Hover Upload Buttons -->
        <comment userInput="Collage Right: Verify On Hover Upload Buttons" stepKey="commentVerifyButtons3"/>
        <actionGroup ref="verifyUploadImageButtons" stepKey="verifyUploadImageButtons3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="section" value="PageBuilderStage"/>
        </actionGroup>
        <actionGroup ref="verifySelectFromGalleryButtonWorks" stepKey="verifySelectFromGalleryButtonWorks3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
    </test>
    <test name="BannerCannotAddToStageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Cannot add Banner to Stage"/>
            <description value="If user drags Banner to Stage, it should have no effect"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3115"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
            <group value="pagebuilder-cannotAddToStage"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionMedia">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="cannotDragContentTypeToTarget" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
        </actionGroup>
        <dontSeeElementInDOM selector="{{BannerOnBackend.base('1')}}" stepKey="dontSeeBanner"/>
    </test>
    <test name="BannerCanAddToColumnTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Add Banner to Column container and view on Admin and Storefront"/>
            <description value="As a Content Manager I want column to be a container so that I can add Banner inside"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3116"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-addToColumn"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Banner to Stage -->
        <comment userInput="Add Banner to Stage" stepKey="addBannerToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionMedia">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragBannerOntoColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="User sees Banner displayed in column on Stage" stepKey="confirmBannerOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate stage after save" stepKey="validateBannerOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="View Banner inside column on storefront" stepKey="viewBannerOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefrontInDOM" stepKey="checkContentTypeInContainerStorefront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
    </test>
    <test name="BannerMoveBannerTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Move Banner Between Columns"/>
            <description value="Verify that moving a banner content type on the stage will update the storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3239"/>
            <testCaseId value="MC-3366"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Heading to Stage -->
        <comment userInput="Add Heading to Stage" stepKey="commentAddHeadingToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingToColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Add Banner to Stage -->
        <comment userInput="Add Banner to Stage" stepKey="commentAddBannerToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionInteractive">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragBannerToColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Update Edit Panel -->
        <comment userInput="Update Edit Panel" stepKey="commentEdit"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateHeadingStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateBannerStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="positionInContainer" value="2"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Move Banner -->
        <comment userInput="Move Banner" stepKey="commentMoveBanner"/>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveBannerToLeftColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateHeadingStage2">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="validateBannerStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Save Page -->
        <comment userInput="Save Page" stepKey="commentSavePage"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="validateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefront" stepKey="validateHeadingStorefront">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefront" stepKey="validateBannerStorefront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
    </test>
    <test name="DuplicateBannerTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Duplicate Banner"/>
            <description value="A user should be able to duplicate a banner content type. Verify on Stage amd Storefront."/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1433"/>
            <testCaseId value="MC-3431"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderBackgroundMobileImage_GIF.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderMinHeightProperty_500px"/>
        </actionGroup>
        <!-- Update Background Section -->
        <comment userInput="Update Background Section" stepKey="commentUpdateBackgroundSection"/>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="selectBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <!-- Update Content Section -->
        <comment userInput="Update Content Section" stepKey="commentUpdateContentSection"/>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterLink">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty2"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <!-- Update Advanced Section -->
        <comment userInput="Update Advanced Section" stepKey="commentUpdateAdvancedSection"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignmentCenter">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <actionGroup ref="hideContentType" stepKey="hideContentType">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Duplicate and Verify Stage -->
        <comment userInput="Duplicate and Verify Stage" stepKey="commentDuplicateAndVerifyStage"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateContentType">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Validate content type is disabled -->
        <comment userInput="Validate content type is disabled" stepKey="commentValidateHiddenStage"/>
        <waitForElementVisible selector="{{BannerOnBackend.hidden('1')}}" stepKey="waitForContentTypeHidden1"/>
        <waitForElementVisible selector="{{BannerOnBackend.hidden('2')}}" stepKey="waitForContentTypeHidden2"/>
        <!-- Show duplicated content type -->
        <comment userInput="Show duplicate content type" stepKey="commentShowContentType"/>
        <actionGroup ref="showContentType" stepKey="showContentType">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="showContentType" stepKey="showContentType2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.appearance('2', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('2', PageBuilderMinHeightProperty_500px.value)}}" stepKey="seeMinimumHeightStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('2', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage"/>
        <seeElement selector="{{BannerOnBackend.showButton('2', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStage"/>
        <seeElement selector="{{BannerOnBackend.buttonType('2', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStage"/>
        <seeElement selector="{{BannerOnBackend.buttonText('2', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStage"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('2', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('2', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundStage"/>
        <seeElement selector="{{BannerOnBackend.alignment('2', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage"/>
        <seeElement selector="{{BannerOnBackend.border('2', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage"/>
        <seeElement selector="{{BannerOnBackend.borderColor('2', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('2', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('2', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('2', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage"/>
        <seeElement selector="{{BannerOnBackend.margins('2', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage"/>
        <seeElement selector="{{BannerOnBackend.collagePadding('2', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <seeElement selector="{{BannerOnBackend.appearance('2', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStage2"/>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('2', PageBuilderMinHeightProperty_500px.value)}}" stepKey="seeMinimumHeightStage2"/>
        <!-- Validate content type is enabled after save -->
        <comment userInput="Validate content type is enabled after save" stepKey="commentValidateShownOnStage"/>
        <waitForElementVisible selector="{{BannerOnBackend.notHidden('1')}}" stepKey="waitForContentTypeShown1"/>
        <waitForElementVisible selector="{{BannerOnBackend.notHidden('2')}}" stepKey="waitForContentTypeShown2"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('2', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage2"/>
        <seeElement selector="{{BannerOnBackend.showButton('2', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonType('2', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStage2"/>
        <seeElement selector="{{BannerOnBackend.buttonText('2', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStage2"/>
        <seeElement selector="{{BannerOnBackend.showOverlay('2', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStage2"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('2', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundStorefront2"/>
        <seeElement selector="{{BannerOnBackend.alignment('2', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStage2"/>
        <seeElement selector="{{BannerOnBackend.border('2', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStage2"/>
        <seeElement selector="{{BannerOnBackend.borderColor('2', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStage2"/>
        <seeElement selector="{{BannerOnBackend.borderWidth('2', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStage2"/>
        <seeElement selector="{{BannerOnBackend.borderRadius('2', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStage2"/>
        <seeElement selector="{{BannerOnBackend.cssClasses('2', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStage2"/>
        <seeElement selector="{{BannerOnBackend.margins('2', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStage2"/>
        <seeElement selector="{{BannerOnBackend.collagePadding('2', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStage2"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMinimumHeight">
            <argument name="property" value="PageBuilderMinHeightProperty_500px"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="seeBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateTextInTinyMCE" stepKey="seeMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelLinkUrlField" stepKey="seeLink">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty2"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="seeShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('2', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('2', PageBuilderMinHeightProperty_500px.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <!-- Validate content type is enabled in Storefront -->
        <comment userInput="Validate content type is enabled in Storefront" stepKey="commentValidateShownStorefront"/>
        <waitForElementVisible selector="{{BannerOnFrontend.notHidden('1')}}" stepKey="waitForContentTypeShownStorefront1"/>
        <waitForElementVisible selector="{{BannerOnFrontend.notHidden('2')}}" stepKey="waitForContentTypeShownStorefront2"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('2', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.linkUrl('2', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="seeLinkUrl"/>
        <seeElement selector="{{BannerOnFrontend.showButton('2', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeButtonStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('2', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('2', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeButtonTextStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('2', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeOverlayStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('2', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayBackgroundStorefront"/>
        <seeElement selector="{{BannerOnFrontend.alignment('2', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeAlignmentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.border('2', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeBorderStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderColor('2', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeBorderColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderWidth('2', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeBorderWidthStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderRadius('2', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeBorderRadiusStorefront"/>
        <seeElement selector="{{BannerOnFrontend.cssClasses('2', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeCSSClassesStorefront"/>
        <seeElement selector="{{BannerOnFrontend.margins('2', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMarginsStorefront"/>
        <seeElement selector="{{BannerOnFrontend.collagePadding('2', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seePaddingStorefront"/>
        <!-- Validate Storefront Mobile -->
        <comment userInput="Validate Storefront Mobile" stepKey="commentValidateStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <seeElement selector="{{BannerOnFrontend.appearance('2', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeMobileAppearanceStorefront"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('2', PageBuilderMinHeightProperty_500px.value)}}" stepKey="seeMobileMinimumHeightStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateMobileBackgroundAttributesStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('2', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMobileMessageContentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showButton('2', PageBuilderBannerShowButtonAlwaysProperty.value)}}" stepKey="seeMobileButtonStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('2', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeMobileButtonTypeStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('2', PageBuilderBannerButtonTextProperty2.value)}}" stepKey="seeMobileButtonTextStorefront"/>
        <seeElement selector="{{BannerOnFrontend.showOverlay('2', PageBuilderBannerShowContentOverlayAlwaysProperty.value)}}" stepKey="seeMobileOverlayStateStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('2', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeMobileOverlayBackgroundStorefront"/>
        <seeElement selector="{{BannerOnFrontend.alignment('2', PageBuilderAdvancedAlignmentPropertyCenter.value)}}" stepKey="seeMobileAlignmentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.border('2', PageBuilderAdvancedBorderPropertyDouble.value)}}" stepKey="seeMobileBorderStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderColor('2', PageBuilderAdvancedBorderColorProperty_green.rgb)}}" stepKey="seeMobileBorderColorStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderWidth('2', PageBuilderAdvancedBorderWidthProperty10.value)}}" stepKey="seeMobileBorderWidthStorefront"/>
        <seeElement selector="{{BannerOnFrontend.borderRadius('2', PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="seeMobileBorderRadiusStorefront"/>
        <seeElement selector="{{BannerOnFrontend.cssClasses('2', PageBuilderAdvancedCssClassesPropertyThreeClasses.value)}}" stepKey="seeMobileCSSClassesStorefront"/>
        <seeElement selector="{{BannerOnFrontend.margins('2', PageBuilderMarginsPropertyUnique.value)}}" stepKey="seeMobileMarginsStorefront"/>
        <seeElement selector="{{BannerOnFrontend.collagePadding('2', PageBuilderPaddingPropertyUnique.value)}}" stepKey="seeMobilePaddingStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateMobileImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <click selector="{{BannerOnFrontend.linkUrl('2', PageBuilderBannerLinkUrlProperty.value)}}" stepKey="clickLinkUrl"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlProperty.value}}" stepKey="seeCurrentUrlEquals"/>
    </test>
    <test name="ValidateShowHideOnBannerDefaultStateTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner is shown by default"/>
            <description value="Banner is shown by default in stage and storefront"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-965"/>
            <testCaseId value="MC-3552"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
            <group value="pagebuilder-hideShow"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Banner to Stage -->
        <comment userInput="Add Banner to Stage" stepKey="commentAddBannerToStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillOutColorPicker" stepKey="fillOutColor">
            <argument name="colorCode" value="PageBuilderBackgroundColorProperty_087E8B"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Stage: Validate Default Show/Hide State - Before Save -->
        <comment userInput="Stage: Validate Default Show/Hide State Before Save" stepKey="CommentValidateDefaultShowHideStateOnStageBeforeSave"/>
        <seeElement selector="{{BannerOnBackend.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStageBeforeSave"/>
        <!-- Stage: Validate Default Show/Hide State - After Save -->
        <comment userInput="Stage: Validate Default Show/Hide State - After Save" stepKey="CommentValidateDefaultShowHideStateOnStageAfterSave"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <seeElement selector="{{BannerOnBackend.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStageAfterSave"/>
        <!-- Storefront: Validate Default Show/Hide State -->
        <comment userInput="Storefront: Validate Default Show/Hide State" stepKey="CommentValidateDefaultShowHideStateOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.notHidden('1')}}" stepKey="seeContentTypeNotHiddenStorefront"/>
    </test>
    <test name="ValidateShowHideOnBannerTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner has hide show capabilities"/>
            <description value="A user is able to hide and show the banner successfully"/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-965"/>
            <testCaseId value="MC-3533"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-hideShow"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
            <closeTab stepKey="closeOpenedTab"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionAddContent">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillOutColorPicker" stepKey="fillOutColor">
            <argument name="colorCode" value="PageBuilderBackgroundColorProperty_087E8B"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <actionGroup ref="hideContentType" stepKey="hideContentType">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage1"/>
        <!-- Validate content type remains disabled after save -->
        <comment userInput="Validate content type remains disabled after save" stepKey="commentValidateHiddenStage"/>
        <seeElement selector="{{BannerOnBackend.hidden('1')}}" stepKey="waitForContentTypeHidden"/>
        <!-- Validate store front -->
        <comment userInput="Validate content type is disabled on storefront" stepKey="commentValidateHiddenStorefront"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <waitForElement selector="{{BannerOnFrontend.base('1')}}" stepKey="waitForContentTypeNotVisible"/>
        <dontSeeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="dontSeeContentType"/>
        <seeElementInDOM selector="{{BannerOnFrontend.hidden('1')}}" stepKey="waitForHiddenElement"/>
        <!-- Set content to visible in admin -->
        <comment userInput="Set content to visible in admin" stepKey="commentSetContentToVisibleAdmin"/>
        <switchToNextTab stepKey="switchBackToAdmin"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForAdminReload"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="showContentType" stepKey="showContentType">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage1"/>
        <!-- Validate Content Is Shown Storefront -->
        <comment userInput="Validate Content Is Shown Storefront" stepKey="commentValidateContentIsShownStorefront"/>
        <switchToNextTab stepKey="switchBackToStorefront"/>
        <reloadPage stepKey="reloadStorefront"/>
        <waitForPageLoad stepKey="waitForStorefrontReload"/>
        <dontSeeElementInDOM selector="{{BannerOnFrontend.hidden('1')}}" stepKey="dontSeeHiddenElement"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}" stepKey="waitForContentTypeVisible"/>
    </test>
    <test name="BannerContentBlockDeleteImageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Image from Banner Content Block get wiped out after delete image from Media Storage"/>
            <description value="Image from Banner Content Block get wiped out after delete image from Media Storage"/>
            <severity value="AVERAGE"/>
            <useCaseId value="MC-2294"/>
            <testCaseId value="MC-3593"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-image"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Attach image A to PageBuilder stage -->
        <comment userInput="Attach image A to PageBuilder stage" stepKey="commentAttachImage"/>
        <actionGroup ref="uploadImageToContentTypeFromStage" stepKey="addImageToStage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <!-- Go to Media Storage from stage -->
        <comment userInput="Go to Media Storage from stage" stepKey="commentGoToMediaStorageFromStage1"/>
        <actionGroup ref="goToMediaStorageFromStage" stepKey="goToMediaStorageFromStage1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="x" value="0"/>
            <argument name="y" value="0"/>
        </actionGroup>
        <!-- Delete image A -->
        <comment stepKey="deleteImageA" userInput="Delete image A"/>
        <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage1">
            <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <click selector="{{MediaGallerySection.CancelBtn}}" stepKey="closeSlideOut1"/>
        <!-- Assert not to see deleted image on stage -->
        <comment userInput="Assert not to see deleted image on stage" stepKey="assertNotToSeeImage1"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeBannerPlaceholder1"/>
        <dontSeeElementInDOM selector="{{BannerOnBackend.imageOnStage('1',PageBuilderBackgroundImage_JPG.fileName)}}" stepKey="dontSeeImageInDOM1"/>
        <!-- Attach image C to Image slideout form -->
        <comment userInput="Attach image C to Image slideout form" stepKey="attachImageToSlideOut"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImageFile1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeImageOnSlideOut1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Delete image C -->
        <comment stepKey="deleteImageC" userInput="Delete image C"/>
        <actionGroup ref="clickSelectFromGallerySlideOut" stepKey="clickSelectFromGallerySlideOut">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <click selector="{{MediaGallerySection.currentSelectedDirectory}}" stepKey="refreshFolder"/>
        <waitForPageLoad stepKey="waitForRefresh"/>
        <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage3">
            <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <click selector="{{MediaGallerySection.CancelBtn}}" stepKey="closeSlideOut2"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <!-- Verify image is removed from Banner stage -->
        <comment userInput="Verify image is removed from Banner stage" stepKey="commentVerifyBannerStage"/>
        <seeElement selector="{{BannerOnBackend.emptyBanner('1')}}" stepKey="seeBannerPlaceholder2"/>
        <dontSeeElementInDOM selector="{{BannerOnBackend.imageOnStage('1',PageBuilderBackgroundImage_JPG.fileName)}}" stepKey="dontSeeImageInDOM2"/>
    </test>
    <test name="BannerContentVariableCanWrapTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner content variable value can wrap to multiple lines"/>
            <description value="A user can see a long banner content variable with no spaces can wrap to multiple lines in storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-3508"/>
            <testCaseId value="MC-4141"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
        </annotations>
        <before>
            <magentoCLI command="config:set general/store_information/name {{TinyMCEVariableStoreName.storefrontValue}}" stepKey="setValueForStoreNameVariable"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <!-- The below value is the Jenkins default store name -->
            <magentoCLI command="config:set general/store_information/name 'Main Website Store'" stepKey="setBackToDefaultValue"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Column to Stage -->
        <comment userInput="Add Column to Stage" stepKey="addColumnToStage"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="removeEmptyContentTypeFromStage" stepKey="removeColumn1">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Banner to Column -->
        <comment userInput="Add Banner to Column" stepKey="addBannerToColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionElements">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Variable to Banner -->
        <comment userInput="Add Variable to Banner" stepKey="commentAddVariableToBanner"/>
        <click selector="{{PageBuilderStage.inlineWYSIWYGEditor(PageBuilderBannerContentType.role, '1')}}" stepKey="focusOnEditorArea"/>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCEInline">
            <argument name="variable" value="TinyMCEVariableStoreName"/>
        </actionGroup>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromTextarea"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="targetIndex" value="1"/>
            <argument name="contentTypeXCoordinate" value="10"/>
            <argument name="contentTypeYCoordinate" value="0"/>
        </actionGroup>
        <!-- Resize Columns -->
        <comment userInput="Resize Columns" stepKey="commentResizeColumns"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnResizeGridLine('1')}}').clientWidth" stepKey="guideWidth"/>
        <dragAndDrop selector1="{{ColumnOnBackend.columnX('1')}} {{ColumnOnBackend.columnResizeHandle}}" selector2="{{ColumnOnBackend.columnResizeGridLine('1')}}" x="$guideWidth" stepKey="resizeColumnToOne"/>
        <waitForPageLoad stepKey="waitForDragAndDrop"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Height of Variable in Storefront -->
        <comment userInput="Validate Height of Variable in Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Grab Height Values -->
        <comment userInput="Grab Height Values" stepKey="commentGrabHeightValues"/>
        <executeJS function="{{BannerOnFrontend.messageContentHeightJS('1', TinyMCEVariableStoreName.storefrontValue)}}" stepKey="columnOneTextHeight"/>
        <executeJS function="{{BannerOnFrontend.messageContentHeightJS('2', TinyMCEVariableStoreName.storefrontValue)}}" stepKey="columnTwoTextHeight"/>
        <assertGreaterThan stepKey="assertColumnTwoTextGreaterThanColumnOneText">
            <expectedResult type="variable">columnTwoTextHeight</expectedResult>
            <actualResult type="variable">columnOneTextHeight</actualResult>
        </assertGreaterThan>
    </test>
    <test name="BannerInlineWYSIWYGWidgetAndVariableStyleTest" extends="TextInlineWYSIWYGWidgetAndVariableStyleTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Verify widget and variable placeholder styling is correct in admin and that they resolve on storefront"/>
            <description value="Verify widget and variable placeholder styling is correct in admin and that they resolve on storefront"/>
            <severity value="BLOCKER"/>
            <useCaseId value="MC-4150"/>
            <testCaseId value="MC-4947"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
        </annotations>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddContentType"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <click selector="{{BannerOnBackend.tinymce('1')}}" stepKey="focusOnEditorArea1"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableBaseURLStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetStage"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.variablePlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getVariableStyle"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.widgetPlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getWidgetStyle"/>
        <waitForElement selector="{{BannerOnBackend.variablePlaceholder('1')}}" stepKey="waitForVariableElement"/>
        <waitForElement selector="{{BannerOnBackend.widgetPlaceholder('1')}}" stepKey="waitForWidgetElement"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.variablePlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getVariableStyleAfterSave"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{BannerOnBackend.widgetPlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getWidgetStyleAfterSave"/>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableStorefront"/>
        <seeElement selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="seeWidgetStorefront"/>
        <click selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="clickWidgetStorefront"/>
    </test>
    <test name="BannerInlineWysiwygUploadImageTest" extends="SlideItemInlineWysiwygUploadImageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Can Add Banner WYSIWYG Image From Gallery or Link to Image in Gallery After Page Has Been Saved"/>
            <description value="A user should be able to upload image to inline wysiwyg after a banner has been saved to a page"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4323"/>
            <testCaseId value="MC-5019"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
        </annotations>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddContentType"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeOntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <comment userInput="Removed closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Add Image to Banner -->
        <comment userInput="Add Image to Banner" stepKey="commentAddImageToContentType"/>
        <click selector="{{PageBuilderStage.inlineWYSIWYGEditor(PageBuilderBannerContentType.role, '1')}}" stepKey="focusOnEditorArea"/>
        <!-- Validate Image Editor On Backend -->
        <seeElement selector="{{BannerOnBackend.inlineWYSIWYGEditorWithTag('1', 'img')}}" stepKey="validateImageInEditor"/>
        <!-- Validate Image Editor On Backend After Save -->
        <seeElement selector="{{BannerOnBackend.inlineWYSIWYGEditorWithTag('1', 'img')}}" stepKey="validateImageInEditorAfterSave"/>
        <!-- Validate Image Editor On Storefront -->
        <seeElement selector="{{BannerOnFrontend.messageContentTextAreaImage('1', PageBuilderBackgroundImage_JPG.value)}}" stepKey="validateImageFrontEnd"/>
    </test>
    <test name="BannerCannotHaveInlineWysiwygLinkAndLinkUrlTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner inline WYSIWYG editor will notify user that they cannot add TinyMCE Link and Link URL at the same time"/>
            <description value="Banner edit form and inline editor validate banner TinyMCE Link and Link URL could not be added at the same time."/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5386"/>
            <testCaseId value="MC-6052"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Check Invalid Link Url and Message Text -->
        <comment userInput="Check Invalid Link Url and Message Text" stepKey="commentCheckInvalidLinkUrlAndMessageText"/>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterLink">
            <argument name="property" value="PageBuilderBannerLinkUrlProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="insertLinkInWYSIWYG" stepKey="insertLinkInWYSIWYG">
            <argument name="url" value="{{ExternalLink.googleUrl}}"/>
            <argument name="textToDisplay" value="{{ExternalLink.googleUrl}}"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldError" stepKey="validateInvalidLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlInvalidProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldError" stepKey="validateInvalidMessageWithUrl">
            <argument name="property" value="PageBuilderBannerMessageInvalidProperty"/>
        </actionGroup>
        <!-- Correcting invalid fields -->
        <comment userInput="Correcting invalid fields" stepKey="commentCorrectingInvalidFields"/>
        <actionGroup ref="replaceTextToTinyMCE" stepKey="replaceMessageText">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Check inline editor will validate for not allowing TinyMCE Link and Link URL at the same time -->
        <comment userInput="Check inline editor will validate for not allowing TinyMCE Link and Link URL at the same time" stepKey="commentCheckInlineEditorPreventAddingBothUrls"/>
        <click selector="{{PageBuilderStage.inlineWYSIWYGEditor(PageBuilderBannerContentType.role, '1')}}" stepKey="focusOnEditorArea"/>
        <waitForElementVisible selector="{{PageBuilderStage.inlineWYSIWYGEditorPanel(PageBuilderBannerContentType.role, '1')}}" stepKey="waitForEditorPanel"/>
        <actionGroup ref="insertLinkInWYSIWYG" stepKey="insertLinkInStageInlineEditor">
            <argument name="url" value="{{ExternalLink.googleUrl}}"/>
            <argument name="textToDisplay" value="{{ExternalLink.googleUrl}}"/>
            <argument name="wysiwygArea" value=""/>
        </actionGroup>
        <seeElement selector="{{PageBuilderStage.modal(PageBuilderBannerMessageInvalidProperty.stageErrorMessage)}}" stepKey="seeCorrectErrorModal"/>
        <actionGroup ref="confirmRemovalModal" stepKey="confirmNestingLinkModal"/>
        <!-- Checks for a tags within the tinyMCE with regex -->
        <executeJS function="return (/&lt;a[\s]+([^&gt;]+)&gt;|&lt;a&gt;|&lt;\/a&gt;/igm).test(tinymce.activeEditor.getContent());" stepKey="grabIfAnchorInWysiwygBoolean"/>
        <assertFalse stepKey="assertMessageHasNoAnchorTags">
            <actualResult type="variable">grabIfAnchorInWysiwygBoolean</actualResult>
        </assertFalse>
        <!-- Check slide out editor will validate for not allowing TinyMCE Link and Link URL at the same time -->
        <comment userInput="Check slide out editor will validate for not allowing TinyMCE Link and Link URL at the same time" stepKey="commentCheckSlideOutEditorPreventAddingBothUrls"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageAfterInlineValidation">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Checks for a tags within the tinyMCE with regex -->
        <executeJS function="return (/&lt;a[\s]+([^&gt;]+)&gt;|&lt;a&gt;|&lt;\/a&gt;/igm).test(tinymce.activeEditor.getContent());" stepKey="grabIfAnchorInSlideOutWysiwygBoolean"/>
        <assertFalse stepKey="assertMessageHasNoAnchorTags2">
            <actualResult type="variable">grabIfAnchorInSlideOutWysiwygBoolean</actualResult>
        </assertFalse>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Storefront: Validate No Link in Banner Content -->
        <comment userInput="Storefront: Validate No Link in Banner Content" stepKey="CommentValidateNoLinkInBannerContent"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Checks for a tags within the message with regex -->
        <executeJS function="return (/&lt;a[\s]+([^&gt;]+)&gt;|&lt;a&gt;|&lt;\/a&gt;/igm).test({{BannerOnFrontend.contentJS('1')}}.innerHTML);" stepKey="grabIfFrontendAnchorInContentBoolean"/>
        <assertFalse stepKey="assertFrontendMessageHasNoAnchorTags">
            <actualResult type="variable">grabIfFrontendAnchorInContentBoolean</actualResult>
        </assertFalse>
    </test>
    <test name="BannerTextContainingPageBuilderMarkupWontBreakStageTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner - Nested Text"/>
            <description value="Nested text content types within the banner text shouldn't cause the whole stage to break and render all content in a HTML content type"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-13917"/>
            <testCaseId value="MC-13930"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_cmsPageWithBannerNestedText" stepKey="createCMSPage"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToContentCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <dontSeeElement selector="{{HtmlOnStage.base('1')}}" stepKey="dontSeeHtmlCode" />
        <waitForElementVisible selector="{{BannerOnBackend.base('1')}}" stepKey="waitForBannerVisible" />
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTestStringInBanner"/>
    </test>
    <test name="BannerValidateVideoBackgroundSectionDefaultValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner Video Background - Validate Default Values"/>
            <description value="Validate the default values for every attribute in the Video Background section for Banner"/>
            <severity value="BLOCKER"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31625"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <!-- Validate Edit Panel -->
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColorEmpty">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="seeNoColorInColorSwatch" stepKey="validateBackgroundColorSwatchEmpty">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldPlaceholderText" stepKey="validateBackgroundColorPlaceholderText">
            <argument name="property" value="PageBuilderBackgroundColor_Default"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateVideoUrlEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Empty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldTooltip" stepKey="validateTooltipVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Empty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateOverlayColorEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Empty"/>
        </actionGroup>
        <actionGroup ref="seeNoColorInColorSwatch" stepKey="validateOverlayColorSwatchEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Empty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldPlaceholderText" stepKey="validateOverlayColorPlaceholderText">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Empty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateInfiniteLoop">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateLazyLoad">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldHelperText" stepKey="validateHelperTextLazyLoad">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validatePlayOnlyVisible">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldHelperText" stepKey="validateHelperTextPlayOnlyVisible">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_Empty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldTooltip" stepKey="validateTooltipFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_Empty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldHelperText" stepKey="validateHelperTextFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_Empty"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundVideoURLs">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Video Urls"/>
            <description value="Verify that the video background URL field is required, only accepts valid urls, and that the user can set an embedded or non-embedded video background to a YouTube or Vimeo video, or to a stored .mp4 video."/>
            <severity value="BLOCKER"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31639"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_200px"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <!-- Validate URL Required -->
        <actionGroup ref="saveEditPanelAndValidateFieldError" stepKey="validateUrlErrorMessageEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Empty"/>
        </actionGroup>
        <!-- Validate Invalid URL Message -->
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrlInvalid">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Invalid_Text"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelAndValidateFieldError" stepKey="validateUrlErrorMessageInvalid">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Invalid_Text"/>
        </actionGroup>
        <!-- Update to YouTube Embedded -->
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="validateVideoBackgroundWithOnlyVideoUrl" stepKey="validateStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <!-- Update to YouTube Non-Embedded -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl2">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="validateVideoBackgroundWithOnlyVideoUrl" stepKey="validateStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
        </actionGroup>
        <!-- Update to Vimeo Embedded-->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage4">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl4">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Vimeo_Embedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings4"/>
        <actionGroup ref="validateVideoBackgroundWithOnlyVideoUrl" stepKey="validateStage4">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Vimeo_Embedded"/>
        </actionGroup>
        <!-- Update to Vimeo Non-Embedded -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage5">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl5">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Vimeo_NonEmbedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings5"/>
        <actionGroup ref="validateVideoBackgroundWithOnlyVideoUrl" stepKey="validateStage5">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Vimeo_NonEmbedded"/>
        </actionGroup>
        <!-- Update to .mp4 URL -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage7">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl7">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings7"/>
        <actionGroup ref="validateVideoBackgroundWithOnlyVideoUrl" stepKey="validateStage7">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
    </test>
    <test name="BannerVerifyCanSwitchBackgroundTypes">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Verify User Can Switch Between Background Images and Videos for Banner"/>
            <description value="Verify that a user can switch between background images and background videos."/>
            <severity value="MAJOR"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31669"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToFallbackImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage1">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage1">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteFallbackImage1">
                <argument name="Image" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage2">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage2">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Set Background Image Attributes -->
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_200px"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachMobileBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Pink"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Change to Video Background and Confirm Default Attributes on Edit Panel -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType2">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateVideoUrlEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Empty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateOverlayColorEmpty">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Empty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateInfiniteLoop">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateLazyLoad">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validatePlayOnlyWhenVisible">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_Empty"/>
        </actionGroup>
        <!-- Set Video Background Attributes -->
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setInfiniteLoop">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setLazyLoad">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setPlayOnlyWhenVisible">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateVideoBackgroundWithAllAttributes" stepKey="validateStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="{{PageBuilderBackgroundColor_Pink.rgb}}"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
            <argument name="overlayColor" value="{{PageBuilderVideoBackgroundOverlayColor_Hex_Grey.rgba}}"/>
            <argument name="infiniteLoop" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="lazyLoad" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
        </actionGroup>
        <!-- Confirm Background Image Attributes Maintained on Edit Panel -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType3">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor2">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <!-- Save Page -->
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateVideoBackgroundWithAllAttributes" stepKey="validateStage3">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="{{PageBuilderBackgroundColor_Pink.rgb}}"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
            <argument name="overlayColor" value="{{PageBuilderVideoBackgroundOverlayColor_Hex_Grey.rgba}}"/>
            <argument name="infiniteLoop" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="lazyLoad" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
        </actionGroup>
        <!-- Confirm Video Background Attributes Maintained After Save -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage4">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor3">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundType2">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateVideoUrl2">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateOverlayColor2">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateInfiniteLoop2">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateLazyLoad2">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validatePlayOnlyWhenVisible2">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateFallbackImage2">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
        </actionGroup>
        <!-- Confirm No Background Images After Save -->
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType4">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor4">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateBackgroundImageEmpty">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateBackgroundMobileImageEmpty">
            <argument name="property" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundSize2">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundPosition2">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment2">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateBackgroundRepeat2">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <!-- Set Background Image Attributes -->
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundImage2">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachMobileBackgroundImage2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateStage4">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Pink"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Confirm Video Background Attributes Maintained on Edit Panel -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage5">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundType3">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType5">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor5">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateVideoUrl5">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateOverlayColor5">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateInfiniteLoop5">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateLazyLoad5">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validatePlayOnlyWhenVisible5">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateFallbackImage5">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_GIF"/>
        </actionGroup>
        <!-- Save Page -->
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateStage5">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Pink"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage3">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Confirm Background Image Attributes Maintained After Save -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage6">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor6">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundType4">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateBackgroundImage6">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="validateBackgroundMobileImage6">
            <argument name="property" value="PageBuilderBackgroundMobileImage_SpecialCharacters"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundSize6">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundPosition6">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment6">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsCheckedSlideOutProperty" stepKey="validateBackgroundRepeat6">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <!-- Confirm Video Background URL, Overlay Color, and Fallback Image Attributes Not Maintained After Save -->
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType6">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBackgroundColor7">
            <argument name="property" value="PageBuilderBackgroundColor_Pink"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateVideoUrlEmpty7">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Empty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateOverlayColorEmpty7">
            <argument name="property" value="PageBuilderVideoBackgroundOverlayColor_Empty"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateInfiniteLoop7">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validateLazyLoad7">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="validatePlayOnlyWhenVisible7">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
        </actionGroup>
        <actionGroup ref="seeNoImageUploadedOnSlideOut" stepKey="validateNoFallbackImage7">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_Empty"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundInfiniteLoopEnabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Infinite Loop Enabled"/>
            <description value="Verify that the video background infinite loop attribute works as intended when enabled."/>
            <severity value="BLOCKER"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31691"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToFallbackImageFolder">
                <argument name="FolderName" value="{{PageBuilderVideoBackgroundFallbackImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteFallbackImage">
                <argument name="Image" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_200px"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setInfiniteLoopEnabled">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings4"/>
        <!-- Stage: Validate Video is Playing -->
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <wait time="5" stepKey="waitForVideoCompleteStage"/>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Storefront: Validate Video is Playing -->
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStorefront1">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <wait time="5" stepKey="waitForVideoCompleteStorefront"/>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundInfiniteLoopDisabled" extends="BannerValidateVideoBackgroundInfiniteLoopEnabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Infinite Loop Disabled"/>
            <description value="Verify that the video background infinite loop attribute works as intended when disabled."/>
            <severity value="BLOCKER"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31692"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setInfiniteLoopEnabled">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <wait time="5" stepKey="waitForVideoCompleteStageBefore" before="validateVideoPlayingStage1"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlaying" stepKey="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStage1" after="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundFinishedPlaying" stepKey="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStage2" after="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
        <wait time="5" stepKey="waitForVideoCompleteStorefrontBefore" before="validateVideoPlayingStorefront1"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlaying" stepKey="validateVideoPlayingStorefront1">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStorefront1" after="validateVideoPlayingStorefront1">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundFinishedPlaying" stepKey="validateVideoPlayingStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStorefront2" after="validateVideoPlayingStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundPlayOnlyWhenVisibleEnabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Play Only When Visible Enabled"/>
            <description value="Verify that the video background play only when visible attribute works as intended when enabled."/>
            <severity value="CRITICAL"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31695"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Set Large Min Height on Banner 1 -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty1">
            <argument name="property" value="PageBuilderMinHeightProperty_500px"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!-- Create 3 more Banners -->
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <!-- Set Video Background on Banner 4 -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage4">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="4"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setLazyLoadDisabled">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setPlayOnlyWhenVisibleEnabled">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings4"/>
        <!-- Stage: Validate Video is Playing -->
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Stage: Validate Video is not Playing -->
        <actionGroup ref="validateVideoBackgroundLoadedButNotPlaying" stepKey="validateVideoNotPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <scrollTo selector="{{BannerOnBackend.base('4')}}" stepKey="scrollBanner4Stage"/>
        <!-- Stage: Validate Video is Playing -->
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <!-- Storefront: Validate Video is not Playing -->
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoadedButNotPlaying" stepKey="validateVideoNotPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <scrollTo selector="{{BannerOnFrontend.base('4')}}" stepKey="scrollBanner4Storefront"/>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_NonEmbedded"/>
            <argument name="index" value="4"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundPlayOnlyWhenVisibleDisabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Play Only When Visible Disabled"/>
            <description value="Verify that the video background play only when visible attribute works as intended when disabled."/>
            <severity value="CRITICAL"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31696"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToFallbackImageFolder">
                <argument name="FolderName" value="{{PageBuilderVideoBackgroundFallbackImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteFallbackImage">
                <argument name="Image" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Set Large Min Height on Banner 1 -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty1">
            <argument name="property" value="PageBuilderMinHeightProperty_500px"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!-- Create 3 more Banners -->
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <!-- Set Video Background on Banner 4 -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage4">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="4"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setInfiniteLoopDisabled">
            <argument name="property" value="PageBuilderVideoBackgroundInfiniteLoop_Disabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setLazyLoadDisabled">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setPlayOnlyWhenVisibleEnabled">
            <argument name="property" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Disabled"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFallbackImage">
            <argument name="property" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings4"/>
        <!-- Validate Stage -->
        <wait time="5" stepKey="waitForVideoCompleteStage"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlaying" stepKey="validateVideoFinishedPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <wait time="5" stepKey="waitForVideoCompleteStage2"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlayingBeforeViewing" stepKey="validateVideoFinishedPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <scrollTo selector="{{BannerOnBackend.base('4')}}" stepKey="scrollBanner4Stage"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlayingBeforeViewing" stepKey="validateVideoFinishedPlayingStage3">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStage3">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <wait time="5" stepKey="waitForVideoCompleteStorefront"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlayingBeforeViewing" stepKey="validateVideoFinishedPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <scrollTo selector="{{BannerOnFrontend.base('4')}}" stepKey="scrollBanner4Storefront"/>
        <wait time="5" stepKey="waitForVideoCompleteStorefront2"/>
        <actionGroup ref="validateVideoBackgroundFinishedPlayingBeforeViewing" stepKey="validateVideoFinishedPlayingStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="playOnlyWhenVisible" value="PageBuilderVideoBackgroundPlayOnlyWhenVisible_Enabled"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateFallbackImageAfterVideoFinishesPlayingInVideoBackground" stepKey="validateFallbackImageVisibleStorefront2">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="fallbackImage" value="PageBuilderVideoBackgroundFallbackImage_JPG"/>
            <argument name="index" value="4"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundLazyLoadEnabled" extends="BannerValidateVideoBackgroundPlayOnlyWhenVisibleEnabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Lazy Load Enabled"/>
            <description value="Verify that the video background lazy load attribute works as intended when enabled."/>
            <severity value="CRITICAL"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31701"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setLazyLoadDisabled">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Enabled"/>
        </actionGroup>
        <remove keyForRemoval="setPlayOnlyWhenVisibleEnabled"/>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundNotLoaded" stepKey="validateVideoNotPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundNotLoaded" stepKey="validateVideoNotPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="index" value="4"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundLazyLoadDisabled" extends="BannerValidateVideoBackgroundPlayOnlyWhenVisibleEnabled">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Lazy Load Disabled"/>
            <description value="Verify that the video background lazy load attribute works as intended when disabled."/>
            <severity value="CRITICAL"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31702"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setLazyLoadDisabled">
            <argument name="property" value="PageBuilderVideoBackgroundLazyLoad_Disabled"/>
        </actionGroup>
        <remove keyForRemoval="setPlayOnlyWhenVisibleEnabled"/>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoNotPlayingStage1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStage2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoNotPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundLoaded" stepKey="validateVideoPlayingStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="index" value="4"/>
        </actionGroup>
    </test>
    <test name="BannerValidateVideoBackgroundAspectRatio">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Validate Banner Video Background Aspect Ratio"/>
            <description value="Verify that the video background aspect ratio is maintained in each appearance."/>
            <severity value="BLOCKER"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-31735"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Video to Banner -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty1">
            <argument name="property" value="PageBuilderMinHeightProperty_200px"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_Mp4_URL"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!-- Create 3 more Banners -->
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner1">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <!-- Make Banner 2 Collage Left -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance2">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Make Banner 3 Collage Center -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="3"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance3">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <!-- Make Banner 4 Collage Right -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage4">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="4"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance4">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings4"/>
        <executeJS function="return parseInt(&quot;{{PageBuilderVideoBackgroundUrl_Mp4_URL_Insecure.width}}&quot;) / parseInt(&quot;{{PageBuilderVideoBackgroundUrl_Mp4_URL_Insecure.height}}&quot;)" stepKey="expectedVideoAspectRatio"/>
        <!-- Validate Stage -->
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner1Stage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner2Stage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner3Stage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="3"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner4Stage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="4"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate Storefront -->
        <amOnUrl url="{{_ENV.MAGENTO_BASE_URL}}" stepKey="goBackToMagento"/>
        <actionGroup ref="NavigateToStorefrontForCreatedPageActionGroup" stepKey="navigateToStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner1Storefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner2Storefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner3Storefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="3"/>
        </actionGroup>
        <actionGroup ref="validateVideoAspectRatio" stepKey="validateVideoAspectRatioBanner4Storefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="expectedRatio" value="{$expectedVideoAspectRatio}"/>
            <argument name="index" value="4"/>
        </actionGroup>
    </test>
    <test name="BannerTinyMCEMenuOpensInFrontOfVideoBackground">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner: Verify TinyMCE Menu Opens In Front of Video Background"/>
            <description value="Validate that the TinyMCE menu opens in front of a banner's video background."/>
            <severity value="AVERAGE"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-32035"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Column and Banner to Stage -->
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnToStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionBanner">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragBannerToColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Add Video Background -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_300px"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Create Banners Beside One Another -->
        <actionGroup ref="duplicateContentType" stepKey="duplicateBanner">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveBannerToSecondColumn">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="contentTypeIndex" value="2"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="SaveAndContinueEditCmsPageActionGroup" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Wait For Videos to Start -->
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlaying1">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlaying2">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Open Editor For Banner 1 and Verify -->
        <actionGroup ref="openInlineWYSIWYGEditorOnStage" stepKey="openInlineWYSIWYGEditorOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="verifyInlineTinyMCEEditorNotUnderOtherElements" stepKey="VerifyTinyMCEEditorButtonsActionGroup"/>
    </test>
    <test name="BannerVerifyStageUploadImageButtonsWorkWithVideoBackground">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Banner"/>
            <title value="Banner: Verify Stage Upload Image Buttons Work With Video Background"/>
            <description value="Verify that the on hover upload image buttons work for banners with video backgrounds"/>
            <severity value="AVERAGE"/>
            <useCaseId value="PB-265"/>
            <testCaseId value="MC-32036"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-backgroundForm"/>
            <group value="pagebuilder-video-background"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="NavigateToCreatedCMSPageActionGroup" stepKey="navigateToCreatedCMSPage">
                <argument name="CMSPage" value="$$createCMSPage$$"/>
            </actionGroup>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="NavigateToMediaGalleryActionGroup" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToFallbackImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage1">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerOntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Add Video Background -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_300px"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Video"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrl">
            <argument name="property" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="validateVideoBackgroundPlaying" stepKey="validateVideoPlaying">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="videoUrl" value="PageBuilderVideoBackgroundUrl_YouTube_Embedded"/>
        </actionGroup>
        <!-- Verify Upload Image Buttons -->
        <actionGroup ref="verifyUploadImageButtons" stepKey="verifyUploadImageButtons">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="verifySelectFromGalleryButtonWorks" stepKey="verifySelectFromGalleryButtonWorks">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="uploadImageToContentTypeFromStage" stepKey="uploadImageToBanner">
            <argument name="property" value="PageBuilderImageProperty_JPG"/>
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateBackgroundImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Verify Edit Panel -->
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundType">
            <argument name="property" value="PageBuilderBackgroundType_Image"/>
        </actionGroup>
        <actionGroup ref="seeImageUploadedOnSlideOut" stepKey="seeImageOnSlideOut">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
    </test>
</tests>
